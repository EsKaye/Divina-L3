{"id":"1a5079acdb4b5c2fdb214be9e14a7743","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"},"@openzeppelin/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"},"contracts/GamingTournament.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title GameDin Tournament Contract\r\n * @dev Advanced tournament system for GameDin L3 gaming platform\r\n * Handles tournament creation, player registration, matchmaking, and prize distribution\r\n */\r\ncontract GamingTournament is AccessControl, ReentrancyGuard, Pausable {\r\n    // =============================================================================\r\n    // CONSTANTS & ROLES\r\n    // =============================================================================\r\n    \r\n    bytes32 public constant TOURNAMENT_ORGANIZER_ROLE = keccak256(\"TOURNAMENT_ORGANIZER_ROLE\");\r\n    bytes32 public constant MATCH_REFEREE_ROLE = keccak256(\"MATCH_REFEREE_ROLE\");\r\n    bytes32 public constant EMERGENCY_ROLE = keccak256(\"EMERGENCY_ROLE\");\r\n    \r\n    uint256 public constant MAX_TOURNAMENT_PLAYERS = 1024;\r\n    uint256 public constant MIN_TOURNAMENT_PLAYERS = 4;\r\n    uint256 public constant MAX_TOURNAMENT_DURATION = 7 days;\r\n    uint256 public constant MIN_TOURNAMENT_DURATION = 1 hours;\r\n    \r\n    // =============================================================================\r\n    // STRUCTS & ENUMS\r\n    // =============================================================================\r\n    \r\n    enum TournamentStatus {\r\n        CREATED,\r\n        REGISTRATION_OPEN,\r\n        REGISTRATION_CLOSED,\r\n        IN_PROGRESS,\r\n        FINISHED,\r\n        CANCELLED\r\n    }\r\n    \r\n    enum TournamentType {\r\n        SINGLE_ELIMINATION,\r\n        DOUBLE_ELIMINATION,\r\n        ROUND_ROBIN,\r\n        SWISS_SYSTEM,\r\n        BATTLE_ROYALE\r\n    }\r\n    \r\n    enum MatchStatus {\r\n        SCHEDULED,\r\n        IN_PROGRESS,\r\n        COMPLETED,\r\n        CANCELLED\r\n    }\r\n    \r\n    struct Tournament {\r\n        uint256 tournamentId;\r\n        string name;\r\n        string description;\r\n        TournamentType tournamentType;\r\n        TournamentStatus status;\r\n        uint256 entryFee;\r\n        uint256 prizePool;\r\n        uint256 maxPlayers;\r\n        uint256 currentPlayers;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        address organizer;\r\n        address[] players;\r\n        uint256[] matchIds;\r\n        mapping(address => PlayerStats) playerStats;\r\n        mapping(uint256 => Match) matches;\r\n    }\r\n    \r\n    struct PlayerStats {\r\n        uint256 wins;\r\n        uint256 losses;\r\n        uint256 draws;\r\n        uint256 totalScore;\r\n        uint256 rank;\r\n        bool isEliminated;\r\n        uint256 lastMatchTime;\r\n    }\r\n    \r\n    struct Match {\r\n        uint256 matchId;\r\n        uint256 tournamentId;\r\n        address player1;\r\n        address player2;\r\n        address winner;\r\n        MatchStatus status;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 player1Score;\r\n        uint256 player2Score;\r\n        string gameData;\r\n        bool isBye;\r\n    }\r\n    \r\n    struct PrizeDistribution {\r\n        uint256 firstPlace;\r\n        uint256 secondPlace;\r\n        uint256 thirdPlace;\r\n        uint256[] otherPrizes;\r\n    }\r\n    \r\n    // =============================================================================\r\n    // STATE VARIABLES\r\n    // =============================================================================\r\n    \r\n    address public gdiToken;\r\n    address public gamingCore;\r\n    address public aiOracle;\r\n    \r\n    uint256 public tournamentCounter;\r\n    uint256 public matchCounter;\r\n    uint256 public totalTournaments;\r\n    uint256 public totalMatches;\r\n    uint256 public totalPrizePool;\r\n    \r\n    mapping(uint256 => Tournament) public tournaments;\r\n    mapping(uint256 => Match) public matches;\r\n    mapping(address => uint256[]) public playerTournaments;\r\n    mapping(address => uint256[]) public playerMatches;\r\n    \r\n    uint256 public platformFee = 5; // 0.5%\r\n    uint256 public organizerFee = 10; // 1%\r\n    \r\n    // =============================================================================\r\n    // EVENTS\r\n    // =============================================================================\r\n    \r\n    event TournamentCreated(\r\n        uint256 indexed tournamentId,\r\n        string name,\r\n        TournamentType tournamentType,\r\n        uint256 entryFee,\r\n        uint256 maxPlayers,\r\n        address indexed organizer\r\n    );\r\n    \r\n    event PlayerRegistered(\r\n        uint256 indexed tournamentId,\r\n        address indexed player,\r\n        uint256 entryFee,\r\n        uint256 timestamp\r\n    );\r\n    \r\n    event TournamentStarted(\r\n        uint256 indexed tournamentId,\r\n        uint256 startTime,\r\n        uint256 totalPlayers\r\n    );\r\n    \r\n    event MatchCreated(\r\n        uint256 indexed matchId,\r\n        uint256 indexed tournamentId,\r\n        address player1,\r\n        address player2,\r\n        uint256 scheduledTime\r\n    );\r\n    \r\n    event MatchCompleted(\r\n        uint256 indexed matchId,\r\n        address indexed winner,\r\n        uint256 player1Score,\r\n        uint256 player2Score,\r\n        uint256 timestamp\r\n    );\r\n    \r\n    event TournamentFinished(\r\n        uint256 indexed tournamentId,\r\n        address indexed winner,\r\n        uint256 prizeAmount,\r\n        uint256 timestamp\r\n    );\r\n    \r\n    event PrizeDistributed(\r\n        uint256 indexed tournamentId,\r\n        address indexed player,\r\n        uint256 rank,\r\n        uint256 prizeAmount\r\n    );\r\n    \r\n    // =============================================================================\r\n    // CONSTRUCTOR\r\n    // =============================================================================\r\n    \r\n    constructor(\r\n        address _gdiToken,\r\n        address _gamingCore,\r\n        address _aiOracle\r\n    ) {\r\n        gdiToken = _gdiToken;\r\n        gamingCore = _gamingCore;\r\n        aiOracle = _aiOracle;\r\n        \r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _grantRole(TOURNAMENT_ORGANIZER_ROLE, msg.sender);\r\n        _grantRole(MATCH_REFEREE_ROLE, msg.sender);\r\n        _grantRole(EMERGENCY_ROLE, msg.sender);\r\n    }\r\n    \r\n    // =============================================================================\r\n    // TOURNAMENT MANAGEMENT\r\n    // =============================================================================\r\n    \r\n    /**\r\n     * @dev Create a new tournament\r\n     * @param name Tournament name\r\n     * @param description Tournament description\r\n     * @param tournamentType Type of tournament\r\n     * @param entryFee Entry fee in GDI tokens\r\n     * @param maxPlayers Maximum number of players\r\n     * @param startTime Tournament start time\r\n     * @param duration Tournament duration\r\n     */\r\n    function createTournament(\r\n        string memory name,\r\n        string memory description,\r\n        TournamentType tournamentType,\r\n        uint256 entryFee,\r\n        uint256 maxPlayers,\r\n        uint256 startTime,\r\n        uint256 duration\r\n    ) external onlyRole(TOURNAMENT_ORGANIZER_ROLE) whenNotPaused {\r\n        require(bytes(name).length > 0, \"Tournament name required\");\r\n        require(maxPlayers >= MIN_TOURNAMENT_PLAYERS, \"Too few players\");\r\n        require(maxPlayers <= MAX_TOURNAMENT_PLAYERS, \"Too many players\");\r\n        require(startTime > block.timestamp, \"Start time must be in future\");\r\n        require(duration >= MIN_TOURNAMENT_DURATION, \"Duration too short\");\r\n        require(duration <= MAX_TOURNAMENT_DURATION, \"Duration too long\");\r\n        \r\n        tournamentCounter++;\r\n        uint256 tournamentId = tournamentCounter;\r\n        \r\n        Tournament storage tournament = tournaments[tournamentId];\r\n        tournament.tournamentId = tournamentId;\r\n        tournament.name = name;\r\n        tournament.description = description;\r\n        tournament.tournamentType = tournamentType;\r\n        tournament.status = TournamentStatus.CREATED;\r\n        tournament.entryFee = entryFee;\r\n        tournament.prizePool = 0;\r\n        tournament.maxPlayers = maxPlayers;\r\n        tournament.currentPlayers = 0;\r\n        tournament.startTime = startTime;\r\n        tournament.endTime = startTime + duration;\r\n        tournament.organizer = msg.sender;\r\n        \r\n        totalTournaments++;\r\n        \r\n        emit TournamentCreated(\r\n            tournamentId,\r\n            name,\r\n            tournamentType,\r\n            entryFee,\r\n            maxPlayers,\r\n            msg.sender\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @dev Register for a tournament\r\n     * @param tournamentId Tournament ID\r\n     */\r\n    function registerForTournament(uint256 tournamentId) external whenNotPaused nonReentrant {\r\n        Tournament storage tournament = tournaments[tournamentId];\r\n        require(tournament.tournamentId != 0, \"Tournament does not exist\");\r\n        require(tournament.status == TournamentStatus.CREATED, \"Registration not open\");\r\n        require(tournament.currentPlayers < tournament.maxPlayers, \"Tournament full\");\r\n        require(tournament.players.length == 0 || !isPlayerRegistered(tournamentId, msg.sender), \"Already registered\");\r\n        \r\n        // Transfer entry fee\r\n        IERC20(gdiToken).transferFrom(msg.sender, address(this), tournament.entryFee);\r\n        tournament.prizePool += tournament.entryFee;\r\n        totalPrizePool += tournament.entryFee;\r\n        \r\n        // Add player to tournament\r\n        tournament.players.push(msg.sender);\r\n        tournament.currentPlayers++;\r\n        playerTournaments[msg.sender].push(tournamentId);\r\n        \r\n        // Initialize player stats\r\n        tournament.playerStats[msg.sender] = PlayerStats({\r\n            wins: 0,\r\n            losses: 0,\r\n            draws: 0,\r\n            totalScore: 0,\r\n            rank: 0,\r\n            isEliminated: false,\r\n            lastMatchTime: 0\r\n        });\r\n        \r\n        emit PlayerRegistered(tournamentId, msg.sender, tournament.entryFee, block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * @dev Start a tournament\r\n     * @param tournamentId Tournament ID\r\n     */\r\n    function startTournament(uint256 tournamentId) external onlyRole(TOURNAMENT_ORGANIZER_ROLE) whenNotPaused {\r\n        Tournament storage tournament = tournaments[tournamentId];\r\n        require(tournament.tournamentId != 0, \"Tournament does not exist\");\r\n        require(tournament.status == TournamentStatus.CREATED, \"Tournament already started\");\r\n        require(tournament.currentPlayers >= MIN_TOURNAMENT_PLAYERS, \"Not enough players\");\r\n        require(block.timestamp >= tournament.startTime, \"Tournament not ready to start\");\r\n        \r\n        tournament.status = TournamentStatus.IN_PROGRESS;\r\n        \r\n        // Generate initial matches based on tournament type\r\n        generateInitialMatches(tournamentId);\r\n        \r\n        emit TournamentStarted(tournamentId, block.timestamp, tournament.currentPlayers);\r\n    }\r\n    \r\n    // =============================================================================\r\n    // MATCH MANAGEMENT\r\n    // =============================================================================\r\n    \r\n    /**\r\n     * @dev Create a match between two players\r\n     * @param tournamentId Tournament ID\r\n     * @param player1 First player address\r\n     * @param player2 Second player address\r\n     * @param scheduledTime Scheduled match time\r\n     */\r\n    function createMatch(\r\n        uint256 tournamentId,\r\n        address player1,\r\n        address player2,\r\n        uint256 scheduledTime\r\n    ) internal {\r\n        Tournament storage tournament = tournaments[tournamentId];\r\n        require(tournament.tournamentId != 0, \"Tournament does not exist\");\r\n        require(tournament.status == TournamentStatus.IN_PROGRESS, \"Tournament not in progress\");\r\n        require(isPlayerRegistered(tournamentId, player1), \"Player 1 not registered\");\r\n        require(isPlayerRegistered(tournamentId, player2), \"Player 2 not registered\");\r\n        require(player1 != player2, \"Players must be different\");\r\n        \r\n        matchCounter++;\r\n        uint256 matchId = matchCounter;\r\n        \r\n        Match storage matchData = matches[matchId];\r\n        matchData.matchId = matchId;\r\n        matchData.tournamentId = tournamentId;\r\n        matchData.player1 = player1;\r\n        matchData.player2 = player2;\r\n        matchData.status = MatchStatus.SCHEDULED;\r\n        matchData.startTime = scheduledTime;\r\n        matchData.isBye = false;\r\n        \r\n        tournament.matchIds.push(matchId);\r\n        playerMatches[player1].push(matchId);\r\n        playerMatches[player2].push(matchId);\r\n        totalMatches++;\r\n        \r\n        emit MatchCreated(matchId, tournamentId, player1, player2, scheduledTime);\r\n    }\r\n    \r\n    /**\r\n     * @dev Create a match between two players (public interface)\r\n     * @param tournamentId Tournament ID\r\n     * @param player1 First player address\r\n     * @param player2 Second player address\r\n     * @param scheduledTime Scheduled match time\r\n     */\r\n    function createMatchPublic(\r\n        uint256 tournamentId,\r\n        address player1,\r\n        address player2,\r\n        uint256 scheduledTime\r\n    ) external onlyRole(MATCH_REFEREE_ROLE) whenNotPaused {\r\n        createMatch(tournamentId, player1, player2, scheduledTime);\r\n    }\r\n    \r\n    /**\r\n     * @dev Complete a match with results\r\n     * @param matchId Match ID\r\n     * @param winner Winner address\r\n     * @param player1Score Player 1 score\r\n     * @param player2Score Player 2 score\r\n     * @param gameData Additional game data\r\n     */\r\n    function completeMatch(\r\n        uint256 matchId,\r\n        address winner,\r\n        uint256 player1Score,\r\n        uint256 player2Score,\r\n        string memory gameData\r\n    ) external onlyRole(MATCH_REFEREE_ROLE) whenNotPaused {\r\n        Match storage matchData = matches[matchId];\r\n        require(matchData.matchId != 0, \"Match does not exist\");\r\n        require(matchData.status == MatchStatus.SCHEDULED || matchData.status == MatchStatus.IN_PROGRESS, \"Match not active\");\r\n        require(winner == matchData.player1 || winner == matchData.player2 || winner == address(0), \"Invalid winner\");\r\n        \r\n        matchData.status = MatchStatus.COMPLETED;\r\n        matchData.winner = winner;\r\n        matchData.player1Score = player1Score;\r\n        matchData.player2Score = player2Score;\r\n        matchData.gameData = gameData;\r\n        matchData.endTime = block.timestamp;\r\n        \r\n        // Update player stats\r\n        Tournament storage tournament = tournaments[matchData.tournamentId];\r\n        if (winner == matchData.player1) {\r\n            tournament.playerStats[matchData.player1].wins++;\r\n            tournament.playerStats[matchData.player2].losses++;\r\n        } else if (winner == matchData.player2) {\r\n            tournament.playerStats[matchData.player2].wins++;\r\n            tournament.playerStats[matchData.player1].losses++;\r\n        } else {\r\n            // Draw\r\n            tournament.playerStats[matchData.player1].draws++;\r\n            tournament.playerStats[matchData.player2].draws++;\r\n        }\r\n        \r\n        tournament.playerStats[matchData.player1].totalScore += player1Score;\r\n        tournament.playerStats[matchData.player2].totalScore += player2Score;\r\n        tournament.playerStats[matchData.player1].lastMatchTime = block.timestamp;\r\n        tournament.playerStats[matchData.player2].lastMatchTime = block.timestamp;\r\n        \r\n        emit MatchCompleted(matchId, winner, player1Score, player2Score, block.timestamp);\r\n    }\r\n    \r\n    // =============================================================================\r\n    // TOURNAMENT COMPLETION\r\n    // =============================================================================\r\n    \r\n    /**\r\n     * @dev Finish a tournament and distribute prizes\r\n     * @param tournamentId Tournament ID\r\n     * @param winners Array of winner addresses in order\r\n     */\r\n    function finishTournament(\r\n        uint256 tournamentId,\r\n        address[] memory winners\r\n    ) external onlyRole(TOURNAMENT_ORGANIZER_ROLE) whenNotPaused {\r\n        Tournament storage tournament = tournaments[tournamentId];\r\n        require(tournament.tournamentId != 0, \"Tournament does not exist\");\r\n        require(tournament.status == TournamentStatus.IN_PROGRESS, \"Tournament not in progress\");\r\n        require(winners.length > 0, \"No winners specified\");\r\n        \r\n        tournament.status = TournamentStatus.FINISHED;\r\n        \r\n        // Calculate prize distribution\r\n        uint256 totalPrize = tournament.prizePool;\r\n        uint256 platformFeeAmount = (totalPrize * platformFee) / 1000;\r\n        uint256 organizerFeeAmount = (totalPrize * organizerFee) / 1000;\r\n        uint256 remainingPrize = totalPrize - platformFeeAmount - organizerFeeAmount;\r\n        \r\n        // Distribute prizes\r\n        for (uint256 i = 0; i < winners.length; i++) {\r\n            require(isPlayerRegistered(tournamentId, winners[i]), \"Winner not registered\");\r\n            \r\n            uint256 prizeAmount;\r\n            if (i == 0) {\r\n                prizeAmount = (remainingPrize * 50) / 100; // 50% for 1st place\r\n            } else if (i == 1) {\r\n                prizeAmount = (remainingPrize * 30) / 100; // 30% for 2nd place\r\n            } else if (i == 2) {\r\n                prizeAmount = (remainingPrize * 20) / 100; // 20% for 3rd place\r\n            } else {\r\n                prizeAmount = 0; // No prize for other positions\r\n            }\r\n            \r\n            if (prizeAmount > 0) {\r\n                IERC20(gdiToken).transfer(winners[i], prizeAmount);\r\n                emit PrizeDistributed(tournamentId, winners[i], i + 1, prizeAmount);\r\n            }\r\n        }\r\n        \r\n        // Transfer fees\r\n        if (platformFeeAmount > 0) {\r\n            IERC20(gdiToken).transfer(address(this), platformFeeAmount);\r\n        }\r\n        if (organizerFeeAmount > 0) {\r\n            IERC20(gdiToken).transfer(tournament.organizer, organizerFeeAmount);\r\n        }\r\n        \r\n        emit TournamentFinished(tournamentId, winners[0], remainingPrize, block.timestamp);\r\n    }\r\n    \r\n    // =============================================================================\r\n    // HELPER FUNCTIONS\r\n    // =============================================================================\r\n    \r\n    /**\r\n     * @dev Check if a player is registered for a tournament\r\n     * @param tournamentId Tournament ID\r\n     * @param player Player address\r\n     * @return True if registered\r\n     */\r\n    function isPlayerRegistered(uint256 tournamentId, address player) public view returns (bool) {\r\n        Tournament storage tournament = tournaments[tournamentId];\r\n        for (uint256 i = 0; i < tournament.players.length; i++) {\r\n            if (tournament.players[i] == player) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * @dev Generate initial matches for a tournament\r\n     * @param tournamentId Tournament ID\r\n     */\r\n    function generateInitialMatches(uint256 tournamentId) internal {\r\n        Tournament storage tournament = tournaments[tournamentId];\r\n        \r\n        if (tournament.tournamentType == TournamentType.SINGLE_ELIMINATION) {\r\n            generateSingleEliminationMatches(tournamentId);\r\n        } else if (tournament.tournamentType == TournamentType.BATTLE_ROYALE) {\r\n            generateBattleRoyaleMatch(tournamentId);\r\n        }\r\n        // Add other tournament type implementations\r\n    }\r\n    \r\n    /**\r\n     * @dev Generate single elimination matches\r\n     * @param tournamentId Tournament ID\r\n     */\r\n    function generateSingleEliminationMatches(uint256 tournamentId) internal {\r\n        Tournament storage tournament = tournaments[tournamentId];\r\n        uint256 playerCount = tournament.players.length;\r\n        \r\n        // Create first round matches\r\n        for (uint256 i = 0; i < playerCount; i += 2) {\r\n            if (i + 1 < playerCount) {\r\n                createMatch(\r\n                    tournamentId,\r\n                    tournament.players[i],\r\n                    tournament.players[i + 1],\r\n                    tournament.startTime\r\n                );\r\n            } else {\r\n                // Bye for odd player\r\n                matchCounter++;\r\n                uint256 matchId = matchCounter;\r\n                \r\n                Match storage matchData = matches[matchId];\r\n                matchData.matchId = matchId;\r\n                matchData.tournamentId = tournamentId;\r\n                matchData.player1 = tournament.players[i];\r\n                matchData.player2 = address(0);\r\n                matchData.status = MatchStatus.COMPLETED;\r\n                matchData.winner = tournament.players[i];\r\n                matchData.isBye = true;\r\n                \r\n                tournament.matchIds.push(matchId);\r\n                playerMatches[tournament.players[i]].push(matchId);\r\n                totalMatches++;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Generate battle royale match\r\n     * @param tournamentId Tournament ID\r\n     */\r\n    function generateBattleRoyaleMatch(uint256 tournamentId) internal {\r\n        Tournament storage tournament = tournaments[tournamentId];\r\n        \r\n        // Create one big match with all players\r\n        matchCounter++;\r\n        uint256 matchId = matchCounter;\r\n        \r\n        Match storage matchData = matches[matchId];\r\n        matchData.matchId = matchId;\r\n        matchData.tournamentId = tournamentId;\r\n        matchData.player1 = tournament.players[0];\r\n        matchData.player2 = tournament.players[1];\r\n        matchData.status = MatchStatus.SCHEDULED;\r\n        matchData.startTime = tournament.startTime;\r\n        matchData.isBye = false;\r\n        \r\n        tournament.matchIds.push(matchId);\r\n        for (uint256 i = 0; i < tournament.players.length; i++) {\r\n            playerMatches[tournament.players[i]].push(matchId);\r\n        }\r\n        totalMatches++;\r\n    }\r\n    \r\n    // =============================================================================\r\n    // VIEW FUNCTIONS\r\n    // =============================================================================\r\n    \r\n    /**\r\n     * @dev Get tournament information\r\n     * @param tournamentId Tournament ID\r\n     */\r\n    function getTournament(uint256 tournamentId) external view returns (\r\n        uint256 id,\r\n        string memory name,\r\n        string memory description,\r\n        TournamentType tournamentType,\r\n        TournamentStatus status,\r\n        uint256 entryFee,\r\n        uint256 prizePool,\r\n        uint256 maxPlayers,\r\n        uint256 currentPlayers,\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        address organizer\r\n    ) {\r\n        Tournament storage tournament = tournaments[tournamentId];\r\n        return (\r\n            tournament.tournamentId,\r\n            tournament.name,\r\n            tournament.description,\r\n            tournament.tournamentType,\r\n            tournament.status,\r\n            tournament.entryFee,\r\n            tournament.prizePool,\r\n            tournament.maxPlayers,\r\n            tournament.currentPlayers,\r\n            tournament.startTime,\r\n            tournament.endTime,\r\n            tournament.organizer\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @dev Get tournament players\r\n     * @param tournamentId Tournament ID\r\n     * @return players Array of player addresses\r\n     */\r\n    function getTournamentPlayers(uint256 tournamentId) external view returns (address[] memory) {\r\n        return tournaments[tournamentId].players;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get player stats for a tournament\r\n     * @param tournamentId Tournament ID\r\n     * @param player Player address\r\n     */\r\n    function getPlayerStats(uint256 tournamentId, address player) external view returns (\r\n        uint256 wins,\r\n        uint256 losses,\r\n        uint256 draws,\r\n        uint256 totalScore,\r\n        uint256 rank,\r\n        bool isEliminated,\r\n        uint256 lastMatchTime\r\n    ) {\r\n        PlayerStats storage stats = tournaments[tournamentId].playerStats[player];\r\n        return (\r\n            stats.wins,\r\n            stats.losses,\r\n            stats.draws,\r\n            stats.totalScore,\r\n            stats.rank,\r\n            stats.isEliminated,\r\n            stats.lastMatchTime\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @dev Get match information\r\n     * @param matchId Match ID\r\n     */\r\n    function getMatch(uint256 matchId) external view returns (\r\n        uint256 id,\r\n        uint256 tournamentId,\r\n        address player1,\r\n        address player2,\r\n        address winner,\r\n        MatchStatus status,\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        uint256 player1Score,\r\n        uint256 player2Score,\r\n        string memory gameData,\r\n        bool isBye\r\n    ) {\r\n        Match storage matchData = matches[matchId];\r\n        return (\r\n            matchData.matchId,\r\n            matchData.tournamentId,\r\n            matchData.player1,\r\n            matchData.player2,\r\n            matchData.winner,\r\n            matchData.status,\r\n            matchData.startTime,\r\n            matchData.endTime,\r\n            matchData.player1Score,\r\n            matchData.player2Score,\r\n            matchData.gameData,\r\n            matchData.isBye\r\n        );\r\n    }\r\n    \r\n    // =============================================================================\r\n    // ADMIN FUNCTIONS\r\n    // =============================================================================\r\n    \r\n    /**\r\n     * @dev Update platform fee\r\n     * @param newFee New fee percentage (basis points)\r\n     */\r\n    function updatePlatformFee(uint256 newFee) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(newFee <= 50, \"Fee too high\"); // Max 5%\r\n        platformFee = newFee;\r\n    }\r\n    \r\n    /**\r\n     * @dev Update organizer fee\r\n     * @param newFee New fee percentage (basis points)\r\n     */\r\n    function updateOrganizerFee(uint256 newFee) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(newFee <= 100, \"Fee too high\"); // Max 10%\r\n        organizerFee = newFee;\r\n    }\r\n    \r\n    /**\r\n     * @dev Pause tournament system\r\n     */\r\n    function pause() external onlyRole(EMERGENCY_ROLE) {\r\n        _pause();\r\n    }\r\n    \r\n    /**\r\n     * @dev Unpause tournament system\r\n     */\r\n    function unpause() external onlyRole(EMERGENCY_ROLE) {\r\n        _unpause();\r\n    }\r\n    \r\n    /**\r\n     * @dev Emergency withdraw tokens\r\n     * @param amount Amount to withdraw\r\n     */\r\n    function emergencyWithdraw(uint256 amount) external onlyRole(EMERGENCY_ROLE) {\r\n        IERC20(gdiToken).transfer(msg.sender, amount);\r\n    }\r\n} "}},"settings":{"optimizer":{"enabled":true,"runs":1000000},"viaIR":true,"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[295],"Context":[486],"ERC165":[687],"IAccessControl":[378]},"id":296,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:0"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"./IAccessControl.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":296,"sourceUnit":379,"src":"134:52:0","symbolAliases":[{"foreign":{"id":2,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"142:14:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":296,"sourceUnit":487,"src":"187:45:0","symbolAliases":[{"foreign":{"id":4,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":486,"src":"195:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../utils/introspection/ERC165.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":296,"sourceUnit":688,"src":"233:57:0","symbolAliases":[{"foreign":{"id":6,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"241:6:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"Context","nameLocations":["1988:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":486,"src":"1988:7:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"1988:7:0"},{"baseName":{"id":11,"name":"IAccessControl","nameLocations":["1997:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"1997:14:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"1997:14:0"},{"baseName":{"id":13,"name":"ERC165","nameLocations":["2013:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":687,"src":"2013:6:0"},"id":14,"nodeType":"InheritanceSpecifier","src":"2013:6:0"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"292:1660:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."},"fullyImplemented":true,"id":295,"linearizedBaseContracts":[295,687,699,378,486],"name":"AccessControl","nameLocation":"1971:13:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AccessControl.RoleData","id":21,"members":[{"constant":false,"id":18,"mutability":"mutable","name":"hasRole","nameLocation":"2085:7:0","nodeType":"VariableDeclaration","scope":21,"src":"2052:40:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":17,"keyName":"account","keyNameLocation":"2068:7:0","keyType":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"2060:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2052:32:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":16,"name":"bool","nodeType":"ElementaryTypeName","src":"2079:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":20,"mutability":"mutable","name":"adminRole","nameLocation":"2110:9:0","nodeType":"VariableDeclaration","scope":21,"src":"2102:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":19,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2102:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2033:8:0","nodeType":"StructDefinition","scope":295,"src":"2026:100:0","visibility":"public"},{"constant":false,"id":26,"mutability":"mutable","name":"_roles","nameLocation":"2174:6:0","nodeType":"VariableDeclaration","scope":295,"src":"2132:48:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"typeName":{"id":25,"keyName":"role","keyNameLocation":"2148:4:0","keyType":{"id":22,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2140:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2132:33:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":24,"nodeType":"UserDefinedTypeName","pathNode":{"id":23,"name":"RoleData","nameLocations":["2156:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":21,"src":"2156:8:0"},"referencedDeclaration":21,"src":"2156:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage_ptr","typeString":"struct AccessControl.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":29,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2211:18:0","nodeType":"VariableDeclaration","scope":295,"src":"2187:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":27,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":28,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2232:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":39,"nodeType":"Block","src":"2454:44:0","statements":[{"expression":{"arguments":[{"id":35,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"2475:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":34,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[93,114],"referencedDeclaration":93,"src":"2464:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":36,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2464:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":37,"nodeType":"ExpressionStatement","src":"2464:16:0"},{"id":38,"nodeType":"PlaceholderStatement","src":"2490:1:0"}]},"documentation":{"id":30,"nodeType":"StructuredDocumentation","src":"2243:174:0","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with an {AccessControlUnauthorizedAccount} error including the required role."},"id":40,"name":"onlyRole","nameLocation":"2431:8:0","nodeType":"ModifierDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"role","nameLocation":"2448:4:0","nodeType":"VariableDeclaration","scope":40,"src":"2440:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":31,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2440:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2439:14:0"},"src":"2422:76:0","virtual":false,"visibility":"internal"},{"baseFunctions":[686],"body":{"id":61,"nodeType":"Block","src":"2656:111:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":59,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"2673:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":51,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"2693:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$378_$","typeString":"type(contract IAccessControl)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$378_$","typeString":"type(contract IAccessControl)"}],"id":50,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2688:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":52,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2688:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControl_$378","typeString":"type(contract IAccessControl)"}},"id":53,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2709:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"2688:32:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2673:47:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":57,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"2748:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":55,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2724:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControl_$295_$","typeString":"type(contract super AccessControl)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2730:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":686,"src":"2724:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":58,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2724:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2673:87:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":48,"id":60,"nodeType":"Return","src":"2666:94:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"2504:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":62,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2574:17:0","nodeType":"FunctionDefinition","overrides":{"id":45,"nodeType":"OverrideSpecifier","overrides":[],"src":"2632:8:0"},"parameters":{"id":44,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"mutability":"mutable","name":"interfaceId","nameLocation":"2599:11:0","nodeType":"VariableDeclaration","scope":62,"src":"2592:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":42,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2592:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2591:20:0"},"returnParameters":{"id":48,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":62,"src":"2650:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":46,"name":"bool","nodeType":"ElementaryTypeName","src":"2650:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2649:6:0"},"scope":295,"src":"2565:202:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[345],"body":{"id":79,"nodeType":"Block","src":"2937:53:0","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":72,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"2954:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":74,"indexExpression":{"id":73,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"2961:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2954:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":75,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2967:7:0","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"2954:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":77,"indexExpression":{"id":76,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"2975:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2954:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":71,"id":78,"nodeType":"Return","src":"2947:36:0"}]},"documentation":{"id":63,"nodeType":"StructuredDocumentation","src":"2773:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":80,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2863:7:0","nodeType":"FunctionDefinition","parameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"role","nameLocation":"2879:4:0","nodeType":"VariableDeclaration","scope":80,"src":"2871:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":64,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2871:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"account","nameLocation":"2893:7:0","nodeType":"VariableDeclaration","scope":80,"src":"2885:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":66,"name":"address","nodeType":"ElementaryTypeName","src":"2885:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2870:31:0"},"returnParameters":{"id":71,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":80,"src":"2931:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":69,"name":"bool","nodeType":"ElementaryTypeName","src":"2931:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2930:6:0"},"scope":295,"src":"2854:136:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":92,"nodeType":"Block","src":"3255:47:0","statements":[{"expression":{"arguments":[{"id":87,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"3276:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":88,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"3282:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":89,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3282:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[93,114],"referencedDeclaration":114,"src":"3265:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3265:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":91,"nodeType":"ExpressionStatement","src":"3265:30:0"}]},"documentation":{"id":81,"nodeType":"StructuredDocumentation","src":"2996:198:0","text":" @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier."},"id":93,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3208:10:0","nodeType":"FunctionDefinition","parameters":{"id":84,"nodeType":"ParameterList","parameters":[{"constant":false,"id":83,"mutability":"mutable","name":"role","nameLocation":"3227:4:0","nodeType":"VariableDeclaration","scope":93,"src":"3219:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":82,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3219:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3218:14:0"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[],"src":"3255:0:0"},"scope":295,"src":"3199:103:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":113,"nodeType":"Block","src":"3505:124:0","statements":[{"condition":{"id":105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3519:23:0","subExpression":{"arguments":[{"id":102,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"3528:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":103,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"3534:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":101,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"3520:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3520:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":112,"nodeType":"IfStatement","src":"3515:108:0","trueBody":{"id":111,"nodeType":"Block","src":"3544:79:0","statements":[{"errorCall":{"arguments":[{"id":107,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"3598:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":108,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"3607:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":106,"name":"AccessControlUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"3565:32:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,bytes32) pure"}},"id":109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3565:47:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":110,"nodeType":"RevertStatement","src":"3558:54:0"}]}}]},"documentation":{"id":94,"nodeType":"StructuredDocumentation","src":"3308:119:0","text":" @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n is missing `role`."},"id":114,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3441:10:0","nodeType":"FunctionDefinition","parameters":{"id":99,"nodeType":"ParameterList","parameters":[{"constant":false,"id":96,"mutability":"mutable","name":"role","nameLocation":"3460:4:0","nodeType":"VariableDeclaration","scope":114,"src":"3452:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":95,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3452:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":98,"mutability":"mutable","name":"account","nameLocation":"3474:7:0","nodeType":"VariableDeclaration","scope":114,"src":"3466:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"3466:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3451:31:0"},"returnParameters":{"id":100,"nodeType":"ParameterList","parameters":[],"src":"3505:0:0"},"scope":295,"src":"3432:197:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[353],"body":{"id":127,"nodeType":"Block","src":"3884:46:0","statements":[{"expression":{"expression":{"baseExpression":{"id":122,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"3901:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":124,"indexExpression":{"id":123,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"3908:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3901:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":125,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3914:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":20,"src":"3901:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":121,"id":126,"nodeType":"Return","src":"3894:29:0"}]},"documentation":{"id":115,"nodeType":"StructuredDocumentation","src":"3635:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":128,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"3819:12:0","nodeType":"FunctionDefinition","parameters":{"id":118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":117,"mutability":"mutable","name":"role","nameLocation":"3840:4:0","nodeType":"VariableDeclaration","scope":128,"src":"3832:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":116,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3832:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3831:14:0"},"returnParameters":{"id":121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":120,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":128,"src":"3875:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":119,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3875:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3874:9:0"},"scope":295,"src":"3810:120:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[361],"body":{"id":146,"nodeType":"Block","src":"4320:42:0","statements":[{"expression":{"arguments":[{"id":142,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"4341:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":143,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"4347:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":141,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"4330:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4330:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":145,"nodeType":"ExpressionStatement","src":"4330:25:0"}]},"documentation":{"id":129,"nodeType":"StructuredDocumentation","src":"3936:285:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":147,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":137,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"4313:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":136,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"4300:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4300:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":139,"kind":"modifierInvocation","modifierName":{"id":135,"name":"onlyRole","nameLocations":["4291:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"4291:8:0"},"nodeType":"ModifierInvocation","src":"4291:28:0"}],"name":"grantRole","nameLocation":"4235:9:0","nodeType":"FunctionDefinition","parameters":{"id":134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":131,"mutability":"mutable","name":"role","nameLocation":"4253:4:0","nodeType":"VariableDeclaration","scope":147,"src":"4245:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":130,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4245:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":133,"mutability":"mutable","name":"account","nameLocation":"4267:7:0","nodeType":"VariableDeclaration","scope":147,"src":"4259:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"4259:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4244:31:0"},"returnParameters":{"id":140,"nodeType":"ParameterList","parameters":[],"src":"4320:0:0"},"scope":295,"src":"4226:136:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[369],"body":{"id":165,"nodeType":"Block","src":"4737:43:0","statements":[{"expression":{"arguments":[{"id":161,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"4759:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":162,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"4765:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":160,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"4747:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4747:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":164,"nodeType":"ExpressionStatement","src":"4747:26:0"}]},"documentation":{"id":148,"nodeType":"StructuredDocumentation","src":"4368:269:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":166,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":156,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"4730:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":155,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"4717:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4717:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":158,"kind":"modifierInvocation","modifierName":{"id":154,"name":"onlyRole","nameLocations":["4708:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"4708:8:0"},"nodeType":"ModifierInvocation","src":"4708:28:0"}],"name":"revokeRole","nameLocation":"4651:10:0","nodeType":"FunctionDefinition","parameters":{"id":153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":150,"mutability":"mutable","name":"role","nameLocation":"4670:4:0","nodeType":"VariableDeclaration","scope":166,"src":"4662:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":149,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4662:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":152,"mutability":"mutable","name":"account","nameLocation":"4684:7:0","nodeType":"VariableDeclaration","scope":166,"src":"4676:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":151,"name":"address","nodeType":"ElementaryTypeName","src":"4676:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4661:31:0"},"returnParameters":{"id":159,"nodeType":"ParameterList","parameters":[],"src":"4737:0:0"},"scope":295,"src":"4642:138:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[377],"body":{"id":188,"nodeType":"Block","src":"5407:166:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":174,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"5421:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":175,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"5443:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5443:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5421:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":182,"nodeType":"IfStatement","src":"5417:102:0","trueBody":{"id":181,"nodeType":"Block","src":"5457:62:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":178,"name":"AccessControlBadConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"5478:28:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5478:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":180,"nodeType":"RevertStatement","src":"5471:37:0"}]}},{"expression":{"arguments":[{"id":184,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"5541:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":185,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"5547:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":183,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"5529:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5529:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":187,"nodeType":"ExpressionStatement","src":"5529:37:0"}]},"documentation":{"id":167,"nodeType":"StructuredDocumentation","src":"4786:537:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":189,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"5337:12:0","nodeType":"FunctionDefinition","parameters":{"id":172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":169,"mutability":"mutable","name":"role","nameLocation":"5358:4:0","nodeType":"VariableDeclaration","scope":189,"src":"5350:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":168,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5350:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":171,"mutability":"mutable","name":"callerConfirmation","nameLocation":"5372:18:0","nodeType":"VariableDeclaration","scope":189,"src":"5364:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":170,"name":"address","nodeType":"ElementaryTypeName","src":"5364:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5349:42:0"},"returnParameters":{"id":173,"nodeType":"ParameterList","parameters":[],"src":"5407:0:0"},"scope":295,"src":"5328:245:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":216,"nodeType":"Block","src":"5771:174:0","statements":[{"assignments":[198],"declarations":[{"constant":false,"id":198,"mutability":"mutable","name":"previousAdminRole","nameLocation":"5789:17:0","nodeType":"VariableDeclaration","scope":216,"src":"5781:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":197,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5781:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":202,"initialValue":{"arguments":[{"id":200,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"5822:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":199,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"5809:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5809:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5781:46:0"},{"expression":{"id":208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":203,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"5837:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":205,"indexExpression":{"id":204,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"5844:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5837:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":206,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5850:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":20,"src":"5837:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":207,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"5862:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5837:34:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":209,"nodeType":"ExpressionStatement","src":"5837:34:0"},{"eventCall":{"arguments":[{"id":211,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"5903:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":212,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"5909:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":213,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"5928:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":210,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"5886:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5886:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":215,"nodeType":"EmitStatement","src":"5881:57:0"}]},"documentation":{"id":190,"nodeType":"StructuredDocumentation","src":"5579:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":217,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"5707:13:0","nodeType":"FunctionDefinition","parameters":{"id":195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"role","nameLocation":"5729:4:0","nodeType":"VariableDeclaration","scope":217,"src":"5721:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":191,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5721:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":194,"mutability":"mutable","name":"adminRole","nameLocation":"5743:9:0","nodeType":"VariableDeclaration","scope":217,"src":"5735:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":193,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5735:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5720:33:0"},"returnParameters":{"id":196,"nodeType":"ParameterList","parameters":[],"src":"5771:0:0"},"scope":295,"src":"5698:247:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":255,"nodeType":"Block","src":"6262:233:0","statements":[{"condition":{"id":231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6276:23:0","subExpression":{"arguments":[{"id":228,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"6285:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":229,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"6291:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":227,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"6277:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6277:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":253,"nodeType":"Block","src":"6452:37:0","statements":[{"expression":{"hexValue":"66616c7365","id":251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6473:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":226,"id":252,"nodeType":"Return","src":"6466:12:0"}]},"id":254,"nodeType":"IfStatement","src":"6272:217:0","trueBody":{"id":250,"nodeType":"Block","src":"6301:145:0","statements":[{"expression":{"id":239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":232,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"6315:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":234,"indexExpression":{"id":233,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"6322:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6315:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":235,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6328:7:0","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"6315:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":237,"indexExpression":{"id":236,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"6336:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6315:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6347:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6315:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":240,"nodeType":"ExpressionStatement","src":"6315:36:0"},{"eventCall":{"arguments":[{"id":242,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"6382:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":243,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"6388:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":244,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"6397:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6397:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":241,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"6370:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6370:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":247,"nodeType":"EmitStatement","src":"6365:45:0"},{"expression":{"hexValue":"74727565","id":248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6431:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":226,"id":249,"nodeType":"Return","src":"6424:11:0"}]}}]},"documentation":{"id":218,"nodeType":"StructuredDocumentation","src":"5951:223:0","text":" @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":256,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"6188:10:0","nodeType":"FunctionDefinition","parameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":220,"mutability":"mutable","name":"role","nameLocation":"6207:4:0","nodeType":"VariableDeclaration","scope":256,"src":"6199:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":219,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6199:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":222,"mutability":"mutable","name":"account","nameLocation":"6221:7:0","nodeType":"VariableDeclaration","scope":256,"src":"6213:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":221,"name":"address","nodeType":"ElementaryTypeName","src":"6213:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6198:31:0"},"returnParameters":{"id":226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":256,"src":"6256:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":224,"name":"bool","nodeType":"ElementaryTypeName","src":"6256:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6255:6:0"},"scope":295,"src":"6179:316:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":293,"nodeType":"Block","src":"6816:233:0","statements":[{"condition":{"arguments":[{"id":267,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"6838:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":268,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"6844:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":266,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"6830:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6830:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":291,"nodeType":"Block","src":"7006:37:0","statements":[{"expression":{"hexValue":"66616c7365","id":289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7027:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":265,"id":290,"nodeType":"Return","src":"7020:12:0"}]},"id":292,"nodeType":"IfStatement","src":"6826:217:0","trueBody":{"id":288,"nodeType":"Block","src":"6854:146:0","statements":[{"expression":{"id":277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":270,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"6868:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":272,"indexExpression":{"id":271,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"6875:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6868:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":273,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6881:7:0","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"6868:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":275,"indexExpression":{"id":274,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"6889:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6868:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6900:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"6868:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":278,"nodeType":"ExpressionStatement","src":"6868:37:0"},{"eventCall":{"arguments":[{"id":280,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"6936:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":281,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"6942:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":282,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"6951:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6951:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":279,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"6924:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6924:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":285,"nodeType":"EmitStatement","src":"6919:45:0"},{"expression":{"hexValue":"74727565","id":286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6985:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":265,"id":287,"nodeType":"Return","src":"6978:11:0"}]}}]},"documentation":{"id":257,"nodeType":"StructuredDocumentation","src":"6501:226:0","text":" @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":294,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"6741:11:0","nodeType":"FunctionDefinition","parameters":{"id":262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":259,"mutability":"mutable","name":"role","nameLocation":"6761:4:0","nodeType":"VariableDeclaration","scope":294,"src":"6753:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":258,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6753:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":261,"mutability":"mutable","name":"account","nameLocation":"6775:7:0","nodeType":"VariableDeclaration","scope":294,"src":"6767:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":260,"name":"address","nodeType":"ElementaryTypeName","src":"6767:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6752:31:0"},"returnParameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":264,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":294,"src":"6810:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":263,"name":"bool","nodeType":"ElementaryTypeName","src":"6810:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6809:6:0"},"scope":295,"src":"6732:317:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":296,"src":"1953:5098:0","usedErrors":[305,308],"usedEvents":[317,326,335]}],"src":"108:6944:0"},"id":0},"@openzeppelin/contracts/access/IAccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","exportedSymbols":{"IAccessControl":[378]},"id":379,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":297,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":298,"nodeType":"StructuredDocumentation","src":"135:90:1","text":" @dev External interface of AccessControl declared to support ERC-165 detection."},"fullyImplemented":false,"id":378,"linearizedBaseContracts":[378],"name":"IAccessControl","nameLocation":"236:14:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":299,"nodeType":"StructuredDocumentation","src":"257:56:1","text":" @dev The `account` is missing a role."},"errorSelector":"e2517d3f","id":305,"name":"AccessControlUnauthorizedAccount","nameLocation":"324:32:1","nodeType":"ErrorDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"account","nameLocation":"365:7:1","nodeType":"VariableDeclaration","scope":305,"src":"357:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":300,"name":"address","nodeType":"ElementaryTypeName","src":"357:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":303,"mutability":"mutable","name":"neededRole","nameLocation":"382:10:1","nodeType":"VariableDeclaration","scope":305,"src":"374:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":302,"name":"bytes32","nodeType":"ElementaryTypeName","src":"374:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"356:37:1"},"src":"318:76:1"},{"documentation":{"id":306,"nodeType":"StructuredDocumentation","src":"400:148:1","text":" @dev The caller of a function is not the expected one.\n NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."},"errorSelector":"6697b232","id":308,"name":"AccessControlBadConfirmation","nameLocation":"559:28:1","nodeType":"ErrorDefinition","parameters":{"id":307,"nodeType":"ParameterList","parameters":[],"src":"587:2:1"},"src":"553:37:1"},{"anonymous":false,"documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"596:254:1","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted to signal this."},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":317,"name":"RoleAdminChanged","nameLocation":"861:16:1","nodeType":"EventDefinition","parameters":{"id":316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"894:4:1","nodeType":"VariableDeclaration","scope":317,"src":"878:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"878:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":313,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"916:17:1","nodeType":"VariableDeclaration","scope":317,"src":"900:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":312,"name":"bytes32","nodeType":"ElementaryTypeName","src":"900:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":315,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"951:12:1","nodeType":"VariableDeclaration","scope":317,"src":"935:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"935:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"877:87:1"},"src":"855:110:1"},{"anonymous":false,"documentation":{"id":318,"nodeType":"StructuredDocumentation","src":"971:295:1","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":326,"name":"RoleGranted","nameLocation":"1277:11:1","nodeType":"EventDefinition","parameters":{"id":325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":320,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1305:4:1","nodeType":"VariableDeclaration","scope":326,"src":"1289:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":319,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1289:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":322,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1327:7:1","nodeType":"VariableDeclaration","scope":326,"src":"1311:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":321,"name":"address","nodeType":"ElementaryTypeName","src":"1311:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":324,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1352:6:1","nodeType":"VariableDeclaration","scope":326,"src":"1336:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":323,"name":"address","nodeType":"ElementaryTypeName","src":"1336:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1288:71:1"},"src":"1271:89:1"},{"anonymous":false,"documentation":{"id":327,"nodeType":"StructuredDocumentation","src":"1366:275:1","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":335,"name":"RoleRevoked","nameLocation":"1652:11:1","nodeType":"EventDefinition","parameters":{"id":334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":329,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1680:4:1","nodeType":"VariableDeclaration","scope":335,"src":"1664:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1664:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":331,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1702:7:1","nodeType":"VariableDeclaration","scope":335,"src":"1686:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":330,"name":"address","nodeType":"ElementaryTypeName","src":"1686:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":333,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1727:6:1","nodeType":"VariableDeclaration","scope":335,"src":"1711:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":332,"name":"address","nodeType":"ElementaryTypeName","src":"1711:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1663:71:1"},"src":"1646:89:1"},{"documentation":{"id":336,"nodeType":"StructuredDocumentation","src":"1741:76:1","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":345,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1831:7:1","nodeType":"FunctionDefinition","parameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":338,"mutability":"mutable","name":"role","nameLocation":"1847:4:1","nodeType":"VariableDeclaration","scope":345,"src":"1839:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":337,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1839:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":340,"mutability":"mutable","name":"account","nameLocation":"1861:7:1","nodeType":"VariableDeclaration","scope":345,"src":"1853:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":339,"name":"address","nodeType":"ElementaryTypeName","src":"1853:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1838:31:1"},"returnParameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":345,"src":"1893:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":342,"name":"bool","nodeType":"ElementaryTypeName","src":"1893:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1892:6:1"},"scope":378,"src":"1822:77:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":346,"nodeType":"StructuredDocumentation","src":"1905:184:1","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":353,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"2103:12:1","nodeType":"FunctionDefinition","parameters":{"id":349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"role","nameLocation":"2124:4:1","nodeType":"VariableDeclaration","scope":353,"src":"2116:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":347,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2116:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2115:14:1"},"returnParameters":{"id":352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":353,"src":"2153:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2153:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2152:9:1"},"scope":378,"src":"2094:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":354,"nodeType":"StructuredDocumentation","src":"2168:239:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":361,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2421:9:1","nodeType":"FunctionDefinition","parameters":{"id":359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":356,"mutability":"mutable","name":"role","nameLocation":"2439:4:1","nodeType":"VariableDeclaration","scope":361,"src":"2431:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":355,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2431:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":358,"mutability":"mutable","name":"account","nameLocation":"2453:7:1","nodeType":"VariableDeclaration","scope":361,"src":"2445:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":357,"name":"address","nodeType":"ElementaryTypeName","src":"2445:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2430:31:1"},"returnParameters":{"id":360,"nodeType":"ParameterList","parameters":[],"src":"2470:0:1"},"scope":378,"src":"2412:59:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":362,"nodeType":"StructuredDocumentation","src":"2477:223:1","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":369,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2714:10:1","nodeType":"FunctionDefinition","parameters":{"id":367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":364,"mutability":"mutable","name":"role","nameLocation":"2733:4:1","nodeType":"VariableDeclaration","scope":369,"src":"2725:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2725:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":366,"mutability":"mutable","name":"account","nameLocation":"2747:7:1","nodeType":"VariableDeclaration","scope":369,"src":"2739:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":365,"name":"address","nodeType":"ElementaryTypeName","src":"2739:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2724:31:1"},"returnParameters":{"id":368,"nodeType":"ParameterList","parameters":[],"src":"2764:0:1"},"scope":378,"src":"2705:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"2771:491:1","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`."},"functionSelector":"36568abe","id":377,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"3276:12:1","nodeType":"FunctionDefinition","parameters":{"id":375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":372,"mutability":"mutable","name":"role","nameLocation":"3297:4:1","nodeType":"VariableDeclaration","scope":377,"src":"3289:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3289:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":374,"mutability":"mutable","name":"callerConfirmation","nameLocation":"3311:18:1","nodeType":"VariableDeclaration","scope":377,"src":"3303:26:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":373,"name":"address","nodeType":"ElementaryTypeName","src":"3303:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3288:42:1"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[],"src":"3339:0:1"},"scope":378,"src":"3267:73:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":379,"src":"226:3116:1","usedErrors":[305,308],"usedEvents":[317,326,335]}],"src":"109:3234:1"},"id":1},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[456]},"id":457,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":380,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":381,"nodeType":"StructuredDocumentation","src":"132:71:2","text":" @dev Interface of the ERC-20 standard as defined in the ERC."},"fullyImplemented":false,"id":456,"linearizedBaseContracts":[456],"name":"IERC20","nameLocation":"214:6:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":382,"nodeType":"StructuredDocumentation","src":"227:158:2","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":390,"name":"Transfer","nameLocation":"396:8:2","nodeType":"EventDefinition","parameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":384,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"421:4:2","nodeType":"VariableDeclaration","scope":390,"src":"405:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":383,"name":"address","nodeType":"ElementaryTypeName","src":"405:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":386,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"443:2:2","nodeType":"VariableDeclaration","scope":390,"src":"427:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":385,"name":"address","nodeType":"ElementaryTypeName","src":"427:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":388,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"455:5:2","nodeType":"VariableDeclaration","scope":390,"src":"447:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":387,"name":"uint256","nodeType":"ElementaryTypeName","src":"447:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"404:57:2"},"src":"390:72:2"},{"anonymous":false,"documentation":{"id":391,"nodeType":"StructuredDocumentation","src":"468:148:2","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":399,"name":"Approval","nameLocation":"627:8:2","nodeType":"EventDefinition","parameters":{"id":398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":393,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"652:5:2","nodeType":"VariableDeclaration","scope":399,"src":"636:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":392,"name":"address","nodeType":"ElementaryTypeName","src":"636:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":395,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"675:7:2","nodeType":"VariableDeclaration","scope":399,"src":"659:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":394,"name":"address","nodeType":"ElementaryTypeName","src":"659:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":397,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"692:5:2","nodeType":"VariableDeclaration","scope":399,"src":"684:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":396,"name":"uint256","nodeType":"ElementaryTypeName","src":"684:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"635:63:2"},"src":"621:78:2"},{"documentation":{"id":400,"nodeType":"StructuredDocumentation","src":"705:65:2","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":405,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"784:11:2","nodeType":"FunctionDefinition","parameters":{"id":401,"nodeType":"ParameterList","parameters":[],"src":"795:2:2"},"returnParameters":{"id":404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":403,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":405,"src":"821:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":402,"name":"uint256","nodeType":"ElementaryTypeName","src":"821:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"820:9:2"},"scope":456,"src":"775:55:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":406,"nodeType":"StructuredDocumentation","src":"836:71:2","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":413,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:2","nodeType":"FunctionDefinition","parameters":{"id":409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":408,"mutability":"mutable","name":"account","nameLocation":"939:7:2","nodeType":"VariableDeclaration","scope":413,"src":"931:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":407,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:2"},"returnParameters":{"id":412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":411,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":413,"src":"971:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":410,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:2"},"scope":456,"src":"912:68:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":414,"nodeType":"StructuredDocumentation","src":"986:213:2","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":423,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:2","nodeType":"FunctionDefinition","parameters":{"id":419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":416,"mutability":"mutable","name":"to","nameLocation":"1230:2:2","nodeType":"VariableDeclaration","scope":423,"src":"1222:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":415,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":418,"mutability":"mutable","name":"value","nameLocation":"1242:5:2","nodeType":"VariableDeclaration","scope":423,"src":"1234:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":417,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:27:2"},"returnParameters":{"id":422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":421,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":423,"src":"1267:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":420,"name":"bool","nodeType":"ElementaryTypeName","src":"1267:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1266:6:2"},"scope":456,"src":"1204:69:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":424,"nodeType":"StructuredDocumentation","src":"1279:264:2","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":433,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1557:9:2","nodeType":"FunctionDefinition","parameters":{"id":429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":426,"mutability":"mutable","name":"owner","nameLocation":"1575:5:2","nodeType":"VariableDeclaration","scope":433,"src":"1567:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":425,"name":"address","nodeType":"ElementaryTypeName","src":"1567:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":428,"mutability":"mutable","name":"spender","nameLocation":"1590:7:2","nodeType":"VariableDeclaration","scope":433,"src":"1582:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":427,"name":"address","nodeType":"ElementaryTypeName","src":"1582:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1566:32:2"},"returnParameters":{"id":432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":431,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":433,"src":"1622:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":430,"name":"uint256","nodeType":"ElementaryTypeName","src":"1622:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1621:9:2"},"scope":456,"src":"1548:83:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":434,"nodeType":"StructuredDocumentation","src":"1637:667:2","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":443,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2318:7:2","nodeType":"FunctionDefinition","parameters":{"id":439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":436,"mutability":"mutable","name":"spender","nameLocation":"2334:7:2","nodeType":"VariableDeclaration","scope":443,"src":"2326:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":435,"name":"address","nodeType":"ElementaryTypeName","src":"2326:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":438,"mutability":"mutable","name":"value","nameLocation":"2351:5:2","nodeType":"VariableDeclaration","scope":443,"src":"2343:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":437,"name":"uint256","nodeType":"ElementaryTypeName","src":"2343:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2325:32:2"},"returnParameters":{"id":442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":441,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":443,"src":"2376:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":440,"name":"bool","nodeType":"ElementaryTypeName","src":"2376:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2375:6:2"},"scope":456,"src":"2309:73:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":444,"nodeType":"StructuredDocumentation","src":"2388:297:2","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":455,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2699:12:2","nodeType":"FunctionDefinition","parameters":{"id":451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":446,"mutability":"mutable","name":"from","nameLocation":"2720:4:2","nodeType":"VariableDeclaration","scope":455,"src":"2712:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":445,"name":"address","nodeType":"ElementaryTypeName","src":"2712:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":448,"mutability":"mutable","name":"to","nameLocation":"2734:2:2","nodeType":"VariableDeclaration","scope":455,"src":"2726:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":447,"name":"address","nodeType":"ElementaryTypeName","src":"2726:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":450,"mutability":"mutable","name":"value","nameLocation":"2746:5:2","nodeType":"VariableDeclaration","scope":455,"src":"2738:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":449,"name":"uint256","nodeType":"ElementaryTypeName","src":"2738:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2711:41:2"},"returnParameters":{"id":454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":453,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":455,"src":"2771:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":452,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:2"},"scope":456,"src":"2690:87:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":457,"src":"204:2575:2","usedErrors":[],"usedEvents":[390,399]}],"src":"106:2674:2"},"id":2},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[486]},"id":487,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":458,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:3"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"127:496:3","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":486,"linearizedBaseContracts":[486],"name":"Context","nameLocation":"642:7:3","nodeType":"ContractDefinition","nodes":[{"body":{"id":467,"nodeType":"Block","src":"718:34:3","statements":[{"expression":{"expression":{"id":464,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:3","memberName":"sender","nodeType":"MemberAccess","src":"735:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":463,"id":466,"nodeType":"Return","src":"728:17:3"}]},"id":468,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:3","nodeType":"FunctionDefinition","parameters":{"id":460,"nodeType":"ParameterList","parameters":[],"src":"675:2:3"},"returnParameters":{"id":463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":462,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":468,"src":"709:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":461,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:3"},"scope":486,"src":"656:96:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":476,"nodeType":"Block","src":"825:32:3","statements":[{"expression":{"expression":{"id":473,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:3","memberName":"data","nodeType":"MemberAccess","src":"842:8:3","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":472,"id":475,"nodeType":"Return","src":"835:15:3"}]},"id":477,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:3","nodeType":"FunctionDefinition","parameters":{"id":469,"nodeType":"ParameterList","parameters":[],"src":"775:2:3"},"returnParameters":{"id":472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":477,"src":"809:14:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":470,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:3"},"scope":486,"src":"758:99:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":484,"nodeType":"Block","src":"935:25:3","statements":[{"expression":{"hexValue":"30","id":482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":481,"id":483,"nodeType":"Return","src":"945:8:3"}]},"id":485,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:3","nodeType":"FunctionDefinition","parameters":{"id":478,"nodeType":"ParameterList","parameters":[],"src":"892:2:3"},"returnParameters":{"id":481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":485,"src":"926:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":479,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:3"},"scope":486,"src":"863:97:3","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":487,"src":"624:338:3","usedErrors":[],"usedEvents":[]}],"src":"101:862:3"},"id":3},"@openzeppelin/contracts/utils/Pausable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Pausable.sol","exportedSymbols":{"Context":[486],"Pausable":[594]},"id":595,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":488,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:4"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":490,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":595,"sourceUnit":487,"src":"128:45:4","symbolAliases":[{"foreign":{"id":489,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":486,"src":"136:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":492,"name":"Context","nameLocations":["645:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":486,"src":"645:7:4"},"id":493,"nodeType":"InheritanceSpecifier","src":"645:7:4"}],"canonicalName":"Pausable","contractDependencies":[],"contractKind":"contract","documentation":{"id":491,"nodeType":"StructuredDocumentation","src":"175:439:4","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":594,"linearizedBaseContracts":[594,486],"name":"Pausable","nameLocation":"633:8:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":495,"mutability":"mutable","name":"_paused","nameLocation":"672:7:4","nodeType":"VariableDeclaration","scope":594,"src":"659:20:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":494,"name":"bool","nodeType":"ElementaryTypeName","src":"659:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":496,"nodeType":"StructuredDocumentation","src":"686:73:4","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":500,"name":"Paused","nameLocation":"770:6:4","nodeType":"EventDefinition","parameters":{"id":499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":498,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"785:7:4","nodeType":"VariableDeclaration","scope":500,"src":"777:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":497,"name":"address","nodeType":"ElementaryTypeName","src":"777:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"776:17:4"},"src":"764:30:4"},{"anonymous":false,"documentation":{"id":501,"nodeType":"StructuredDocumentation","src":"800:70:4","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":505,"name":"Unpaused","nameLocation":"881:8:4","nodeType":"EventDefinition","parameters":{"id":504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":503,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"898:7:4","nodeType":"VariableDeclaration","scope":505,"src":"890:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":502,"name":"address","nodeType":"ElementaryTypeName","src":"890:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"889:17:4"},"src":"875:32:4"},{"documentation":{"id":506,"nodeType":"StructuredDocumentation","src":"913:76:4","text":" @dev The operation failed because the contract is paused."},"errorSelector":"d93c0665","id":508,"name":"EnforcedPause","nameLocation":"1000:13:4","nodeType":"ErrorDefinition","parameters":{"id":507,"nodeType":"ParameterList","parameters":[],"src":"1013:2:4"},"src":"994:22:4"},{"documentation":{"id":509,"nodeType":"StructuredDocumentation","src":"1022:80:4","text":" @dev The operation failed because the contract is not paused."},"errorSelector":"8dfc202b","id":511,"name":"ExpectedPause","nameLocation":"1113:13:4","nodeType":"ErrorDefinition","parameters":{"id":510,"nodeType":"ParameterList","parameters":[],"src":"1126:2:4"},"src":"1107:22:4"},{"body":{"id":518,"nodeType":"Block","src":"1340:47:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":514,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":548,"src":"1350:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":516,"nodeType":"ExpressionStatement","src":"1350:19:4"},{"id":517,"nodeType":"PlaceholderStatement","src":"1379:1:4"}]},"documentation":{"id":512,"nodeType":"StructuredDocumentation","src":"1135:175:4","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":519,"name":"whenNotPaused","nameLocation":"1324:13:4","nodeType":"ModifierDefinition","parameters":{"id":513,"nodeType":"ParameterList","parameters":[],"src":"1337:2:4"},"src":"1315:72:4","virtual":false,"visibility":"internal"},{"body":{"id":526,"nodeType":"Block","src":"1587:44:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":522,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"1597:14:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1597:16:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":524,"nodeType":"ExpressionStatement","src":"1597:16:4"},{"id":525,"nodeType":"PlaceholderStatement","src":"1623:1:4"}]},"documentation":{"id":520,"nodeType":"StructuredDocumentation","src":"1393:167:4","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":527,"name":"whenPaused","nameLocation":"1574:10:4","nodeType":"ModifierDefinition","parameters":{"id":521,"nodeType":"ParameterList","parameters":[],"src":"1584:2:4"},"src":"1565:66:4","virtual":false,"visibility":"internal"},{"body":{"id":535,"nodeType":"Block","src":"1779:31:4","statements":[{"expression":{"id":533,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"1796:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":532,"id":534,"nodeType":"Return","src":"1789:14:4"}]},"documentation":{"id":528,"nodeType":"StructuredDocumentation","src":"1637:84:4","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":536,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1735:6:4","nodeType":"FunctionDefinition","parameters":{"id":529,"nodeType":"ParameterList","parameters":[],"src":"1741:2:4"},"returnParameters":{"id":532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":531,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":536,"src":"1773:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":530,"name":"bool","nodeType":"ElementaryTypeName","src":"1773:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1772:6:4"},"scope":594,"src":"1726:84:4","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":547,"nodeType":"Block","src":"1929:77:4","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"id":540,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"1943:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1943:8:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":546,"nodeType":"IfStatement","src":"1939:61:4","trueBody":{"id":545,"nodeType":"Block","src":"1953:47:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":542,"name":"EnforcedPause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"1974:13:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1974:15:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":544,"nodeType":"RevertStatement","src":"1967:22:4"}]}}]},"documentation":{"id":537,"nodeType":"StructuredDocumentation","src":"1816:57:4","text":" @dev Throws if the contract is paused."},"id":548,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"1887:17:4","nodeType":"FunctionDefinition","parameters":{"id":538,"nodeType":"ParameterList","parameters":[],"src":"1904:2:4"},"returnParameters":{"id":539,"nodeType":"ParameterList","parameters":[],"src":"1929:0:4"},"scope":594,"src":"1878:128:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":560,"nodeType":"Block","src":"2126:78:4","statements":[{"condition":{"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2140:9:4","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":552,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"2141:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2141:8:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":559,"nodeType":"IfStatement","src":"2136:62:4","trueBody":{"id":558,"nodeType":"Block","src":"2151:47:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":555,"name":"ExpectedPause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"2172:13:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2172:15:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":557,"nodeType":"RevertStatement","src":"2165:22:4"}]}}]},"documentation":{"id":549,"nodeType":"StructuredDocumentation","src":"2012:61:4","text":" @dev Throws if the contract is not paused."},"id":561,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2087:14:4","nodeType":"FunctionDefinition","parameters":{"id":550,"nodeType":"ParameterList","parameters":[],"src":"2101:2:4"},"returnParameters":{"id":551,"nodeType":"ParameterList","parameters":[],"src":"2126:0:4"},"scope":594,"src":"2078:126:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":576,"nodeType":"Block","src":"2388:66:4","statements":[{"expression":{"id":569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":567,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"2398:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2408:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2398:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":570,"nodeType":"ExpressionStatement","src":"2398:14:4"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":572,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"2434:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2434:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":571,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"2427:6:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2427:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":575,"nodeType":"EmitStatement","src":"2422:25:4"}]},"documentation":{"id":562,"nodeType":"StructuredDocumentation","src":"2210:124:4","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":577,"implemented":true,"kind":"function","modifiers":[{"id":565,"kind":"modifierInvocation","modifierName":{"id":564,"name":"whenNotPaused","nameLocations":["2374:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":519,"src":"2374:13:4"},"nodeType":"ModifierInvocation","src":"2374:13:4"}],"name":"_pause","nameLocation":"2348:6:4","nodeType":"FunctionDefinition","parameters":{"id":563,"nodeType":"ParameterList","parameters":[],"src":"2354:2:4"},"returnParameters":{"id":566,"nodeType":"ParameterList","parameters":[],"src":"2388:0:4"},"scope":594,"src":"2339:115:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":592,"nodeType":"Block","src":"2634:69:4","statements":[{"expression":{"id":585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":583,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"2644:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2654:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2644:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":586,"nodeType":"ExpressionStatement","src":"2644:15:4"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":588,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"2683:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2683:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":587,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"2674:8:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2674:22:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":591,"nodeType":"EmitStatement","src":"2669:27:4"}]},"documentation":{"id":578,"nodeType":"StructuredDocumentation","src":"2460:121:4","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":593,"implemented":true,"kind":"function","modifiers":[{"id":581,"kind":"modifierInvocation","modifierName":{"id":580,"name":"whenPaused","nameLocations":["2623:10:4"],"nodeType":"IdentifierPath","referencedDeclaration":527,"src":"2623:10:4"},"nodeType":"ModifierInvocation","src":"2623:10:4"}],"name":"_unpause","nameLocation":"2595:8:4","nodeType":"FunctionDefinition","parameters":{"id":579,"nodeType":"ParameterList","parameters":[],"src":"2603:2:4"},"returnParameters":{"id":582,"nodeType":"ParameterList","parameters":[],"src":"2634:0:4"},"scope":594,"src":"2586:117:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":595,"src":"615:2090:4","usedErrors":[508,511],"usedEvents":[500,505]}],"src":"102:2604:4"},"id":4},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[663]},"id":664,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":596,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:5"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":597,"nodeType":"StructuredDocumentation","src":"135:894:5","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n consider using {ReentrancyGuardTransient} instead.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":663,"linearizedBaseContracts":[663],"name":"ReentrancyGuard","nameLocation":"1048:15:5","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":600,"mutability":"constant","name":"NOT_ENTERED","nameLocation":"1843:11:5","nodeType":"VariableDeclaration","scope":663,"src":"1818:40:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":598,"name":"uint256","nodeType":"ElementaryTypeName","src":"1818:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1857:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":603,"mutability":"constant","name":"ENTERED","nameLocation":"1889:7:5","nodeType":"VariableDeclaration","scope":663,"src":"1864:36:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":601,"name":"uint256","nodeType":"ElementaryTypeName","src":"1864:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1899:1:5","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":605,"mutability":"mutable","name":"_status","nameLocation":"1923:7:5","nodeType":"VariableDeclaration","scope":663,"src":"1907:23:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":604,"name":"uint256","nodeType":"ElementaryTypeName","src":"1907:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"documentation":{"id":606,"nodeType":"StructuredDocumentation","src":"1937:52:5","text":" @dev Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","id":608,"name":"ReentrancyGuardReentrantCall","nameLocation":"2000:28:5","nodeType":"ErrorDefinition","parameters":{"id":607,"nodeType":"ParameterList","parameters":[],"src":"2028:2:5"},"src":"1994:37:5"},{"body":{"id":615,"nodeType":"Block","src":"2051:38:5","statements":[{"expression":{"id":613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":611,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"2061:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":612,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":600,"src":"2071:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2061:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":614,"nodeType":"ExpressionStatement","src":"2061:21:5"}]},"id":616,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":609,"nodeType":"ParameterList","parameters":[],"src":"2048:2:5"},"returnParameters":{"id":610,"nodeType":"ParameterList","parameters":[],"src":"2051:0:5"},"scope":663,"src":"2037:52:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":626,"nodeType":"Block","src":"2490:79:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":619,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"2500:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2500:21:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":621,"nodeType":"ExpressionStatement","src":"2500:21:5"},{"id":622,"nodeType":"PlaceholderStatement","src":"2531:1:5"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":623,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"2542:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2542:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":625,"nodeType":"ExpressionStatement","src":"2542:20:5"}]},"documentation":{"id":617,"nodeType":"StructuredDocumentation","src":"2095:366:5","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":627,"name":"nonReentrant","nameLocation":"2475:12:5","nodeType":"ModifierDefinition","parameters":{"id":618,"nodeType":"ParameterList","parameters":[],"src":"2487:2:5"},"src":"2466:103:5","virtual":false,"visibility":"internal"},{"body":{"id":642,"nodeType":"Block","src":"2614:268:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":630,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"2702:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":631,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":603,"src":"2713:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2702:18:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":637,"nodeType":"IfStatement","src":"2698:86:5","trueBody":{"id":636,"nodeType":"Block","src":"2722:62:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":633,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"2743:28:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2743:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":635,"nodeType":"RevertStatement","src":"2736:37:5"}]}},{"expression":{"id":640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":638,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"2858:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":639,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":603,"src":"2868:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2858:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":641,"nodeType":"ExpressionStatement","src":"2858:17:5"}]},"id":643,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2584:19:5","nodeType":"FunctionDefinition","parameters":{"id":628,"nodeType":"ParameterList","parameters":[],"src":"2603:2:5"},"returnParameters":{"id":629,"nodeType":"ParameterList","parameters":[],"src":"2614:0:5"},"scope":663,"src":"2575:307:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":650,"nodeType":"Block","src":"2926:170:5","statements":[{"expression":{"id":648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":646,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"3068:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":647,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":600,"src":"3078:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3068:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":649,"nodeType":"ExpressionStatement","src":"3068:21:5"}]},"id":651,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2897:18:5","nodeType":"FunctionDefinition","parameters":{"id":644,"nodeType":"ParameterList","parameters":[],"src":"2915:2:5"},"returnParameters":{"id":645,"nodeType":"ParameterList","parameters":[],"src":"2926:0:5"},"scope":663,"src":"2888:208:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":661,"nodeType":"Block","src":"3339:42:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":657,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"3356:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":658,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":603,"src":"3367:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3356:18:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":656,"id":660,"nodeType":"Return","src":"3349:25:5"}]},"documentation":{"id":652,"nodeType":"StructuredDocumentation","src":"3102:168:5","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":662,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3284:23:5","nodeType":"FunctionDefinition","parameters":{"id":653,"nodeType":"ParameterList","parameters":[],"src":"3307:2:5"},"returnParameters":{"id":656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":655,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":662,"src":"3333:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":654,"name":"bool","nodeType":"ElementaryTypeName","src":"3333:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3332:6:5"},"scope":663,"src":"3275:106:5","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":664,"src":"1030:2353:5","usedErrors":[608],"usedEvents":[]}],"src":"109:3275:5"},"id":5},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[687],"IERC165":[699]},"id":688,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":665,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:6"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":667,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":688,"sourceUnit":700,"src":"140:38:6","symbolAliases":[{"foreign":{"id":666,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":699,"src":"148:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":669,"name":"IERC165","nameLocations":["688:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":699,"src":"688:7:6"},"id":670,"nodeType":"InheritanceSpecifier","src":"688:7:6"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":668,"nodeType":"StructuredDocumentation","src":"180:479:6","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":687,"linearizedBaseContracts":[687,699],"name":"ERC165","nameLocation":"678:6:6","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[698],"body":{"id":685,"nodeType":"Block","src":"845:64:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":678,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":673,"src":"862:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":680,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":699,"src":"882:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$699_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$699_$","typeString":"type(contract IERC165)"}],"id":679,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"877:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"877:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$699","typeString":"type(contract IERC165)"}},"id":682,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"891:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"877:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"862:40:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":677,"id":684,"nodeType":"Return","src":"855:47:6"}]},"documentation":{"id":671,"nodeType":"StructuredDocumentation","src":"702:56:6","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":686,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"772:17:6","nodeType":"FunctionDefinition","parameters":{"id":674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":673,"mutability":"mutable","name":"interfaceId","nameLocation":"797:11:6","nodeType":"VariableDeclaration","scope":686,"src":"790:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":672,"name":"bytes4","nodeType":"ElementaryTypeName","src":"790:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"789:20:6"},"returnParameters":{"id":677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":676,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":686,"src":"839:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":675,"name":"bool","nodeType":"ElementaryTypeName","src":"839:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"838:6:6"},"scope":687,"src":"763:146:6","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":688,"src":"660:251:6","usedErrors":[],"usedEvents":[]}],"src":"114:798:6"},"id":6},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[699]},"id":700,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":689,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":690,"nodeType":"StructuredDocumentation","src":"141:280:7","text":" @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":699,"linearizedBaseContracts":[699],"name":"IERC165","nameLocation":"432:7:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":691,"nodeType":"StructuredDocumentation","src":"446:340:7","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":698,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"800:17:7","nodeType":"FunctionDefinition","parameters":{"id":694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":693,"mutability":"mutable","name":"interfaceId","nameLocation":"825:11:7","nodeType":"VariableDeclaration","scope":698,"src":"818:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":692,"name":"bytes4","nodeType":"ElementaryTypeName","src":"818:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"817:20:7"},"returnParameters":{"id":697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":696,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":698,"src":"861:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":695,"name":"bool","nodeType":"ElementaryTypeName","src":"861:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"860:6:7"},"scope":699,"src":"791:76:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":700,"src":"422:447:7","usedErrors":[],"usedEvents":[]}],"src":"115:755:7"},"id":7},"contracts/GamingTournament.sol":{"ast":{"absolutePath":"contracts/GamingTournament.sol","exportedSymbols":{"AccessControl":[295],"Context":[486],"ERC165":[687],"GamingTournament":[2647],"IAccessControl":[378],"IERC20":[456],"Pausable":[594],"ReentrancyGuard":[663]},"id":2648,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":701,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"33:24:8"},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"@openzeppelin/contracts/access/AccessControl.sol","id":702,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2648,"sourceUnit":296,"src":"61:58:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","file":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","id":703,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2648,"sourceUnit":664,"src":"121:59:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Pausable.sol","file":"@openzeppelin/contracts/utils/Pausable.sol","id":704,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2648,"sourceUnit":595,"src":"182:52:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":705,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2648,"sourceUnit":457,"src":"236:56:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":707,"name":"AccessControl","nameLocations":["531:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":295,"src":"531:13:8"},"id":708,"nodeType":"InheritanceSpecifier","src":"531:13:8"},{"baseName":{"id":709,"name":"ReentrancyGuard","nameLocations":["546:15:8"],"nodeType":"IdentifierPath","referencedDeclaration":663,"src":"546:15:8"},"id":710,"nodeType":"InheritanceSpecifier","src":"546:15:8"},{"baseName":{"id":711,"name":"Pausable","nameLocations":["563:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":594,"src":"563:8:8"},"id":712,"nodeType":"InheritanceSpecifier","src":"563:8:8"}],"canonicalName":"GamingTournament","contractDependencies":[],"contractKind":"contract","documentation":{"id":706,"nodeType":"StructuredDocumentation","src":"296:204:8","text":" @title GameDin Tournament Contract\n @dev Advanced tournament system for GameDin L3 gaming platform\n Handles tournament creation, player registration, matchmaking, and prize distribution"},"fullyImplemented":true,"id":2647,"linearizedBaseContracts":[2647,594,663,295,687,699,378,486],"name":"GamingTournament","nameLocation":"511:16:8","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"fbe7bc89","id":717,"mutability":"constant","name":"TOURNAMENT_ORGANIZER_ROLE","nameLocation":"807:25:8","nodeType":"VariableDeclaration","scope":2647,"src":"783:90:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":713,"name":"bytes32","nodeType":"ElementaryTypeName","src":"783:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"544f55524e414d454e545f4f5247414e495a45525f524f4c45","id":715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"845:27:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_65c9916f995116b13da98f2377109ffc8f2ed0372863561a4bf02356bfc80bf6","typeString":"literal_string \"TOURNAMENT_ORGANIZER_ROLE\""},"value":"TOURNAMENT_ORGANIZER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_65c9916f995116b13da98f2377109ffc8f2ed0372863561a4bf02356bfc80bf6","typeString":"literal_string \"TOURNAMENT_ORGANIZER_ROLE\""}],"id":714,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"835:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"835:38:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"22106e34","id":722,"mutability":"constant","name":"MATCH_REFEREE_ROLE","nameLocation":"904:18:8","nodeType":"VariableDeclaration","scope":2647,"src":"880:76:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":718,"name":"bytes32","nodeType":"ElementaryTypeName","src":"880:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4d415443485f524546455245455f524f4c45","id":720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"935:20:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc2754c3124992c494f261273f660823cff6f38aa3c30f5781021a51340f912d","typeString":"literal_string \"MATCH_REFEREE_ROLE\""},"value":"MATCH_REFEREE_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_fc2754c3124992c494f261273f660823cff6f38aa3c30f5781021a51340f912d","typeString":"literal_string \"MATCH_REFEREE_ROLE\""}],"id":719,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"925:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"20df4359","id":727,"mutability":"constant","name":"EMERGENCY_ROLE","nameLocation":"987:14:8","nodeType":"VariableDeclaration","scope":2647,"src":"963:68:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":723,"name":"bytes32","nodeType":"ElementaryTypeName","src":"963:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"454d455247454e43595f524f4c45","id":725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1014:16:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_bf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b26","typeString":"literal_string \"EMERGENCY_ROLE\""},"value":"EMERGENCY_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_bf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b26","typeString":"literal_string \"EMERGENCY_ROLE\""}],"id":724,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1004:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1004:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"281139ef","id":730,"mutability":"constant","name":"MAX_TOURNAMENT_PLAYERS","nameLocation":"1068:22:8","nodeType":"VariableDeclaration","scope":2647,"src":"1044:53:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":728,"name":"uint256","nodeType":"ElementaryTypeName","src":"1044:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31303234","id":729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1093:4:8","typeDescriptions":{"typeIdentifier":"t_rational_1024_by_1","typeString":"int_const 1024"},"value":"1024"},"visibility":"public"},{"constant":true,"functionSelector":"6577b5c6","id":733,"mutability":"constant","name":"MIN_TOURNAMENT_PLAYERS","nameLocation":"1128:22:8","nodeType":"VariableDeclaration","scope":2647,"src":"1104:50:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":731,"name":"uint256","nodeType":"ElementaryTypeName","src":"1104:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"34","id":732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1153:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"public"},{"constant":true,"functionSelector":"697ea036","id":736,"mutability":"constant","name":"MAX_TOURNAMENT_DURATION","nameLocation":"1185:23:8","nodeType":"VariableDeclaration","scope":2647,"src":"1161:56:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":734,"name":"uint256","nodeType":"ElementaryTypeName","src":"1161:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"37","id":735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1211:6:8","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_604800_by_1","typeString":"int_const 604800"},"value":"7"},"visibility":"public"},{"constant":true,"functionSelector":"e93e817c","id":739,"mutability":"constant","name":"MIN_TOURNAMENT_DURATION","nameLocation":"1248:23:8","nodeType":"VariableDeclaration","scope":2647,"src":"1224:57:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":737,"name":"uint256","nodeType":"ElementaryTypeName","src":"1224:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1274:7:8","subdenomination":"hours","typeDescriptions":{"typeIdentifier":"t_rational_3600_by_1","typeString":"int_const 3600"},"value":"1"},"visibility":"public"},{"canonicalName":"GamingTournament.TournamentStatus","id":746,"members":[{"id":740,"name":"CREATED","nameLocation":"1529:7:8","nodeType":"EnumValue","src":"1529:7:8"},{"id":741,"name":"REGISTRATION_OPEN","nameLocation":"1547:17:8","nodeType":"EnumValue","src":"1547:17:8"},{"id":742,"name":"REGISTRATION_CLOSED","nameLocation":"1575:19:8","nodeType":"EnumValue","src":"1575:19:8"},{"id":743,"name":"IN_PROGRESS","nameLocation":"1605:11:8","nodeType":"EnumValue","src":"1605:11:8"},{"id":744,"name":"FINISHED","nameLocation":"1627:8:8","nodeType":"EnumValue","src":"1627:8:8"},{"id":745,"name":"CANCELLED","nameLocation":"1646:9:8","nodeType":"EnumValue","src":"1646:9:8"}],"name":"TournamentStatus","nameLocation":"1501:16:8","nodeType":"EnumDefinition","src":"1496:166:8"},{"canonicalName":"GamingTournament.TournamentType","id":752,"members":[{"id":747,"name":"SINGLE_ELIMINATION","nameLocation":"1705:18:8","nodeType":"EnumValue","src":"1705:18:8"},{"id":748,"name":"DOUBLE_ELIMINATION","nameLocation":"1734:18:8","nodeType":"EnumValue","src":"1734:18:8"},{"id":749,"name":"ROUND_ROBIN","nameLocation":"1763:11:8","nodeType":"EnumValue","src":"1763:11:8"},{"id":750,"name":"SWISS_SYSTEM","nameLocation":"1785:12:8","nodeType":"EnumValue","src":"1785:12:8"},{"id":751,"name":"BATTLE_ROYALE","nameLocation":"1808:13:8","nodeType":"EnumValue","src":"1808:13:8"}],"name":"TournamentType","nameLocation":"1679:14:8","nodeType":"EnumDefinition","src":"1674:154:8"},{"canonicalName":"GamingTournament.MatchStatus","id":757,"members":[{"id":753,"name":"SCHEDULED","nameLocation":"1868:9:8","nodeType":"EnumValue","src":"1868:9:8"},{"id":754,"name":"IN_PROGRESS","nameLocation":"1888:11:8","nodeType":"EnumValue","src":"1888:11:8"},{"id":755,"name":"COMPLETED","nameLocation":"1910:9:8","nodeType":"EnumValue","src":"1910:9:8"},{"id":756,"name":"CANCELLED","nameLocation":"1930:9:8","nodeType":"EnumValue","src":"1930:9:8"}],"name":"MatchStatus","nameLocation":"1845:11:8","nodeType":"EnumDefinition","src":"1840:106:8"},{"canonicalName":"GamingTournament.Tournament","id":800,"members":[{"constant":false,"id":759,"mutability":"mutable","name":"tournamentId","nameLocation":"1995:12:8","nodeType":"VariableDeclaration","scope":800,"src":"1987:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":758,"name":"uint256","nodeType":"ElementaryTypeName","src":"1987:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":761,"mutability":"mutable","name":"name","nameLocation":"2025:4:8","nodeType":"VariableDeclaration","scope":800,"src":"2018:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":760,"name":"string","nodeType":"ElementaryTypeName","src":"2018:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":763,"mutability":"mutable","name":"description","nameLocation":"2047:11:8","nodeType":"VariableDeclaration","scope":800,"src":"2040:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":762,"name":"string","nodeType":"ElementaryTypeName","src":"2040:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":766,"mutability":"mutable","name":"tournamentType","nameLocation":"2084:14:8","nodeType":"VariableDeclaration","scope":800,"src":"2069:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"},"typeName":{"id":765,"nodeType":"UserDefinedTypeName","pathNode":{"id":764,"name":"TournamentType","nameLocations":["2069:14:8"],"nodeType":"IdentifierPath","referencedDeclaration":752,"src":"2069:14:8"},"referencedDeclaration":752,"src":"2069:14:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"}},"visibility":"internal"},{"constant":false,"id":769,"mutability":"mutable","name":"status","nameLocation":"2126:6:8","nodeType":"VariableDeclaration","scope":800,"src":"2109:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"},"typeName":{"id":768,"nodeType":"UserDefinedTypeName","pathNode":{"id":767,"name":"TournamentStatus","nameLocations":["2109:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":746,"src":"2109:16:8"},"referencedDeclaration":746,"src":"2109:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"visibility":"internal"},{"constant":false,"id":771,"mutability":"mutable","name":"entryFee","nameLocation":"2151:8:8","nodeType":"VariableDeclaration","scope":800,"src":"2143:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":770,"name":"uint256","nodeType":"ElementaryTypeName","src":"2143:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":773,"mutability":"mutable","name":"prizePool","nameLocation":"2178:9:8","nodeType":"VariableDeclaration","scope":800,"src":"2170:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":772,"name":"uint256","nodeType":"ElementaryTypeName","src":"2170:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":775,"mutability":"mutable","name":"maxPlayers","nameLocation":"2206:10:8","nodeType":"VariableDeclaration","scope":800,"src":"2198:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":774,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":777,"mutability":"mutable","name":"currentPlayers","nameLocation":"2235:14:8","nodeType":"VariableDeclaration","scope":800,"src":"2227:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"2227:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":779,"mutability":"mutable","name":"startTime","nameLocation":"2268:9:8","nodeType":"VariableDeclaration","scope":800,"src":"2260:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":778,"name":"uint256","nodeType":"ElementaryTypeName","src":"2260:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":781,"mutability":"mutable","name":"endTime","nameLocation":"2296:7:8","nodeType":"VariableDeclaration","scope":800,"src":"2288:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":780,"name":"uint256","nodeType":"ElementaryTypeName","src":"2288:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":783,"mutability":"mutable","name":"organizer","nameLocation":"2322:9:8","nodeType":"VariableDeclaration","scope":800,"src":"2314:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":782,"name":"address","nodeType":"ElementaryTypeName","src":"2314:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":786,"mutability":"mutable","name":"players","nameLocation":"2352:7:8","nodeType":"VariableDeclaration","scope":800,"src":"2342:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":784,"name":"address","nodeType":"ElementaryTypeName","src":"2342:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":785,"nodeType":"ArrayTypeName","src":"2342:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":789,"mutability":"mutable","name":"matchIds","nameLocation":"2380:8:8","nodeType":"VariableDeclaration","scope":800,"src":"2370:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":787,"name":"uint256","nodeType":"ElementaryTypeName","src":"2370:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":788,"nodeType":"ArrayTypeName","src":"2370:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":794,"mutability":"mutable","name":"playerStats","nameLocation":"2431:11:8","nodeType":"VariableDeclaration","scope":800,"src":"2399:43:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PlayerStats_$815_storage_$","typeString":"mapping(address => struct GamingTournament.PlayerStats)"},"typeName":{"id":793,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":790,"name":"address","nodeType":"ElementaryTypeName","src":"2407:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2399:31:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PlayerStats_$815_storage_$","typeString":"mapping(address => struct GamingTournament.PlayerStats)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":792,"nodeType":"UserDefinedTypeName","pathNode":{"id":791,"name":"PlayerStats","nameLocations":["2418:11:8"],"nodeType":"IdentifierPath","referencedDeclaration":815,"src":"2418:11:8"},"referencedDeclaration":815,"src":"2418:11:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage_ptr","typeString":"struct GamingTournament.PlayerStats"}}},"visibility":"internal"},{"constant":false,"id":799,"mutability":"mutable","name":"matches","nameLocation":"2479:7:8","nodeType":"VariableDeclaration","scope":800,"src":"2453:33:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Match_$841_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Match)"},"typeName":{"id":798,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":795,"name":"uint256","nodeType":"ElementaryTypeName","src":"2461:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2453:25:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Match_$841_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Match)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":797,"nodeType":"UserDefinedTypeName","pathNode":{"id":796,"name":"Match","nameLocations":["2472:5:8"],"nodeType":"IdentifierPath","referencedDeclaration":841,"src":"2472:5:8"},"referencedDeclaration":841,"src":"2472:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match"}}},"visibility":"internal"}],"name":"Tournament","nameLocation":"1965:10:8","nodeType":"StructDefinition","scope":2647,"src":"1958:536:8","visibility":"public"},{"canonicalName":"GamingTournament.PlayerStats","id":815,"members":[{"constant":false,"id":802,"mutability":"mutable","name":"wins","nameLocation":"2544:4:8","nodeType":"VariableDeclaration","scope":815,"src":"2536:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":801,"name":"uint256","nodeType":"ElementaryTypeName","src":"2536:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":804,"mutability":"mutable","name":"losses","nameLocation":"2567:6:8","nodeType":"VariableDeclaration","scope":815,"src":"2559:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":803,"name":"uint256","nodeType":"ElementaryTypeName","src":"2559:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":806,"mutability":"mutable","name":"draws","nameLocation":"2592:5:8","nodeType":"VariableDeclaration","scope":815,"src":"2584:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":805,"name":"uint256","nodeType":"ElementaryTypeName","src":"2584:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":808,"mutability":"mutable","name":"totalScore","nameLocation":"2616:10:8","nodeType":"VariableDeclaration","scope":815,"src":"2608:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":807,"name":"uint256","nodeType":"ElementaryTypeName","src":"2608:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":810,"mutability":"mutable","name":"rank","nameLocation":"2645:4:8","nodeType":"VariableDeclaration","scope":815,"src":"2637:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":809,"name":"uint256","nodeType":"ElementaryTypeName","src":"2637:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":812,"mutability":"mutable","name":"isEliminated","nameLocation":"2665:12:8","nodeType":"VariableDeclaration","scope":815,"src":"2660:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":811,"name":"bool","nodeType":"ElementaryTypeName","src":"2660:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":814,"mutability":"mutable","name":"lastMatchTime","nameLocation":"2696:13:8","nodeType":"VariableDeclaration","scope":815,"src":"2688:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":813,"name":"uint256","nodeType":"ElementaryTypeName","src":"2688:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"PlayerStats","nameLocation":"2513:11:8","nodeType":"StructDefinition","scope":2647,"src":"2506:211:8","visibility":"public"},{"canonicalName":"GamingTournament.Match","id":841,"members":[{"constant":false,"id":817,"mutability":"mutable","name":"matchId","nameLocation":"2761:7:8","nodeType":"VariableDeclaration","scope":841,"src":"2753:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":816,"name":"uint256","nodeType":"ElementaryTypeName","src":"2753:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":819,"mutability":"mutable","name":"tournamentId","nameLocation":"2787:12:8","nodeType":"VariableDeclaration","scope":841,"src":"2779:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":818,"name":"uint256","nodeType":"ElementaryTypeName","src":"2779:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":821,"mutability":"mutable","name":"player1","nameLocation":"2818:7:8","nodeType":"VariableDeclaration","scope":841,"src":"2810:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":820,"name":"address","nodeType":"ElementaryTypeName","src":"2810:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":823,"mutability":"mutable","name":"player2","nameLocation":"2844:7:8","nodeType":"VariableDeclaration","scope":841,"src":"2836:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":822,"name":"address","nodeType":"ElementaryTypeName","src":"2836:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":825,"mutability":"mutable","name":"winner","nameLocation":"2870:6:8","nodeType":"VariableDeclaration","scope":841,"src":"2862:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":824,"name":"address","nodeType":"ElementaryTypeName","src":"2862:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":828,"mutability":"mutable","name":"status","nameLocation":"2899:6:8","nodeType":"VariableDeclaration","scope":841,"src":"2887:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"},"typeName":{"id":827,"nodeType":"UserDefinedTypeName","pathNode":{"id":826,"name":"MatchStatus","nameLocations":["2887:11:8"],"nodeType":"IdentifierPath","referencedDeclaration":757,"src":"2887:11:8"},"referencedDeclaration":757,"src":"2887:11:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"visibility":"internal"},{"constant":false,"id":830,"mutability":"mutable","name":"startTime","nameLocation":"2924:9:8","nodeType":"VariableDeclaration","scope":841,"src":"2916:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":829,"name":"uint256","nodeType":"ElementaryTypeName","src":"2916:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":832,"mutability":"mutable","name":"endTime","nameLocation":"2952:7:8","nodeType":"VariableDeclaration","scope":841,"src":"2944:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":831,"name":"uint256","nodeType":"ElementaryTypeName","src":"2944:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":834,"mutability":"mutable","name":"player1Score","nameLocation":"2978:12:8","nodeType":"VariableDeclaration","scope":841,"src":"2970:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":833,"name":"uint256","nodeType":"ElementaryTypeName","src":"2970:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":836,"mutability":"mutable","name":"player2Score","nameLocation":"3009:12:8","nodeType":"VariableDeclaration","scope":841,"src":"3001:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":835,"name":"uint256","nodeType":"ElementaryTypeName","src":"3001:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":838,"mutability":"mutable","name":"gameData","nameLocation":"3039:8:8","nodeType":"VariableDeclaration","scope":841,"src":"3032:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":837,"name":"string","nodeType":"ElementaryTypeName","src":"3032:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":840,"mutability":"mutable","name":"isBye","nameLocation":"3063:5:8","nodeType":"VariableDeclaration","scope":841,"src":"3058:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":839,"name":"bool","nodeType":"ElementaryTypeName","src":"3058:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Match","nameLocation":"2736:5:8","nodeType":"StructDefinition","scope":2647,"src":"2729:347:8","visibility":"public"},{"canonicalName":"GamingTournament.PrizeDistribution","id":851,"members":[{"constant":false,"id":843,"mutability":"mutable","name":"firstPlace","nameLocation":"3132:10:8","nodeType":"VariableDeclaration","scope":851,"src":"3124:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":842,"name":"uint256","nodeType":"ElementaryTypeName","src":"3124:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":845,"mutability":"mutable","name":"secondPlace","nameLocation":"3161:11:8","nodeType":"VariableDeclaration","scope":851,"src":"3153:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":844,"name":"uint256","nodeType":"ElementaryTypeName","src":"3153:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":847,"mutability":"mutable","name":"thirdPlace","nameLocation":"3191:10:8","nodeType":"VariableDeclaration","scope":851,"src":"3183:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":846,"name":"uint256","nodeType":"ElementaryTypeName","src":"3183:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":850,"mutability":"mutable","name":"otherPrizes","nameLocation":"3222:11:8","nodeType":"VariableDeclaration","scope":851,"src":"3212:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":848,"name":"uint256","nodeType":"ElementaryTypeName","src":"3212:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":849,"nodeType":"ArrayTypeName","src":"3212:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"name":"PrizeDistribution","nameLocation":"3095:17:8","nodeType":"StructDefinition","scope":2647,"src":"3088:153:8","visibility":"public"},{"constant":false,"functionSelector":"38bd1bc1","id":853,"mutability":"mutable","name":"gdiToken","nameLocation":"3470:8:8","nodeType":"VariableDeclaration","scope":2647,"src":"3455:23:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":852,"name":"address","nodeType":"ElementaryTypeName","src":"3455:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"68ff1b90","id":855,"mutability":"mutable","name":"gamingCore","nameLocation":"3500:10:8","nodeType":"VariableDeclaration","scope":2647,"src":"3485:25:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":854,"name":"address","nodeType":"ElementaryTypeName","src":"3485:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"31b221cd","id":857,"mutability":"mutable","name":"aiOracle","nameLocation":"3532:8:8","nodeType":"VariableDeclaration","scope":2647,"src":"3517:23:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":856,"name":"address","nodeType":"ElementaryTypeName","src":"3517:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"73ed5c1c","id":859,"mutability":"mutable","name":"tournamentCounter","nameLocation":"3568:17:8","nodeType":"VariableDeclaration","scope":2647,"src":"3553:32:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":858,"name":"uint256","nodeType":"ElementaryTypeName","src":"3553:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"01fd1951","id":861,"mutability":"mutable","name":"matchCounter","nameLocation":"3607:12:8","nodeType":"VariableDeclaration","scope":2647,"src":"3592:27:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":860,"name":"uint256","nodeType":"ElementaryTypeName","src":"3592:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"5f9f4b9c","id":863,"mutability":"mutable","name":"totalTournaments","nameLocation":"3641:16:8","nodeType":"VariableDeclaration","scope":2647,"src":"3626:31:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":862,"name":"uint256","nodeType":"ElementaryTypeName","src":"3626:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"2a5b1451","id":865,"mutability":"mutable","name":"totalMatches","nameLocation":"3679:12:8","nodeType":"VariableDeclaration","scope":2647,"src":"3664:27:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":864,"name":"uint256","nodeType":"ElementaryTypeName","src":"3664:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"398ab9a7","id":867,"mutability":"mutable","name":"totalPrizePool","nameLocation":"3713:14:8","nodeType":"VariableDeclaration","scope":2647,"src":"3698:29:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":866,"name":"uint256","nodeType":"ElementaryTypeName","src":"3698:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"7503e1b7","id":872,"mutability":"mutable","name":"tournaments","nameLocation":"3778:11:8","nodeType":"VariableDeclaration","scope":2647,"src":"3740:49:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Tournament_$800_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Tournament)"},"typeName":{"id":871,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":868,"name":"uint256","nodeType":"ElementaryTypeName","src":"3748:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"3740:30:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Tournament_$800_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Tournament)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":870,"nodeType":"UserDefinedTypeName","pathNode":{"id":869,"name":"Tournament","nameLocations":["3759:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":800,"src":"3759:10:8"},"referencedDeclaration":800,"src":"3759:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"}}},"visibility":"public"},{"constant":false,"functionSelector":"4768d4ef","id":877,"mutability":"mutable","name":"matches","nameLocation":"3829:7:8","nodeType":"VariableDeclaration","scope":2647,"src":"3796:40:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Match_$841_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Match)"},"typeName":{"id":876,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":873,"name":"uint256","nodeType":"ElementaryTypeName","src":"3804:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"3796:25:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Match_$841_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Match)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":875,"nodeType":"UserDefinedTypeName","pathNode":{"id":874,"name":"Match","nameLocations":["3815:5:8"],"nodeType":"IdentifierPath","referencedDeclaration":841,"src":"3815:5:8"},"referencedDeclaration":841,"src":"3815:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match"}}},"visibility":"public"},{"constant":false,"functionSelector":"e0661275","id":882,"mutability":"mutable","name":"playerTournaments","nameLocation":"3880:17:8","nodeType":"VariableDeclaration","scope":2647,"src":"3843:54:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"typeName":{"id":881,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":878,"name":"address","nodeType":"ElementaryTypeName","src":"3851:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3843:29:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":879,"name":"uint256","nodeType":"ElementaryTypeName","src":"3862:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":880,"nodeType":"ArrayTypeName","src":"3862:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"visibility":"public"},{"constant":false,"functionSelector":"54113330","id":887,"mutability":"mutable","name":"playerMatches","nameLocation":"3941:13:8","nodeType":"VariableDeclaration","scope":2647,"src":"3904:50:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"typeName":{"id":886,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":883,"name":"address","nodeType":"ElementaryTypeName","src":"3912:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3904:29:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":884,"name":"uint256","nodeType":"ElementaryTypeName","src":"3923:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":885,"nodeType":"ArrayTypeName","src":"3923:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"visibility":"public"},{"constant":false,"functionSelector":"26232a2e","id":890,"mutability":"mutable","name":"platformFee","nameLocation":"3982:11:8","nodeType":"VariableDeclaration","scope":2647,"src":"3967:30:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":888,"name":"uint256","nodeType":"ElementaryTypeName","src":"3967:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"35","id":889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3996:1:8","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"visibility":"public"},{"constant":false,"functionSelector":"2ae5a31d","id":893,"mutability":"mutable","name":"organizerFee","nameLocation":"4027:12:8","nodeType":"VariableDeclaration","scope":2647,"src":"4012:32:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":891,"name":"uint256","nodeType":"ElementaryTypeName","src":"4012:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3130","id":892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4042:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"visibility":"public"},{"anonymous":false,"eventSelector":"6cee9b141362bef0916b96422a6c7e1d7dc5f2fffedb1a309647bdbde576ab26","id":908,"name":"TournamentCreated","nameLocation":"4262:17:8","nodeType":"EventDefinition","parameters":{"id":907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":895,"indexed":true,"mutability":"mutable","name":"tournamentId","nameLocation":"4306:12:8","nodeType":"VariableDeclaration","scope":908,"src":"4290:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":894,"name":"uint256","nodeType":"ElementaryTypeName","src":"4290:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":897,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"4336:4:8","nodeType":"VariableDeclaration","scope":908,"src":"4329:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":896,"name":"string","nodeType":"ElementaryTypeName","src":"4329:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":900,"indexed":false,"mutability":"mutable","name":"tournamentType","nameLocation":"4366:14:8","nodeType":"VariableDeclaration","scope":908,"src":"4351:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"},"typeName":{"id":899,"nodeType":"UserDefinedTypeName","pathNode":{"id":898,"name":"TournamentType","nameLocations":["4351:14:8"],"nodeType":"IdentifierPath","referencedDeclaration":752,"src":"4351:14:8"},"referencedDeclaration":752,"src":"4351:14:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"}},"visibility":"internal"},{"constant":false,"id":902,"indexed":false,"mutability":"mutable","name":"entryFee","nameLocation":"4399:8:8","nodeType":"VariableDeclaration","scope":908,"src":"4391:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":901,"name":"uint256","nodeType":"ElementaryTypeName","src":"4391:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":904,"indexed":false,"mutability":"mutable","name":"maxPlayers","nameLocation":"4426:10:8","nodeType":"VariableDeclaration","scope":908,"src":"4418:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":903,"name":"uint256","nodeType":"ElementaryTypeName","src":"4418:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":906,"indexed":true,"mutability":"mutable","name":"organizer","nameLocation":"4463:9:8","nodeType":"VariableDeclaration","scope":908,"src":"4447:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":905,"name":"address","nodeType":"ElementaryTypeName","src":"4447:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4279:200:8"},"src":"4256:224:8"},{"anonymous":false,"eventSelector":"279369079f3ed0a125dda793bfde61237d8d2f679c1345a15ab761c5d7b6135d","id":918,"name":"PlayerRegistered","nameLocation":"4498:16:8","nodeType":"EventDefinition","parameters":{"id":917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":910,"indexed":true,"mutability":"mutable","name":"tournamentId","nameLocation":"4541:12:8","nodeType":"VariableDeclaration","scope":918,"src":"4525:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":909,"name":"uint256","nodeType":"ElementaryTypeName","src":"4525:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":912,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"4580:6:8","nodeType":"VariableDeclaration","scope":918,"src":"4564:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":911,"name":"address","nodeType":"ElementaryTypeName","src":"4564:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":914,"indexed":false,"mutability":"mutable","name":"entryFee","nameLocation":"4605:8:8","nodeType":"VariableDeclaration","scope":918,"src":"4597:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":913,"name":"uint256","nodeType":"ElementaryTypeName","src":"4597:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":916,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"4632:9:8","nodeType":"VariableDeclaration","scope":918,"src":"4624:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":915,"name":"uint256","nodeType":"ElementaryTypeName","src":"4624:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4514:134:8"},"src":"4492:157:8"},{"anonymous":false,"eventSelector":"2b4fbc018be75e6ff98b219698828856ce311122193b11596150e17268e2ee31","id":926,"name":"TournamentStarted","nameLocation":"4667:17:8","nodeType":"EventDefinition","parameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":920,"indexed":true,"mutability":"mutable","name":"tournamentId","nameLocation":"4711:12:8","nodeType":"VariableDeclaration","scope":926,"src":"4695:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":919,"name":"uint256","nodeType":"ElementaryTypeName","src":"4695:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":922,"indexed":false,"mutability":"mutable","name":"startTime","nameLocation":"4742:9:8","nodeType":"VariableDeclaration","scope":926,"src":"4734:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":921,"name":"uint256","nodeType":"ElementaryTypeName","src":"4734:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":924,"indexed":false,"mutability":"mutable","name":"totalPlayers","nameLocation":"4770:12:8","nodeType":"VariableDeclaration","scope":926,"src":"4762:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":923,"name":"uint256","nodeType":"ElementaryTypeName","src":"4762:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4684:105:8"},"src":"4661:129:8"},{"anonymous":false,"eventSelector":"7dfa3731603a731645c7aa2c72bad6ff6445dd8cd95be0db525efc20ae390279","id":938,"name":"MatchCreated","nameLocation":"4808:12:8","nodeType":"EventDefinition","parameters":{"id":937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":928,"indexed":true,"mutability":"mutable","name":"matchId","nameLocation":"4847:7:8","nodeType":"VariableDeclaration","scope":938,"src":"4831:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":927,"name":"uint256","nodeType":"ElementaryTypeName","src":"4831:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":930,"indexed":true,"mutability":"mutable","name":"tournamentId","nameLocation":"4881:12:8","nodeType":"VariableDeclaration","scope":938,"src":"4865:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":929,"name":"uint256","nodeType":"ElementaryTypeName","src":"4865:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":932,"indexed":false,"mutability":"mutable","name":"player1","nameLocation":"4912:7:8","nodeType":"VariableDeclaration","scope":938,"src":"4904:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":931,"name":"address","nodeType":"ElementaryTypeName","src":"4904:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":934,"indexed":false,"mutability":"mutable","name":"player2","nameLocation":"4938:7:8","nodeType":"VariableDeclaration","scope":938,"src":"4930:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":933,"name":"address","nodeType":"ElementaryTypeName","src":"4930:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":936,"indexed":false,"mutability":"mutable","name":"scheduledTime","nameLocation":"4964:13:8","nodeType":"VariableDeclaration","scope":938,"src":"4956:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":935,"name":"uint256","nodeType":"ElementaryTypeName","src":"4956:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4820:164:8"},"src":"4802:183:8"},{"anonymous":false,"eventSelector":"17c8524efa0c839450a898abb8c8e0223f3c38f7995b61e189ed38344772a491","id":950,"name":"MatchCompleted","nameLocation":"5003:14:8","nodeType":"EventDefinition","parameters":{"id":949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":940,"indexed":true,"mutability":"mutable","name":"matchId","nameLocation":"5044:7:8","nodeType":"VariableDeclaration","scope":950,"src":"5028:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":939,"name":"uint256","nodeType":"ElementaryTypeName","src":"5028:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":942,"indexed":true,"mutability":"mutable","name":"winner","nameLocation":"5078:6:8","nodeType":"VariableDeclaration","scope":950,"src":"5062:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":941,"name":"address","nodeType":"ElementaryTypeName","src":"5062:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":944,"indexed":false,"mutability":"mutable","name":"player1Score","nameLocation":"5103:12:8","nodeType":"VariableDeclaration","scope":950,"src":"5095:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":943,"name":"uint256","nodeType":"ElementaryTypeName","src":"5095:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":946,"indexed":false,"mutability":"mutable","name":"player2Score","nameLocation":"5134:12:8","nodeType":"VariableDeclaration","scope":950,"src":"5126:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":945,"name":"uint256","nodeType":"ElementaryTypeName","src":"5126:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":948,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"5165:9:8","nodeType":"VariableDeclaration","scope":950,"src":"5157:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":947,"name":"uint256","nodeType":"ElementaryTypeName","src":"5157:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5017:164:8"},"src":"4997:185:8"},{"anonymous":false,"eventSelector":"b23508f522f6895a5c44e106456cb05b61d4e1539cc9c7a0f09e1baff64378ac","id":960,"name":"TournamentFinished","nameLocation":"5200:18:8","nodeType":"EventDefinition","parameters":{"id":959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":952,"indexed":true,"mutability":"mutable","name":"tournamentId","nameLocation":"5245:12:8","nodeType":"VariableDeclaration","scope":960,"src":"5229:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":951,"name":"uint256","nodeType":"ElementaryTypeName","src":"5229:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":954,"indexed":true,"mutability":"mutable","name":"winner","nameLocation":"5284:6:8","nodeType":"VariableDeclaration","scope":960,"src":"5268:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":953,"name":"address","nodeType":"ElementaryTypeName","src":"5268:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":956,"indexed":false,"mutability":"mutable","name":"prizeAmount","nameLocation":"5309:11:8","nodeType":"VariableDeclaration","scope":960,"src":"5301:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":955,"name":"uint256","nodeType":"ElementaryTypeName","src":"5301:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":958,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"5339:9:8","nodeType":"VariableDeclaration","scope":960,"src":"5331:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":957,"name":"uint256","nodeType":"ElementaryTypeName","src":"5331:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5218:137:8"},"src":"5194:162:8"},{"anonymous":false,"eventSelector":"c0d2773dace20252cd0787cdc7c52fe3633eea19eb0f904ecae1b3a38226ab4c","id":970,"name":"PrizeDistributed","nameLocation":"5374:16:8","nodeType":"EventDefinition","parameters":{"id":969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":962,"indexed":true,"mutability":"mutable","name":"tournamentId","nameLocation":"5417:12:8","nodeType":"VariableDeclaration","scope":970,"src":"5401:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":961,"name":"uint256","nodeType":"ElementaryTypeName","src":"5401:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":964,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"5456:6:8","nodeType":"VariableDeclaration","scope":970,"src":"5440:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":963,"name":"address","nodeType":"ElementaryTypeName","src":"5440:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":966,"indexed":false,"mutability":"mutable","name":"rank","nameLocation":"5481:4:8","nodeType":"VariableDeclaration","scope":970,"src":"5473:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":965,"name":"uint256","nodeType":"ElementaryTypeName","src":"5473:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":968,"indexed":false,"mutability":"mutable","name":"prizeAmount","nameLocation":"5504:11:8","nodeType":"VariableDeclaration","scope":970,"src":"5496:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":967,"name":"uint256","nodeType":"ElementaryTypeName","src":"5496:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5390:132:8"},"src":"5368:155:8"},{"body":{"id":1015,"nodeType":"Block","src":"5838:330:8","statements":[{"expression":{"id":981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":979,"name":"gdiToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"5849:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":980,"name":"_gdiToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"5860:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5849:20:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":982,"nodeType":"ExpressionStatement","src":"5849:20:8"},{"expression":{"id":985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":983,"name":"gamingCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"5880:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":984,"name":"_gamingCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"5893:11:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5880:24:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":986,"nodeType":"ExpressionStatement","src":"5880:24:8"},{"expression":{"id":989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":987,"name":"aiOracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"5915:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":988,"name":"_aiOracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"5926:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5915:20:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":990,"nodeType":"ExpressionStatement","src":"5915:20:8"},{"expression":{"arguments":[{"id":992,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"5967:18:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":993,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5987:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5991:6:8","memberName":"sender","nodeType":"MemberAccess","src":"5987:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":991,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"5956:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5956:42:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":996,"nodeType":"ExpressionStatement","src":"5956:42:8"},{"expression":{"arguments":[{"id":998,"name":"TOURNAMENT_ORGANIZER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"6020:25:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":999,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6047:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6051:6:8","memberName":"sender","nodeType":"MemberAccess","src":"6047:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":997,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"6009:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6009:49:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1002,"nodeType":"ExpressionStatement","src":"6009:49:8"},{"expression":{"arguments":[{"id":1004,"name":"MATCH_REFEREE_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"6080:18:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":1005,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6100:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6104:6:8","memberName":"sender","nodeType":"MemberAccess","src":"6100:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1003,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"6069:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6069:42:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1008,"nodeType":"ExpressionStatement","src":"6069:42:8"},{"expression":{"arguments":[{"id":1010,"name":"EMERGENCY_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"6133:14:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":1011,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6149:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6153:6:8","memberName":"sender","nodeType":"MemberAccess","src":"6149:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1009,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"6122:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6122:38:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1014,"nodeType":"ExpressionStatement","src":"6122:38:8"}]},"id":1016,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":972,"mutability":"mutable","name":"_gdiToken","nameLocation":"5763:9:8","nodeType":"VariableDeclaration","scope":1016,"src":"5755:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":971,"name":"address","nodeType":"ElementaryTypeName","src":"5755:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":974,"mutability":"mutable","name":"_gamingCore","nameLocation":"5791:11:8","nodeType":"VariableDeclaration","scope":1016,"src":"5783:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":973,"name":"address","nodeType":"ElementaryTypeName","src":"5783:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":976,"mutability":"mutable","name":"_aiOracle","nameLocation":"5821:9:8","nodeType":"VariableDeclaration","scope":1016,"src":"5813:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":975,"name":"address","nodeType":"ElementaryTypeName","src":"5813:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5744:93:8"},"returnParameters":{"id":978,"nodeType":"ParameterList","parameters":[],"src":"5838:0:8"},"scope":2647,"src":"5733:435:8","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1190,"nodeType":"Block","src":"7077:1408:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1043,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"7102:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1042,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7096:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1041,"name":"bytes","nodeType":"ElementaryTypeName","src":"7096:5:8","typeDescriptions":{}}},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7096:11:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7108:6:8","memberName":"length","nodeType":"MemberAccess","src":"7096:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7117:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7096:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f75726e616d656e74206e616d65207265717569726564","id":1048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7120:26:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_57366100d79aed0c6570b60bb240e619c16d329edf7fdf74358b9a68ba621821","typeString":"literal_string \"Tournament name required\""},"value":"Tournament name required"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_57366100d79aed0c6570b60bb240e619c16d329edf7fdf74358b9a68ba621821","typeString":"literal_string \"Tournament name required\""}],"id":1040,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7088:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7088:59:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1050,"nodeType":"ExpressionStatement","src":"7088:59:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1052,"name":"maxPlayers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"7166:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1053,"name":"MIN_TOURNAMENT_PLAYERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"7180:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7166:36:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6f2066657720706c6179657273","id":1055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7204:17:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_dac40cff30fde30eff0bd2798b80386558c3691c6da415907571a50bbf85268e","typeString":"literal_string \"Too few players\""},"value":"Too few players"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dac40cff30fde30eff0bd2798b80386558c3691c6da415907571a50bbf85268e","typeString":"literal_string \"Too few players\""}],"id":1051,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7158:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7158:64:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1057,"nodeType":"ExpressionStatement","src":"7158:64:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1059,"name":"maxPlayers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"7241:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1060,"name":"MAX_TOURNAMENT_PLAYERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"7255:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7241:36:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6f206d616e7920706c6179657273","id":1062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7279:18:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_f29f443e52cae79b60359dab0ab13e7ed9806eea26c23967b845d13a110613fa","typeString":"literal_string \"Too many players\""},"value":"Too many players"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f29f443e52cae79b60359dab0ab13e7ed9806eea26c23967b845d13a110613fa","typeString":"literal_string \"Too many players\""}],"id":1058,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7233:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7233:65:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1064,"nodeType":"ExpressionStatement","src":"7233:65:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1066,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"7317:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1067,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"7329:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7335:9:8","memberName":"timestamp","nodeType":"MemberAccess","src":"7329:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7317:27:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53746172742074696d65206d75737420626520696e20667574757265","id":1070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7346:30:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_5e8b0e873d06a66c9c925ccc2b7b49a9f2193d0e8836f9994126e51985936cff","typeString":"literal_string \"Start time must be in future\""},"value":"Start time must be in future"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5e8b0e873d06a66c9c925ccc2b7b49a9f2193d0e8836f9994126e51985936cff","typeString":"literal_string \"Start time must be in future\""}],"id":1065,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7309:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7309:68:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1072,"nodeType":"ExpressionStatement","src":"7309:68:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1074,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"7396:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1075,"name":"MIN_TOURNAMENT_DURATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":739,"src":"7408:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:35:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4475726174696f6e20746f6f2073686f7274","id":1077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7433:20:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_8fe9693803dbd7c75fdfe2f307a91aeeea205020674a2c6880b22f95610e31af","typeString":"literal_string \"Duration too short\""},"value":"Duration too short"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8fe9693803dbd7c75fdfe2f307a91aeeea205020674a2c6880b22f95610e31af","typeString":"literal_string \"Duration too short\""}],"id":1073,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7388:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7388:66:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1079,"nodeType":"ExpressionStatement","src":"7388:66:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1081,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"7473:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1082,"name":"MAX_TOURNAMENT_DURATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"7485:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7473:35:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4475726174696f6e20746f6f206c6f6e67","id":1084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7510:19:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_accb720d67da525cae4330ebe1b8054d658d4084212b0d1122659c69947ddb23","typeString":"literal_string \"Duration too long\""},"value":"Duration too long"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_accb720d67da525cae4330ebe1b8054d658d4084212b0d1122659c69947ddb23","typeString":"literal_string \"Duration too long\""}],"id":1080,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7465:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7465:65:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1086,"nodeType":"ExpressionStatement","src":"7465:65:8"},{"expression":{"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7551:19:8","subExpression":{"id":1087,"name":"tournamentCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"7551:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1089,"nodeType":"ExpressionStatement","src":"7551:19:8"},{"assignments":[1091],"declarations":[{"constant":false,"id":1091,"mutability":"mutable","name":"tournamentId","nameLocation":"7589:12:8","nodeType":"VariableDeclaration","scope":1190,"src":"7581:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1090,"name":"uint256","nodeType":"ElementaryTypeName","src":"7581:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1093,"initialValue":{"id":1092,"name":"tournamentCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"7604:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7581:40:8"},{"assignments":[1096],"declarations":[{"constant":false,"id":1096,"mutability":"mutable","name":"tournament","nameLocation":"7661:10:8","nodeType":"VariableDeclaration","scope":1190,"src":"7642:29:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"},"typeName":{"id":1095,"nodeType":"UserDefinedTypeName","pathNode":{"id":1094,"name":"Tournament","nameLocations":["7642:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":800,"src":"7642:10:8"},"referencedDeclaration":800,"src":"7642:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"}},"visibility":"internal"}],"id":1100,"initialValue":{"baseExpression":{"id":1097,"name":"tournaments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"7674:11:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Tournament_$800_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Tournament storage ref)"}},"id":1099,"indexExpression":{"id":1098,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"7686:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7674:25:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage","typeString":"struct GamingTournament.Tournament storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7642:57:8"},{"expression":{"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1101,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"7710:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1103,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7721:12:8","memberName":"tournamentId","nodeType":"MemberAccess","referencedDeclaration":759,"src":"7710:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1104,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"7736:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7710:38:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1106,"nodeType":"ExpressionStatement","src":"7710:38:8"},{"expression":{"id":1111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1107,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"7759:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1109,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7770:4:8","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":761,"src":"7759:15:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1110,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"7777:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"7759:22:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1112,"nodeType":"ExpressionStatement","src":"7759:22:8"},{"expression":{"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1113,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"7792:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1115,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7803:11:8","memberName":"description","nodeType":"MemberAccess","referencedDeclaration":763,"src":"7792:22:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1116,"name":"description","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"7817:11:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"7792:36:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1118,"nodeType":"ExpressionStatement","src":"7792:36:8"},{"expression":{"id":1123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1119,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"7839:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1121,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7850:14:8","memberName":"tournamentType","nodeType":"MemberAccess","referencedDeclaration":766,"src":"7839:25:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1122,"name":"tournamentType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"7867:14:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"}},"src":"7839:42:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"}},"id":1124,"nodeType":"ExpressionStatement","src":"7839:42:8"},{"expression":{"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1125,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"7892:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1127,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7903:6:8","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":769,"src":"7892:17:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1128,"name":"TournamentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":746,"src":"7912:16:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TournamentStatus_$746_$","typeString":"type(enum GamingTournament.TournamentStatus)"}},"id":1129,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7929:7:8","memberName":"CREATED","nodeType":"MemberAccess","referencedDeclaration":740,"src":"7912:24:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"src":"7892:44:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"id":1131,"nodeType":"ExpressionStatement","src":"7892:44:8"},{"expression":{"id":1136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1132,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"7947:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1134,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7958:8:8","memberName":"entryFee","nodeType":"MemberAccess","referencedDeclaration":771,"src":"7947:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1135,"name":"entryFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"7969:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7947:30:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1137,"nodeType":"ExpressionStatement","src":"7947:30:8"},{"expression":{"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1138,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"7988:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1140,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7999:9:8","memberName":"prizePool","nodeType":"MemberAccess","referencedDeclaration":773,"src":"7988:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8011:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7988:24:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1143,"nodeType":"ExpressionStatement","src":"7988:24:8"},{"expression":{"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1144,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"8023:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1146,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8034:10:8","memberName":"maxPlayers","nodeType":"MemberAccess","referencedDeclaration":775,"src":"8023:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1147,"name":"maxPlayers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"8047:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8023:34:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1149,"nodeType":"ExpressionStatement","src":"8023:34:8"},{"expression":{"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1150,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"8068:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1152,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8079:14:8","memberName":"currentPlayers","nodeType":"MemberAccess","referencedDeclaration":777,"src":"8068:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8096:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8068:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1155,"nodeType":"ExpressionStatement","src":"8068:29:8"},{"expression":{"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1156,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"8108:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1158,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8119:9:8","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":779,"src":"8108:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1159,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"8131:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8108:32:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1161,"nodeType":"ExpressionStatement","src":"8108:32:8"},{"expression":{"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1162,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"8151:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1164,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8162:7:8","memberName":"endTime","nodeType":"MemberAccess","referencedDeclaration":781,"src":"8151:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1165,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"8172:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1166,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"8184:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8172:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8151:41:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1169,"nodeType":"ExpressionStatement","src":"8151:41:8"},{"expression":{"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1170,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"8203:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8214:9:8","memberName":"organizer","nodeType":"MemberAccess","referencedDeclaration":783,"src":"8203:20:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1173,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8226:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8230:6:8","memberName":"sender","nodeType":"MemberAccess","src":"8226:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8203:33:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1176,"nodeType":"ExpressionStatement","src":"8203:33:8"},{"expression":{"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8257:18:8","subExpression":{"id":1177,"name":"totalTournaments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"8257:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1179,"nodeType":"ExpressionStatement","src":"8257:18:8"},{"eventCall":{"arguments":[{"id":1181,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"8333:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1182,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"8360:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1183,"name":"tournamentType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"8379:14:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"}},{"id":1184,"name":"entryFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"8408:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1185,"name":"maxPlayers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"8431:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1186,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8456:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8460:6:8","memberName":"sender","nodeType":"MemberAccess","src":"8456:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1180,"name":"TournamentCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":908,"src":"8301:17:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$_t_enum$_TournamentType_$752_$_t_uint256_$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,string memory,enum GamingTournament.TournamentType,uint256,uint256,address)"}},"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8301:176:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1189,"nodeType":"EmitStatement","src":"8296:181:8"}]},"documentation":{"id":1017,"nodeType":"StructuredDocumentation","src":"6388:375:8","text":" @dev Create a new tournament\n @param name Tournament name\n @param description Tournament description\n @param tournamentType Type of tournament\n @param entryFee Entry fee in GDI tokens\n @param maxPlayers Maximum number of players\n @param startTime Tournament start time\n @param duration Tournament duration"},"functionSelector":"74642a31","id":1191,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1035,"name":"TOURNAMENT_ORGANIZER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"7036:25:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1036,"kind":"modifierInvocation","modifierName":{"id":1034,"name":"onlyRole","nameLocations":["7027:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"7027:8:8"},"nodeType":"ModifierInvocation","src":"7027:35:8"},{"id":1038,"kind":"modifierInvocation","modifierName":{"id":1037,"name":"whenNotPaused","nameLocations":["7063:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":519,"src":"7063:13:8"},"nodeType":"ModifierInvocation","src":"7063:13:8"}],"name":"createTournament","nameLocation":"6778:16:8","nodeType":"FunctionDefinition","parameters":{"id":1033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1019,"mutability":"mutable","name":"name","nameLocation":"6819:4:8","nodeType":"VariableDeclaration","scope":1191,"src":"6805:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1018,"name":"string","nodeType":"ElementaryTypeName","src":"6805:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1021,"mutability":"mutable","name":"description","nameLocation":"6848:11:8","nodeType":"VariableDeclaration","scope":1191,"src":"6834:25:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1020,"name":"string","nodeType":"ElementaryTypeName","src":"6834:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1024,"mutability":"mutable","name":"tournamentType","nameLocation":"6885:14:8","nodeType":"VariableDeclaration","scope":1191,"src":"6870:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"},"typeName":{"id":1023,"nodeType":"UserDefinedTypeName","pathNode":{"id":1022,"name":"TournamentType","nameLocations":["6870:14:8"],"nodeType":"IdentifierPath","referencedDeclaration":752,"src":"6870:14:8"},"referencedDeclaration":752,"src":"6870:14:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"}},"visibility":"internal"},{"constant":false,"id":1026,"mutability":"mutable","name":"entryFee","nameLocation":"6918:8:8","nodeType":"VariableDeclaration","scope":1191,"src":"6910:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1025,"name":"uint256","nodeType":"ElementaryTypeName","src":"6910:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1028,"mutability":"mutable","name":"maxPlayers","nameLocation":"6945:10:8","nodeType":"VariableDeclaration","scope":1191,"src":"6937:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1027,"name":"uint256","nodeType":"ElementaryTypeName","src":"6937:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1030,"mutability":"mutable","name":"startTime","nameLocation":"6974:9:8","nodeType":"VariableDeclaration","scope":1191,"src":"6966:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1029,"name":"uint256","nodeType":"ElementaryTypeName","src":"6966:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1032,"mutability":"mutable","name":"duration","nameLocation":"7002:8:8","nodeType":"VariableDeclaration","scope":1191,"src":"6994:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1031,"name":"uint256","nodeType":"ElementaryTypeName","src":"6994:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6794:223:8"},"returnParameters":{"id":1039,"nodeType":"ParameterList","parameters":[],"src":"7077:0:8"},"scope":2647,"src":"6769:1716:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1325,"nodeType":"Block","src":"8685:1281:8","statements":[{"assignments":[1203],"declarations":[{"constant":false,"id":1203,"mutability":"mutable","name":"tournament","nameLocation":"8715:10:8","nodeType":"VariableDeclaration","scope":1325,"src":"8696:29:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"},"typeName":{"id":1202,"nodeType":"UserDefinedTypeName","pathNode":{"id":1201,"name":"Tournament","nameLocations":["8696:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":800,"src":"8696:10:8"},"referencedDeclaration":800,"src":"8696:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"}},"visibility":"internal"}],"id":1207,"initialValue":{"baseExpression":{"id":1204,"name":"tournaments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"8728:11:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Tournament_$800_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Tournament storage ref)"}},"id":1206,"indexExpression":{"id":1205,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"8740:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8728:25:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage","typeString":"struct GamingTournament.Tournament storage ref"}},"nodeType":"VariableDeclarationStatement","src":"8696:57:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1209,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"8772:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1210,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8783:12:8","memberName":"tournamentId","nodeType":"MemberAccess","referencedDeclaration":759,"src":"8772:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8799:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8772:28:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f75726e616d656e7420646f6573206e6f74206578697374","id":1213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8802:27:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_f4d04e414dcac46933b7f92f18a1d86483abf32ba1f0b1bc4f534183caf2de87","typeString":"literal_string \"Tournament does not exist\""},"value":"Tournament does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f4d04e414dcac46933b7f92f18a1d86483abf32ba1f0b1bc4f534183caf2de87","typeString":"literal_string \"Tournament does not exist\""}],"id":1208,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8764:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8764:66:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1215,"nodeType":"ExpressionStatement","src":"8764:66:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1217,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"8849:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8860:6:8","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":769,"src":"8849:17:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1219,"name":"TournamentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":746,"src":"8870:16:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TournamentStatus_$746_$","typeString":"type(enum GamingTournament.TournamentStatus)"}},"id":1220,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8887:7:8","memberName":"CREATED","nodeType":"MemberAccess","referencedDeclaration":740,"src":"8870:24:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"src":"8849:45:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526567697374726174696f6e206e6f74206f70656e","id":1222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8896:23:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_f76acb686b0feba5b6ccafe482da3e307d9765249a057db04db781c983566574","typeString":"literal_string \"Registration not open\""},"value":"Registration not open"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f76acb686b0feba5b6ccafe482da3e307d9765249a057db04db781c983566574","typeString":"literal_string \"Registration not open\""}],"id":1216,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8841:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8841:79:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1224,"nodeType":"ExpressionStatement","src":"8841:79:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1226,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"8939:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1227,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8950:14:8","memberName":"currentPlayers","nodeType":"MemberAccess","referencedDeclaration":777,"src":"8939:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1228,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"8967:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1229,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8978:10:8","memberName":"maxPlayers","nodeType":"MemberAccess","referencedDeclaration":775,"src":"8967:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8939:49:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f75726e616d656e742066756c6c","id":1231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8990:17:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_e4c9516ae8b9614d1cd88c7982c4c7bcdd329391ac5be8a9dfa235eb5b36f896","typeString":"literal_string \"Tournament full\""},"value":"Tournament full"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e4c9516ae8b9614d1cd88c7982c4c7bcdd329391ac5be8a9dfa235eb5b36f896","typeString":"literal_string \"Tournament full\""}],"id":1225,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8931:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8931:77:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1233,"nodeType":"ExpressionStatement","src":"8931:77:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1235,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"9027:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1236,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9038:7:8","memberName":"players","nodeType":"MemberAccess","referencedDeclaration":786,"src":"9027:18:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9046:6:8","memberName":"length","nodeType":"MemberAccess","src":"9027:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9027:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":1245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9061:45:8","subExpression":{"arguments":[{"id":1241,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"9081:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1242,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9095:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9099:6:8","memberName":"sender","nodeType":"MemberAccess","src":"9095:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1240,"name":"isPlayerRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"9062:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_address_$returns$_t_bool_$","typeString":"function (uint256,address) view returns (bool)"}},"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9062:44:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9027:79:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416c72656164792072656769737465726564","id":1247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9108:20:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_4935f8dc8deae1355305b992e890d0242809a3705c9c83131ed47acca0dd4fe2","typeString":"literal_string \"Already registered\""},"value":"Already registered"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4935f8dc8deae1355305b992e890d0242809a3705c9c83131ed47acca0dd4fe2","typeString":"literal_string \"Already registered\""}],"id":1234,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9019:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9019:110:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1249,"nodeType":"ExpressionStatement","src":"9019:110:8"},{"expression":{"arguments":[{"expression":{"id":1254,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9211:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9215:6:8","memberName":"sender","nodeType":"MemberAccess","src":"9211:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1258,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"9231:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_GamingTournament_$2647","typeString":"contract GamingTournament"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_GamingTournament_$2647","typeString":"contract GamingTournament"}],"id":1257,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9223:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1256,"name":"address","nodeType":"ElementaryTypeName","src":"9223:7:8","typeDescriptions":{}}},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9223:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1260,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"9238:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1261,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9249:8:8","memberName":"entryFee","nodeType":"MemberAccess","referencedDeclaration":771,"src":"9238:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":1251,"name":"gdiToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"9188:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1250,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"9181:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$456_$","typeString":"type(contract IERC20)"}},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9181:16:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$456","typeString":"contract IERC20"}},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9198:12:8","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":455,"src":"9181:29:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9181:77:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1263,"nodeType":"ExpressionStatement","src":"9181:77:8"},{"expression":{"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1264,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"9269:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1266,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9280:9:8","memberName":"prizePool","nodeType":"MemberAccess","referencedDeclaration":773,"src":"9269:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":1267,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"9293:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1268,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9304:8:8","memberName":"entryFee","nodeType":"MemberAccess","referencedDeclaration":771,"src":"9293:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9269:43:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1270,"nodeType":"ExpressionStatement","src":"9269:43:8"},{"expression":{"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1271,"name":"totalPrizePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"9323:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":1272,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"9341:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1273,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9352:8:8","memberName":"entryFee","nodeType":"MemberAccess","referencedDeclaration":771,"src":"9341:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9323:37:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1275,"nodeType":"ExpressionStatement","src":"9323:37:8"},{"expression":{"arguments":[{"expression":{"id":1281,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9442:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9446:6:8","memberName":"sender","nodeType":"MemberAccess","src":"9442:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"expression":{"id":1276,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"9418:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1279,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9429:7:8","memberName":"players","nodeType":"MemberAccess","referencedDeclaration":786,"src":"9418:18:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9437:4:8","memberName":"push","nodeType":"MemberAccess","src":"9418:23:8","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":1283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9418:35:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1284,"nodeType":"ExpressionStatement","src":"9418:35:8"},{"expression":{"id":1288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9464:27:8","subExpression":{"expression":{"id":1285,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"9464:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1287,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9475:14:8","memberName":"currentPlayers","nodeType":"MemberAccess","referencedDeclaration":777,"src":"9464:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1289,"nodeType":"ExpressionStatement","src":"9464:27:8"},{"expression":{"arguments":[{"id":1295,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"9537:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1290,"name":"playerTournaments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":882,"src":"9502:17:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":1293,"indexExpression":{"expression":{"id":1291,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9520:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9524:6:8","memberName":"sender","nodeType":"MemberAccess","src":"9520:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9502:29:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9532:4:8","memberName":"push","nodeType":"MemberAccess","src":"9502:34:8","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9502:48:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1297,"nodeType":"ExpressionStatement","src":"9502:48:8"},{"expression":{"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1298,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"9607:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1302,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9618:11:8","memberName":"playerStats","nodeType":"MemberAccess","referencedDeclaration":794,"src":"9607:22:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PlayerStats_$815_storage_$","typeString":"mapping(address => struct GamingTournament.PlayerStats storage ref)"}},"id":1303,"indexExpression":{"expression":{"id":1300,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9630:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9634:6:8","memberName":"sender","nodeType":"MemberAccess","src":"9630:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9607:34:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage","typeString":"struct GamingTournament.PlayerStats storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":1305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9677:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9701:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9724:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9752:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9774:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"66616c7365","id":1310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9804:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9839:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1304,"name":"PlayerStats","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"9644:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PlayerStats_$815_storage_ptr_$","typeString":"type(struct GamingTournament.PlayerStats storage pointer)"}},"id":1312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["9671:4:8","9693:6:8","9717:5:8","9740:10:8","9768:4:8","9790:12:8","9824:13:8"],"names":["wins","losses","draws","totalScore","rank","isEliminated","lastMatchTime"],"nodeType":"FunctionCall","src":"9644:208:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_memory_ptr","typeString":"struct GamingTournament.PlayerStats memory"}},"src":"9607:245:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage","typeString":"struct GamingTournament.PlayerStats storage ref"}},"id":1314,"nodeType":"ExpressionStatement","src":"9607:245:8"},{"eventCall":{"arguments":[{"id":1316,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"9895:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1317,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9909:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9913:6:8","memberName":"sender","nodeType":"MemberAccess","src":"9909:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1319,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"9921:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1320,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9932:8:8","memberName":"entryFee","nodeType":"MemberAccess","referencedDeclaration":771,"src":"9921:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1321,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"9942:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9948:9:8","memberName":"timestamp","nodeType":"MemberAccess","src":"9942:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1315,"name":"PlayerRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"9878:16:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,address,uint256,uint256)"}},"id":1323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9878:80:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1324,"nodeType":"EmitStatement","src":"9873:85:8"}]},"documentation":{"id":1192,"nodeType":"StructuredDocumentation","src":"8497:93:8","text":" @dev Register for a tournament\n @param tournamentId Tournament ID"},"functionSelector":"334f7deb","id":1326,"implemented":true,"kind":"function","modifiers":[{"id":1197,"kind":"modifierInvocation","modifierName":{"id":1196,"name":"whenNotPaused","nameLocations":["8658:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":519,"src":"8658:13:8"},"nodeType":"ModifierInvocation","src":"8658:13:8"},{"id":1199,"kind":"modifierInvocation","modifierName":{"id":1198,"name":"nonReentrant","nameLocations":["8672:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":627,"src":"8672:12:8"},"nodeType":"ModifierInvocation","src":"8672:12:8"}],"name":"registerForTournament","nameLocation":"8605:21:8","nodeType":"FunctionDefinition","parameters":{"id":1195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1194,"mutability":"mutable","name":"tournamentId","nameLocation":"8635:12:8","nodeType":"VariableDeclaration","scope":1326,"src":"8627:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1193,"name":"uint256","nodeType":"ElementaryTypeName","src":"8627:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8626:22:8"},"returnParameters":{"id":1200,"nodeType":"ParameterList","parameters":[],"src":"8685:0:8"},"scope":2647,"src":"8596:1370:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1397,"nodeType":"Block","src":"10176:722:8","statements":[{"assignments":[1339],"declarations":[{"constant":false,"id":1339,"mutability":"mutable","name":"tournament","nameLocation":"10206:10:8","nodeType":"VariableDeclaration","scope":1397,"src":"10187:29:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"},"typeName":{"id":1338,"nodeType":"UserDefinedTypeName","pathNode":{"id":1337,"name":"Tournament","nameLocations":["10187:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":800,"src":"10187:10:8"},"referencedDeclaration":800,"src":"10187:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"}},"visibility":"internal"}],"id":1343,"initialValue":{"baseExpression":{"id":1340,"name":"tournaments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"10219:11:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Tournament_$800_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Tournament storage ref)"}},"id":1342,"indexExpression":{"id":1341,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"10231:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10219:25:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage","typeString":"struct GamingTournament.Tournament storage ref"}},"nodeType":"VariableDeclarationStatement","src":"10187:57:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1345,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10263:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1346,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10274:12:8","memberName":"tournamentId","nodeType":"MemberAccess","referencedDeclaration":759,"src":"10263:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10290:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10263:28:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f75726e616d656e7420646f6573206e6f74206578697374","id":1349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10293:27:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_f4d04e414dcac46933b7f92f18a1d86483abf32ba1f0b1bc4f534183caf2de87","typeString":"literal_string \"Tournament does not exist\""},"value":"Tournament does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f4d04e414dcac46933b7f92f18a1d86483abf32ba1f0b1bc4f534183caf2de87","typeString":"literal_string \"Tournament does not exist\""}],"id":1344,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10255:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10255:66:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1351,"nodeType":"ExpressionStatement","src":"10255:66:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"},"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1353,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10340:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1354,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10351:6:8","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":769,"src":"10340:17:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1355,"name":"TournamentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":746,"src":"10361:16:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TournamentStatus_$746_$","typeString":"type(enum GamingTournament.TournamentStatus)"}},"id":1356,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10378:7:8","memberName":"CREATED","nodeType":"MemberAccess","referencedDeclaration":740,"src":"10361:24:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"src":"10340:45:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f75726e616d656e7420616c72656164792073746172746564","id":1358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10387:28:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_1321ee80734dc3a9c29a4459f3ed04b4579dc79967c1afb509fbd6602a6068d3","typeString":"literal_string \"Tournament already started\""},"value":"Tournament already started"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1321ee80734dc3a9c29a4459f3ed04b4579dc79967c1afb509fbd6602a6068d3","typeString":"literal_string \"Tournament already started\""}],"id":1352,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10332:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10332:84:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1360,"nodeType":"ExpressionStatement","src":"10332:84:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1362,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10435:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1363,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10446:14:8","memberName":"currentPlayers","nodeType":"MemberAccess","referencedDeclaration":777,"src":"10435:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1364,"name":"MIN_TOURNAMENT_PLAYERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"10464:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10435:51:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420656e6f75676820706c6179657273","id":1366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10488:20:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_543cde6d57481e61eff19dce080efaaf31452fee1732d8dfc4ed801d034e0f39","typeString":"literal_string \"Not enough players\""},"value":"Not enough players"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_543cde6d57481e61eff19dce080efaaf31452fee1732d8dfc4ed801d034e0f39","typeString":"literal_string \"Not enough players\""}],"id":1361,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10427:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10427:82:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1368,"nodeType":"ExpressionStatement","src":"10427:82:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1370,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10528:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10534:9:8","memberName":"timestamp","nodeType":"MemberAccess","src":"10528:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":1372,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10547:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1373,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10558:9:8","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":779,"src":"10547:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10528:39:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f75726e616d656e74206e6f7420726561647920746f207374617274","id":1375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10569:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e30e56ae3e2e45a3f03900f03dfa17dc9560ee95d9281e66ce5e9678f2c9cc7","typeString":"literal_string \"Tournament not ready to start\""},"value":"Tournament not ready to start"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8e30e56ae3e2e45a3f03900f03dfa17dc9560ee95d9281e66ce5e9678f2c9cc7","typeString":"literal_string \"Tournament not ready to start\""}],"id":1369,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10520:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10520:81:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1377,"nodeType":"ExpressionStatement","src":"10520:81:8"},{"expression":{"id":1383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1378,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10622:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1380,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"10633:6:8","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":769,"src":"10622:17:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1381,"name":"TournamentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":746,"src":"10642:16:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TournamentStatus_$746_$","typeString":"type(enum GamingTournament.TournamentStatus)"}},"id":1382,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10659:11:8","memberName":"IN_PROGRESS","nodeType":"MemberAccess","referencedDeclaration":743,"src":"10642:28:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"src":"10622:48:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"id":1384,"nodeType":"ExpressionStatement","src":"10622:48:8"},{"expression":{"arguments":[{"id":1386,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"10776:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1385,"name":"generateInitialMatches","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"10753:22:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10753:36:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1388,"nodeType":"ExpressionStatement","src":"10753:36:8"},{"eventCall":{"arguments":[{"id":1390,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"10833:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1391,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10847:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10853:9:8","memberName":"timestamp","nodeType":"MemberAccess","src":"10847:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1393,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10864:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1394,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10875:14:8","memberName":"currentPlayers","nodeType":"MemberAccess","referencedDeclaration":777,"src":"10864:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1389,"name":"TournamentStarted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"10815:17:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256)"}},"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10815:75:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1396,"nodeType":"EmitStatement","src":"10810:80:8"}]},"documentation":{"id":1327,"nodeType":"StructuredDocumentation","src":"9978:86:8","text":" @dev Start a tournament\n @param tournamentId Tournament ID"},"functionSelector":"651ea943","id":1398,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1332,"name":"TOURNAMENT_ORGANIZER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"10135:25:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1333,"kind":"modifierInvocation","modifierName":{"id":1331,"name":"onlyRole","nameLocations":["10126:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"10126:8:8"},"nodeType":"ModifierInvocation","src":"10126:35:8"},{"id":1335,"kind":"modifierInvocation","modifierName":{"id":1334,"name":"whenNotPaused","nameLocations":["10162:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":519,"src":"10162:13:8"},"nodeType":"ModifierInvocation","src":"10162:13:8"}],"name":"startTournament","nameLocation":"10079:15:8","nodeType":"FunctionDefinition","parameters":{"id":1330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1329,"mutability":"mutable","name":"tournamentId","nameLocation":"10103:12:8","nodeType":"VariableDeclaration","scope":1398,"src":"10095:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1328,"name":"uint256","nodeType":"ElementaryTypeName","src":"10095:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10094:22:8"},"returnParameters":{"id":1336,"nodeType":"ParameterList","parameters":[],"src":"10176:0:8"},"scope":2647,"src":"10070:828:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1547,"nodeType":"Block","src":"11512:1194:8","statements":[{"assignments":[1412],"declarations":[{"constant":false,"id":1412,"mutability":"mutable","name":"tournament","nameLocation":"11542:10:8","nodeType":"VariableDeclaration","scope":1547,"src":"11523:29:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"},"typeName":{"id":1411,"nodeType":"UserDefinedTypeName","pathNode":{"id":1410,"name":"Tournament","nameLocations":["11523:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":800,"src":"11523:10:8"},"referencedDeclaration":800,"src":"11523:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"}},"visibility":"internal"}],"id":1416,"initialValue":{"baseExpression":{"id":1413,"name":"tournaments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"11555:11:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Tournament_$800_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Tournament storage ref)"}},"id":1415,"indexExpression":{"id":1414,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"11567:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11555:25:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage","typeString":"struct GamingTournament.Tournament storage ref"}},"nodeType":"VariableDeclarationStatement","src":"11523:57:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1418,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"11599:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1419,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11610:12:8","memberName":"tournamentId","nodeType":"MemberAccess","referencedDeclaration":759,"src":"11599:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11626:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11599:28:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f75726e616d656e7420646f6573206e6f74206578697374","id":1422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11629:27:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_f4d04e414dcac46933b7f92f18a1d86483abf32ba1f0b1bc4f534183caf2de87","typeString":"literal_string \"Tournament does not exist\""},"value":"Tournament does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f4d04e414dcac46933b7f92f18a1d86483abf32ba1f0b1bc4f534183caf2de87","typeString":"literal_string \"Tournament does not exist\""}],"id":1417,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11591:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11591:66:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1424,"nodeType":"ExpressionStatement","src":"11591:66:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1426,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"11676:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1427,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11687:6:8","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":769,"src":"11676:17:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1428,"name":"TournamentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":746,"src":"11697:16:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TournamentStatus_$746_$","typeString":"type(enum GamingTournament.TournamentStatus)"}},"id":1429,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11714:11:8","memberName":"IN_PROGRESS","nodeType":"MemberAccess","referencedDeclaration":743,"src":"11697:28:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"src":"11676:49:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f75726e616d656e74206e6f7420696e2070726f6772657373","id":1431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11727:28:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_46d13cdaed187d1c60ea2c1b1e2535cfe5dea215585c4fad8ad453565a41b2c7","typeString":"literal_string \"Tournament not in progress\""},"value":"Tournament not in progress"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_46d13cdaed187d1c60ea2c1b1e2535cfe5dea215585c4fad8ad453565a41b2c7","typeString":"literal_string \"Tournament not in progress\""}],"id":1425,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11668:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11668:88:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1433,"nodeType":"ExpressionStatement","src":"11668:88:8"},{"expression":{"arguments":[{"arguments":[{"id":1436,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"11794:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1437,"name":"player1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"11808:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1435,"name":"isPlayerRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"11775:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_address_$returns$_t_bool_$","typeString":"function (uint256,address) view returns (bool)"}},"id":1438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11775:41:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506c617965722031206e6f742072656769737465726564","id":1439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11818:25:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_9238d99b66df36c12283c13cbbba6fa34a0312a632cacd479158f82dd75a5576","typeString":"literal_string \"Player 1 not registered\""},"value":"Player 1 not registered"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9238d99b66df36c12283c13cbbba6fa34a0312a632cacd479158f82dd75a5576","typeString":"literal_string \"Player 1 not registered\""}],"id":1434,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11767:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11767:77:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1441,"nodeType":"ExpressionStatement","src":"11767:77:8"},{"expression":{"arguments":[{"arguments":[{"id":1444,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"11882:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1445,"name":"player2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"11896:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1443,"name":"isPlayerRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"11863:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_address_$returns$_t_bool_$","typeString":"function (uint256,address) view returns (bool)"}},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11863:41:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506c617965722032206e6f742072656769737465726564","id":1447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11906:25:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_f83d8d615839c896ee309212d7a36aaaa8b45a3df4c2d888c2cff24517f06ac0","typeString":"literal_string \"Player 2 not registered\""},"value":"Player 2 not registered"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f83d8d615839c896ee309212d7a36aaaa8b45a3df4c2d888c2cff24517f06ac0","typeString":"literal_string \"Player 2 not registered\""}],"id":1442,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11855:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11855:77:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1449,"nodeType":"ExpressionStatement","src":"11855:77:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1451,"name":"player1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"11951:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1452,"name":"player2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"11962:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11951:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506c6179657273206d75737420626520646966666572656e74","id":1454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11971:27:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_f08c07d7dc7f803f9476883b99ea60f6ba5b694a038a1aa28e900a393cf6f67d","typeString":"literal_string \"Players must be different\""},"value":"Players must be different"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f08c07d7dc7f803f9476883b99ea60f6ba5b694a038a1aa28e900a393cf6f67d","typeString":"literal_string \"Players must be different\""}],"id":1450,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11943:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11943:56:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1456,"nodeType":"ExpressionStatement","src":"11943:56:8"},{"expression":{"id":1458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"12020:14:8","subExpression":{"id":1457,"name":"matchCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"12020:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1459,"nodeType":"ExpressionStatement","src":"12020:14:8"},{"assignments":[1461],"declarations":[{"constant":false,"id":1461,"mutability":"mutable","name":"matchId","nameLocation":"12053:7:8","nodeType":"VariableDeclaration","scope":1547,"src":"12045:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1460,"name":"uint256","nodeType":"ElementaryTypeName","src":"12045:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1463,"initialValue":{"id":1462,"name":"matchCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"12063:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12045:30:8"},{"assignments":[1466],"declarations":[{"constant":false,"id":1466,"mutability":"mutable","name":"matchData","nameLocation":"12110:9:8","nodeType":"VariableDeclaration","scope":1547,"src":"12096:23:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match"},"typeName":{"id":1465,"nodeType":"UserDefinedTypeName","pathNode":{"id":1464,"name":"Match","nameLocations":["12096:5:8"],"nodeType":"IdentifierPath","referencedDeclaration":841,"src":"12096:5:8"},"referencedDeclaration":841,"src":"12096:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match"}},"visibility":"internal"}],"id":1470,"initialValue":{"baseExpression":{"id":1467,"name":"matches","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"12122:7:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Match_$841_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Match storage ref)"}},"id":1469,"indexExpression":{"id":1468,"name":"matchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"12130:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12122:16:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage","typeString":"struct GamingTournament.Match storage ref"}},"nodeType":"VariableDeclarationStatement","src":"12096:42:8"},{"expression":{"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1471,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"12149:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1473,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12159:7:8","memberName":"matchId","nodeType":"MemberAccess","referencedDeclaration":817,"src":"12149:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1474,"name":"matchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"12169:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12149:27:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1476,"nodeType":"ExpressionStatement","src":"12149:27:8"},{"expression":{"id":1481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1477,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"12187:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12197:12:8","memberName":"tournamentId","nodeType":"MemberAccess","referencedDeclaration":819,"src":"12187:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1480,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"12212:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12187:37:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1482,"nodeType":"ExpressionStatement","src":"12187:37:8"},{"expression":{"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1483,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"12235:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1485,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12245:7:8","memberName":"player1","nodeType":"MemberAccess","referencedDeclaration":821,"src":"12235:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1486,"name":"player1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"12255:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12235:27:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1488,"nodeType":"ExpressionStatement","src":"12235:27:8"},{"expression":{"id":1493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1489,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"12273:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1491,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12283:7:8","memberName":"player2","nodeType":"MemberAccess","referencedDeclaration":823,"src":"12273:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1492,"name":"player2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"12293:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12273:27:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1494,"nodeType":"ExpressionStatement","src":"12273:27:8"},{"expression":{"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1495,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"12311:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1497,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12321:6:8","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":828,"src":"12311:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1498,"name":"MatchStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"12330:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MatchStatus_$757_$","typeString":"type(enum GamingTournament.MatchStatus)"}},"id":1499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12342:9:8","memberName":"SCHEDULED","nodeType":"MemberAccess","referencedDeclaration":753,"src":"12330:21:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"src":"12311:40:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"id":1501,"nodeType":"ExpressionStatement","src":"12311:40:8"},{"expression":{"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1502,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"12362:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1504,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12372:9:8","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":830,"src":"12362:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1505,"name":"scheduledTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"12384:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12362:35:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1507,"nodeType":"ExpressionStatement","src":"12362:35:8"},{"expression":{"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1508,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"12408:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1510,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12418:5:8","memberName":"isBye","nodeType":"MemberAccess","referencedDeclaration":840,"src":"12408:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12426:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"12408:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1513,"nodeType":"ExpressionStatement","src":"12408:23:8"},{"expression":{"arguments":[{"id":1519,"name":"matchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"12477:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":1514,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"12452:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1517,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12463:8:8","memberName":"matchIds","nodeType":"MemberAccess","referencedDeclaration":789,"src":"12452:19:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12472:4:8","memberName":"push","nodeType":"MemberAccess","src":"12452:24:8","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12452:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1521,"nodeType":"ExpressionStatement","src":"12452:33:8"},{"expression":{"arguments":[{"id":1526,"name":"matchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"12524:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1522,"name":"playerMatches","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"12496:13:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":1524,"indexExpression":{"id":1523,"name":"player1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"12510:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12496:22:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12519:4:8","memberName":"push","nodeType":"MemberAccess","src":"12496:27:8","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12496:36:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1528,"nodeType":"ExpressionStatement","src":"12496:36:8"},{"expression":{"arguments":[{"id":1533,"name":"matchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"12571:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1529,"name":"playerMatches","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"12543:13:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":1531,"indexExpression":{"id":1530,"name":"player2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"12557:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12543:22:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12566:4:8","memberName":"push","nodeType":"MemberAccess","src":"12543:27:8","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12543:36:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1535,"nodeType":"ExpressionStatement","src":"12543:36:8"},{"expression":{"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"12590:14:8","subExpression":{"id":1536,"name":"totalMatches","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"12590:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1538,"nodeType":"ExpressionStatement","src":"12590:14:8"},{"eventCall":{"arguments":[{"id":1540,"name":"matchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"12643:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1541,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"12652:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1542,"name":"player1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"12666:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1543,"name":"player2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"12675:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1544,"name":"scheduledTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"12684:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1539,"name":"MatchCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"12630:12:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,address,address,uint256)"}},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12630:68:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1546,"nodeType":"EmitStatement","src":"12625:73:8"}]},"documentation":{"id":1399,"nodeType":"StructuredDocumentation","src":"11113:241:8","text":" @dev Create a match between two players\n @param tournamentId Tournament ID\n @param player1 First player address\n @param player2 Second player address\n @param scheduledTime Scheduled match time"},"id":1548,"implemented":true,"kind":"function","modifiers":[],"name":"createMatch","nameLocation":"11369:11:8","nodeType":"FunctionDefinition","parameters":{"id":1408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1401,"mutability":"mutable","name":"tournamentId","nameLocation":"11399:12:8","nodeType":"VariableDeclaration","scope":1548,"src":"11391:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1400,"name":"uint256","nodeType":"ElementaryTypeName","src":"11391:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1403,"mutability":"mutable","name":"player1","nameLocation":"11430:7:8","nodeType":"VariableDeclaration","scope":1548,"src":"11422:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1402,"name":"address","nodeType":"ElementaryTypeName","src":"11422:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1405,"mutability":"mutable","name":"player2","nameLocation":"11456:7:8","nodeType":"VariableDeclaration","scope":1548,"src":"11448:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1404,"name":"address","nodeType":"ElementaryTypeName","src":"11448:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1407,"mutability":"mutable","name":"scheduledTime","nameLocation":"11482:13:8","nodeType":"VariableDeclaration","scope":1548,"src":"11474:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1406,"name":"uint256","nodeType":"ElementaryTypeName","src":"11474:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11380:122:8"},"returnParameters":{"id":1409,"nodeType":"ParameterList","parameters":[],"src":"11512:0:8"},"scope":2647,"src":"11360:1346:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1572,"nodeType":"Block","src":"13185:77:8","statements":[{"expression":{"arguments":[{"id":1566,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"13208:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1567,"name":"player1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"13222:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1568,"name":"player2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"13231:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1569,"name":"scheduledTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1557,"src":"13240:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1565,"name":"createMatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"13196:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint256,address,address,uint256)"}},"id":1570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13196:58:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1571,"nodeType":"ExpressionStatement","src":"13196:58:8"}]},"documentation":{"id":1549,"nodeType":"StructuredDocumentation","src":"12718:260:8","text":" @dev Create a match between two players (public interface)\n @param tournamentId Tournament ID\n @param player1 First player address\n @param player2 Second player address\n @param scheduledTime Scheduled match time"},"functionSelector":"54d82b21","id":1573,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1560,"name":"MATCH_REFEREE_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"13151:18:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1561,"kind":"modifierInvocation","modifierName":{"id":1559,"name":"onlyRole","nameLocations":["13142:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"13142:8:8"},"nodeType":"ModifierInvocation","src":"13142:28:8"},{"id":1563,"kind":"modifierInvocation","modifierName":{"id":1562,"name":"whenNotPaused","nameLocations":["13171:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":519,"src":"13171:13:8"},"nodeType":"ModifierInvocation","src":"13171:13:8"}],"name":"createMatchPublic","nameLocation":"12993:17:8","nodeType":"FunctionDefinition","parameters":{"id":1558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1551,"mutability":"mutable","name":"tournamentId","nameLocation":"13029:12:8","nodeType":"VariableDeclaration","scope":1573,"src":"13021:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1550,"name":"uint256","nodeType":"ElementaryTypeName","src":"13021:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1553,"mutability":"mutable","name":"player1","nameLocation":"13060:7:8","nodeType":"VariableDeclaration","scope":1573,"src":"13052:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1552,"name":"address","nodeType":"ElementaryTypeName","src":"13052:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1555,"mutability":"mutable","name":"player2","nameLocation":"13086:7:8","nodeType":"VariableDeclaration","scope":1573,"src":"13078:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1554,"name":"address","nodeType":"ElementaryTypeName","src":"13078:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1557,"mutability":"mutable","name":"scheduledTime","nameLocation":"13112:13:8","nodeType":"VariableDeclaration","scope":1573,"src":"13104:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1556,"name":"uint256","nodeType":"ElementaryTypeName","src":"13104:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13010:122:8"},"returnParameters":{"id":1564,"nodeType":"ParameterList","parameters":[],"src":"13185:0:8"},"scope":2647,"src":"12984:278:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1806,"nodeType":"Block","src":"13763:1741:8","statements":[{"assignments":[1594],"declarations":[{"constant":false,"id":1594,"mutability":"mutable","name":"matchData","nameLocation":"13788:9:8","nodeType":"VariableDeclaration","scope":1806,"src":"13774:23:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match"},"typeName":{"id":1593,"nodeType":"UserDefinedTypeName","pathNode":{"id":1592,"name":"Match","nameLocations":["13774:5:8"],"nodeType":"IdentifierPath","referencedDeclaration":841,"src":"13774:5:8"},"referencedDeclaration":841,"src":"13774:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match"}},"visibility":"internal"}],"id":1598,"initialValue":{"baseExpression":{"id":1595,"name":"matches","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"13800:7:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Match_$841_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Match storage ref)"}},"id":1597,"indexExpression":{"id":1596,"name":"matchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"13808:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13800:16:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage","typeString":"struct GamingTournament.Match storage ref"}},"nodeType":"VariableDeclarationStatement","src":"13774:42:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1600,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"13835:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1601,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13845:7:8","memberName":"matchId","nodeType":"MemberAccess","referencedDeclaration":817,"src":"13835:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13856:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13835:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174636820646f6573206e6f74206578697374","id":1604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13859:22:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_3dcc09a458487c32849f81c33ccdd6d96a445a2c86eddb0b98e00a01214eaedb","typeString":"literal_string \"Match does not exist\""},"value":"Match does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3dcc09a458487c32849f81c33ccdd6d96a445a2c86eddb0b98e00a01214eaedb","typeString":"literal_string \"Match does not exist\""}],"id":1599,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13827:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13827:55:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1606,"nodeType":"ExpressionStatement","src":"13827:55:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"},"id":1612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1608,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"13901:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1609,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13911:6:8","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":828,"src":"13901:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1610,"name":"MatchStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"13921:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MatchStatus_$757_$","typeString":"type(enum GamingTournament.MatchStatus)"}},"id":1611,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13933:9:8","memberName":"SCHEDULED","nodeType":"MemberAccess","referencedDeclaration":753,"src":"13921:21:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"src":"13901:41:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1613,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"13946:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1614,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13956:6:8","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":828,"src":"13946:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1615,"name":"MatchStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"13966:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MatchStatus_$757_$","typeString":"type(enum GamingTournament.MatchStatus)"}},"id":1616,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13978:11:8","memberName":"IN_PROGRESS","nodeType":"MemberAccess","referencedDeclaration":754,"src":"13966:23:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"src":"13946:43:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13901:88:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d61746368206e6f7420616374697665","id":1619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13991:18:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_dfd49d38711ea870da9d571a7b923a7b81649736f85a968b059e61afeeebbd54","typeString":"literal_string \"Match not active\""},"value":"Match not active"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dfd49d38711ea870da9d571a7b923a7b81649736f85a968b059e61afeeebbd54","typeString":"literal_string \"Match not active\""}],"id":1607,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13893:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13893:117:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1621,"nodeType":"ExpressionStatement","src":"13893:117:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1623,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"14029:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1624,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"14039:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1625,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14049:7:8","memberName":"player1","nodeType":"MemberAccess","referencedDeclaration":821,"src":"14039:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14029:27:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1627,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"14060:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1628,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"14070:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1629,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14080:7:8","memberName":"player2","nodeType":"MemberAccess","referencedDeclaration":823,"src":"14070:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14060:27:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14029:58:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1632,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"14091:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14109:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1634,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14101:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1633,"name":"address","nodeType":"ElementaryTypeName","src":"14101:7:8","typeDescriptions":{}}},"id":1636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14101:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14091:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14029:82:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642077696e6e6572","id":1639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14113:16:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_979a3de985022509ab207243cef88c77e8cce3c574fa2744b0ab3918ad9ec6db","typeString":"literal_string \"Invalid winner\""},"value":"Invalid winner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_979a3de985022509ab207243cef88c77e8cce3c574fa2744b0ab3918ad9ec6db","typeString":"literal_string \"Invalid winner\""}],"id":1622,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14021:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14021:109:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1641,"nodeType":"ExpressionStatement","src":"14021:109:8"},{"expression":{"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1642,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"14151:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1644,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14161:6:8","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":828,"src":"14151:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1645,"name":"MatchStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"14170:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MatchStatus_$757_$","typeString":"type(enum GamingTournament.MatchStatus)"}},"id":1646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14182:9:8","memberName":"COMPLETED","nodeType":"MemberAccess","referencedDeclaration":755,"src":"14170:21:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"src":"14151:40:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"id":1648,"nodeType":"ExpressionStatement","src":"14151:40:8"},{"expression":{"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1649,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"14202:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1651,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14212:6:8","memberName":"winner","nodeType":"MemberAccess","referencedDeclaration":825,"src":"14202:16:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1652,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"14221:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14202:25:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1654,"nodeType":"ExpressionStatement","src":"14202:25:8"},{"expression":{"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1655,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"14238:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1657,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14248:12:8","memberName":"player1Score","nodeType":"MemberAccess","referencedDeclaration":834,"src":"14238:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1658,"name":"player1Score","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"14263:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14238:37:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1660,"nodeType":"ExpressionStatement","src":"14238:37:8"},{"expression":{"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1661,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"14286:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1663,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14296:12:8","memberName":"player2Score","nodeType":"MemberAccess","referencedDeclaration":836,"src":"14286:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1664,"name":"player2Score","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"14311:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14286:37:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1666,"nodeType":"ExpressionStatement","src":"14286:37:8"},{"expression":{"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1667,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"14334:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1669,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14344:8:8","memberName":"gameData","nodeType":"MemberAccess","referencedDeclaration":838,"src":"14334:18:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1670,"name":"gameData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"14355:8:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"14334:29:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1672,"nodeType":"ExpressionStatement","src":"14334:29:8"},{"expression":{"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1673,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"14374:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1675,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14384:7:8","memberName":"endTime","nodeType":"MemberAccess","referencedDeclaration":832,"src":"14374:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1676,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"14394:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14400:9:8","memberName":"timestamp","nodeType":"MemberAccess","src":"14394:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14374:35:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1679,"nodeType":"ExpressionStatement","src":"14374:35:8"},{"assignments":[1682],"declarations":[{"constant":false,"id":1682,"mutability":"mutable","name":"tournament","nameLocation":"14481:10:8","nodeType":"VariableDeclaration","scope":1806,"src":"14462:29:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"},"typeName":{"id":1681,"nodeType":"UserDefinedTypeName","pathNode":{"id":1680,"name":"Tournament","nameLocations":["14462:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":800,"src":"14462:10:8"},"referencedDeclaration":800,"src":"14462:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"}},"visibility":"internal"}],"id":1687,"initialValue":{"baseExpression":{"id":1683,"name":"tournaments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"14494:11:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Tournament_$800_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Tournament storage ref)"}},"id":1686,"indexExpression":{"expression":{"id":1684,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"14506:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1685,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14516:12:8","memberName":"tournamentId","nodeType":"MemberAccess","referencedDeclaration":819,"src":"14506:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14494:35:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage","typeString":"struct GamingTournament.Tournament storage ref"}},"nodeType":"VariableDeclarationStatement","src":"14462:67:8"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1688,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"14544:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1689,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"14554:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1690,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14564:7:8","memberName":"player1","nodeType":"MemberAccess","referencedDeclaration":821,"src":"14554:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14544:27:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1711,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"14723:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1712,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"14733:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1713,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14743:7:8","memberName":"player2","nodeType":"MemberAccess","referencedDeclaration":823,"src":"14733:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14723:27:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1752,"nodeType":"Block","src":"14898:161:8","statements":[{"expression":{"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14934:49:8","subExpression":{"expression":{"baseExpression":{"expression":{"id":1734,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"14934:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1738,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14945:11:8","memberName":"playerStats","nodeType":"MemberAccess","referencedDeclaration":794,"src":"14934:22:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PlayerStats_$815_storage_$","typeString":"mapping(address => struct GamingTournament.PlayerStats storage ref)"}},"id":1739,"indexExpression":{"expression":{"id":1736,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"14957:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1737,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14967:7:8","memberName":"player1","nodeType":"MemberAccess","referencedDeclaration":821,"src":"14957:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14934:41:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage","typeString":"struct GamingTournament.PlayerStats storage ref"}},"id":1740,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14976:5:8","memberName":"draws","nodeType":"MemberAccess","referencedDeclaration":806,"src":"14934:47:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1742,"nodeType":"ExpressionStatement","src":"14934:49:8"},{"expression":{"id":1750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14998:49:8","subExpression":{"expression":{"baseExpression":{"expression":{"id":1743,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"14998:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1747,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15009:11:8","memberName":"playerStats","nodeType":"MemberAccess","referencedDeclaration":794,"src":"14998:22:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PlayerStats_$815_storage_$","typeString":"mapping(address => struct GamingTournament.PlayerStats storage ref)"}},"id":1748,"indexExpression":{"expression":{"id":1745,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"15021:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1746,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15031:7:8","memberName":"player2","nodeType":"MemberAccess","referencedDeclaration":823,"src":"15021:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14998:41:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage","typeString":"struct GamingTournament.PlayerStats storage ref"}},"id":1749,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"15040:5:8","memberName":"draws","nodeType":"MemberAccess","referencedDeclaration":806,"src":"14998:47:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1751,"nodeType":"ExpressionStatement","src":"14998:49:8"}]},"id":1753,"nodeType":"IfStatement","src":"14719:340:8","trueBody":{"id":1733,"nodeType":"Block","src":"14752:140:8","statements":[{"expression":{"id":1722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14767:48:8","subExpression":{"expression":{"baseExpression":{"expression":{"id":1715,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"14767:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1719,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14778:11:8","memberName":"playerStats","nodeType":"MemberAccess","referencedDeclaration":794,"src":"14767:22:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PlayerStats_$815_storage_$","typeString":"mapping(address => struct GamingTournament.PlayerStats storage ref)"}},"id":1720,"indexExpression":{"expression":{"id":1717,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"14790:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1718,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14800:7:8","memberName":"player2","nodeType":"MemberAccess","referencedDeclaration":823,"src":"14790:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14767:41:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage","typeString":"struct GamingTournament.PlayerStats storage ref"}},"id":1721,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14809:4:8","memberName":"wins","nodeType":"MemberAccess","referencedDeclaration":802,"src":"14767:46:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1723,"nodeType":"ExpressionStatement","src":"14767:48:8"},{"expression":{"id":1731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14830:50:8","subExpression":{"expression":{"baseExpression":{"expression":{"id":1724,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"14830:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1728,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14841:11:8","memberName":"playerStats","nodeType":"MemberAccess","referencedDeclaration":794,"src":"14830:22:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PlayerStats_$815_storage_$","typeString":"mapping(address => struct GamingTournament.PlayerStats storage ref)"}},"id":1729,"indexExpression":{"expression":{"id":1726,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"14853:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1727,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14863:7:8","memberName":"player1","nodeType":"MemberAccess","referencedDeclaration":821,"src":"14853:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14830:41:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage","typeString":"struct GamingTournament.PlayerStats storage ref"}},"id":1730,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14872:6:8","memberName":"losses","nodeType":"MemberAccess","referencedDeclaration":804,"src":"14830:48:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1732,"nodeType":"ExpressionStatement","src":"14830:50:8"}]}},"id":1754,"nodeType":"IfStatement","src":"14540:519:8","trueBody":{"id":1710,"nodeType":"Block","src":"14573:140:8","statements":[{"expression":{"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14588:48:8","subExpression":{"expression":{"baseExpression":{"expression":{"id":1692,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"14588:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1696,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14599:11:8","memberName":"playerStats","nodeType":"MemberAccess","referencedDeclaration":794,"src":"14588:22:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PlayerStats_$815_storage_$","typeString":"mapping(address => struct GamingTournament.PlayerStats storage ref)"}},"id":1697,"indexExpression":{"expression":{"id":1694,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"14611:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1695,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14621:7:8","memberName":"player1","nodeType":"MemberAccess","referencedDeclaration":821,"src":"14611:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14588:41:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage","typeString":"struct GamingTournament.PlayerStats storage ref"}},"id":1698,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14630:4:8","memberName":"wins","nodeType":"MemberAccess","referencedDeclaration":802,"src":"14588:46:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1700,"nodeType":"ExpressionStatement","src":"14588:48:8"},{"expression":{"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14651:50:8","subExpression":{"expression":{"baseExpression":{"expression":{"id":1701,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"14651:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1705,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14662:11:8","memberName":"playerStats","nodeType":"MemberAccess","referencedDeclaration":794,"src":"14651:22:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PlayerStats_$815_storage_$","typeString":"mapping(address => struct GamingTournament.PlayerStats storage ref)"}},"id":1706,"indexExpression":{"expression":{"id":1703,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"14674:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1704,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14684:7:8","memberName":"player2","nodeType":"MemberAccess","referencedDeclaration":823,"src":"14674:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14651:41:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage","typeString":"struct GamingTournament.PlayerStats storage ref"}},"id":1707,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14693:6:8","memberName":"losses","nodeType":"MemberAccess","referencedDeclaration":804,"src":"14651:48:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1709,"nodeType":"ExpressionStatement","src":"14651:50:8"}]}},{"expression":{"id":1763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":1755,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"15079:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1759,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15090:11:8","memberName":"playerStats","nodeType":"MemberAccess","referencedDeclaration":794,"src":"15079:22:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PlayerStats_$815_storage_$","typeString":"mapping(address => struct GamingTournament.PlayerStats storage ref)"}},"id":1760,"indexExpression":{"expression":{"id":1757,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"15102:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1758,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15112:7:8","memberName":"player1","nodeType":"MemberAccess","referencedDeclaration":821,"src":"15102:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15079:41:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage","typeString":"struct GamingTournament.PlayerStats storage ref"}},"id":1761,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"15121:10:8","memberName":"totalScore","nodeType":"MemberAccess","referencedDeclaration":808,"src":"15079:52:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1762,"name":"player1Score","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"15135:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15079:68:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1764,"nodeType":"ExpressionStatement","src":"15079:68:8"},{"expression":{"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":1765,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"15158:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1769,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15169:11:8","memberName":"playerStats","nodeType":"MemberAccess","referencedDeclaration":794,"src":"15158:22:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PlayerStats_$815_storage_$","typeString":"mapping(address => struct GamingTournament.PlayerStats storage ref)"}},"id":1770,"indexExpression":{"expression":{"id":1767,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"15181:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1768,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15191:7:8","memberName":"player2","nodeType":"MemberAccess","referencedDeclaration":823,"src":"15181:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15158:41:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage","typeString":"struct GamingTournament.PlayerStats storage ref"}},"id":1771,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"15200:10:8","memberName":"totalScore","nodeType":"MemberAccess","referencedDeclaration":808,"src":"15158:52:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1772,"name":"player2Score","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"15214:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15158:68:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1774,"nodeType":"ExpressionStatement","src":"15158:68:8"},{"expression":{"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":1775,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"15237:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1779,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15248:11:8","memberName":"playerStats","nodeType":"MemberAccess","referencedDeclaration":794,"src":"15237:22:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PlayerStats_$815_storage_$","typeString":"mapping(address => struct GamingTournament.PlayerStats storage ref)"}},"id":1780,"indexExpression":{"expression":{"id":1777,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"15260:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1778,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15270:7:8","memberName":"player1","nodeType":"MemberAccess","referencedDeclaration":821,"src":"15260:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15237:41:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage","typeString":"struct GamingTournament.PlayerStats storage ref"}},"id":1781,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"15279:13:8","memberName":"lastMatchTime","nodeType":"MemberAccess","referencedDeclaration":814,"src":"15237:55:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1782,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"15295:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15301:9:8","memberName":"timestamp","nodeType":"MemberAccess","src":"15295:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15237:73:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1785,"nodeType":"ExpressionStatement","src":"15237:73:8"},{"expression":{"id":1795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":1786,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"15321:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1790,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15332:11:8","memberName":"playerStats","nodeType":"MemberAccess","referencedDeclaration":794,"src":"15321:22:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PlayerStats_$815_storage_$","typeString":"mapping(address => struct GamingTournament.PlayerStats storage ref)"}},"id":1791,"indexExpression":{"expression":{"id":1788,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"15344:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":1789,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15354:7:8","memberName":"player2","nodeType":"MemberAccess","referencedDeclaration":823,"src":"15344:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15321:41:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage","typeString":"struct GamingTournament.PlayerStats storage ref"}},"id":1792,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"15363:13:8","memberName":"lastMatchTime","nodeType":"MemberAccess","referencedDeclaration":814,"src":"15321:55:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1793,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"15379:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15385:9:8","memberName":"timestamp","nodeType":"MemberAccess","src":"15379:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15321:73:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1796,"nodeType":"ExpressionStatement","src":"15321:73:8"},{"eventCall":{"arguments":[{"id":1798,"name":"matchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"15435:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1799,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"15444:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1800,"name":"player1Score","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"15452:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1801,"name":"player2Score","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"15466:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1802,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"15480:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15486:9:8","memberName":"timestamp","nodeType":"MemberAccess","src":"15480:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1797,"name":"MatchCompleted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"15420:14:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,address,uint256,uint256,uint256)"}},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15420:76:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1805,"nodeType":"EmitStatement","src":"15415:81:8"}]},"documentation":{"id":1574,"nodeType":"StructuredDocumentation","src":"13274:255:8","text":" @dev Complete a match with results\n @param matchId Match ID\n @param winner Winner address\n @param player1Score Player 1 score\n @param player2Score Player 2 score\n @param gameData Additional game data"},"functionSelector":"f0a4e5c6","id":1807,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1587,"name":"MATCH_REFEREE_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"13729:18:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1588,"kind":"modifierInvocation","modifierName":{"id":1586,"name":"onlyRole","nameLocations":["13720:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"13720:8:8"},"nodeType":"ModifierInvocation","src":"13720:28:8"},{"id":1590,"kind":"modifierInvocation","modifierName":{"id":1589,"name":"whenNotPaused","nameLocations":["13749:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":519,"src":"13749:13:8"},"nodeType":"ModifierInvocation","src":"13749:13:8"}],"name":"completeMatch","nameLocation":"13544:13:8","nodeType":"FunctionDefinition","parameters":{"id":1585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1576,"mutability":"mutable","name":"matchId","nameLocation":"13576:7:8","nodeType":"VariableDeclaration","scope":1807,"src":"13568:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1575,"name":"uint256","nodeType":"ElementaryTypeName","src":"13568:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1578,"mutability":"mutable","name":"winner","nameLocation":"13602:6:8","nodeType":"VariableDeclaration","scope":1807,"src":"13594:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1577,"name":"address","nodeType":"ElementaryTypeName","src":"13594:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1580,"mutability":"mutable","name":"player1Score","nameLocation":"13627:12:8","nodeType":"VariableDeclaration","scope":1807,"src":"13619:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1579,"name":"uint256","nodeType":"ElementaryTypeName","src":"13619:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1582,"mutability":"mutable","name":"player2Score","nameLocation":"13658:12:8","nodeType":"VariableDeclaration","scope":1807,"src":"13650:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1581,"name":"uint256","nodeType":"ElementaryTypeName","src":"13650:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1584,"mutability":"mutable","name":"gameData","nameLocation":"13695:8:8","nodeType":"VariableDeclaration","scope":1807,"src":"13681:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1583,"name":"string","nodeType":"ElementaryTypeName","src":"13681:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"13557:153:8"},"returnParameters":{"id":1591,"nodeType":"ParameterList","parameters":[],"src":"13763:0:8"},"scope":2647,"src":"13535:1969:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2030,"nodeType":"Block","src":"16055:2019:8","statements":[{"assignments":[1823],"declarations":[{"constant":false,"id":1823,"mutability":"mutable","name":"tournament","nameLocation":"16085:10:8","nodeType":"VariableDeclaration","scope":2030,"src":"16066:29:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"},"typeName":{"id":1822,"nodeType":"UserDefinedTypeName","pathNode":{"id":1821,"name":"Tournament","nameLocations":["16066:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":800,"src":"16066:10:8"},"referencedDeclaration":800,"src":"16066:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"}},"visibility":"internal"}],"id":1827,"initialValue":{"baseExpression":{"id":1824,"name":"tournaments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"16098:11:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Tournament_$800_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Tournament storage ref)"}},"id":1826,"indexExpression":{"id":1825,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"16110:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16098:25:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage","typeString":"struct GamingTournament.Tournament storage ref"}},"nodeType":"VariableDeclarationStatement","src":"16066:57:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1829,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"16142:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1830,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16153:12:8","memberName":"tournamentId","nodeType":"MemberAccess","referencedDeclaration":759,"src":"16142:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16169:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16142:28:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f75726e616d656e7420646f6573206e6f74206578697374","id":1833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16172:27:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_f4d04e414dcac46933b7f92f18a1d86483abf32ba1f0b1bc4f534183caf2de87","typeString":"literal_string \"Tournament does not exist\""},"value":"Tournament does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f4d04e414dcac46933b7f92f18a1d86483abf32ba1f0b1bc4f534183caf2de87","typeString":"literal_string \"Tournament does not exist\""}],"id":1828,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16134:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16134:66:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1835,"nodeType":"ExpressionStatement","src":"16134:66:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1837,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"16219:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1838,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16230:6:8","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":769,"src":"16219:17:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1839,"name":"TournamentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":746,"src":"16240:16:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TournamentStatus_$746_$","typeString":"type(enum GamingTournament.TournamentStatus)"}},"id":1840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16257:11:8","memberName":"IN_PROGRESS","nodeType":"MemberAccess","referencedDeclaration":743,"src":"16240:28:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"src":"16219:49:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f75726e616d656e74206e6f7420696e2070726f6772657373","id":1842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16270:28:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_46d13cdaed187d1c60ea2c1b1e2535cfe5dea215585c4fad8ad453565a41b2c7","typeString":"literal_string \"Tournament not in progress\""},"value":"Tournament not in progress"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_46d13cdaed187d1c60ea2c1b1e2535cfe5dea215585c4fad8ad453565a41b2c7","typeString":"literal_string \"Tournament not in progress\""}],"id":1836,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16211:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16211:88:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1844,"nodeType":"ExpressionStatement","src":"16211:88:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1846,"name":"winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"16318:7:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16326:6:8","memberName":"length","nodeType":"MemberAccess","src":"16318:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16335:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16318:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f2077696e6e65727320737065636966696564","id":1850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16338:22:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b661fa757342a640471b3b6671e12257d300acc6cec14d0fe5c2331ce841e0d","typeString":"literal_string \"No winners specified\""},"value":"No winners specified"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b661fa757342a640471b3b6671e12257d300acc6cec14d0fe5c2331ce841e0d","typeString":"literal_string \"No winners specified\""}],"id":1845,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16310:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16310:51:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1852,"nodeType":"ExpressionStatement","src":"16310:51:8"},{"expression":{"id":1858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1853,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"16382:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1855,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"16393:6:8","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":769,"src":"16382:17:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1856,"name":"TournamentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":746,"src":"16402:16:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TournamentStatus_$746_$","typeString":"type(enum GamingTournament.TournamentStatus)"}},"id":1857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16419:8:8","memberName":"FINISHED","nodeType":"MemberAccess","referencedDeclaration":744,"src":"16402:25:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"src":"16382:45:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"id":1859,"nodeType":"ExpressionStatement","src":"16382:45:8"},{"assignments":[1861],"declarations":[{"constant":false,"id":1861,"mutability":"mutable","name":"totalPrize","nameLocation":"16497:10:8","nodeType":"VariableDeclaration","scope":2030,"src":"16489:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1860,"name":"uint256","nodeType":"ElementaryTypeName","src":"16489:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1864,"initialValue":{"expression":{"id":1862,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"16510:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":1863,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16521:9:8","memberName":"prizePool","nodeType":"MemberAccess","referencedDeclaration":773,"src":"16510:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16489:41:8"},{"assignments":[1866],"declarations":[{"constant":false,"id":1866,"mutability":"mutable","name":"platformFeeAmount","nameLocation":"16549:17:8","nodeType":"VariableDeclaration","scope":2030,"src":"16541:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1865,"name":"uint256","nodeType":"ElementaryTypeName","src":"16541:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1873,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1867,"name":"totalPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"16570:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1868,"name":"platformFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"16583:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16570:24:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1870,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"16569:26:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"31303030","id":1871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16598:4:8","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"},"src":"16569:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16541:61:8"},{"assignments":[1875],"declarations":[{"constant":false,"id":1875,"mutability":"mutable","name":"organizerFeeAmount","nameLocation":"16621:18:8","nodeType":"VariableDeclaration","scope":2030,"src":"16613:26:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1874,"name":"uint256","nodeType":"ElementaryTypeName","src":"16613:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1882,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1876,"name":"totalPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"16643:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1877,"name":"organizerFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"16656:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16643:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1879,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"16642:27:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"31303030","id":1880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16672:4:8","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"},"src":"16642:34:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16613:63:8"},{"assignments":[1884],"declarations":[{"constant":false,"id":1884,"mutability":"mutable","name":"remainingPrize","nameLocation":"16695:14:8","nodeType":"VariableDeclaration","scope":2030,"src":"16687:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1883,"name":"uint256","nodeType":"ElementaryTypeName","src":"16687:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1890,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1885,"name":"totalPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"16712:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1886,"name":"platformFeeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"16725:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16712:30:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1888,"name":"organizerFeeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"16745:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16712:51:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16687:76:8"},{"body":{"id":1988,"nodeType":"Block","src":"16859:814:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":1904,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"16901:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":1905,"name":"winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"16915:7:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1907,"indexExpression":{"id":1906,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"16923:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16915:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1903,"name":"isPlayerRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"16882:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_address_$returns$_t_bool_$","typeString":"function (uint256,address) view returns (bool)"}},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16882:44:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57696e6e6572206e6f742072656769737465726564","id":1909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16928:23:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_bdcd3b1d4fef0c63b81a7f67398a5ae95a759cc05011db940417d7dab4db6cb2","typeString":"literal_string \"Winner not registered\""},"value":"Winner not registered"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bdcd3b1d4fef0c63b81a7f67398a5ae95a759cc05011db940417d7dab4db6cb2","typeString":"literal_string \"Winner not registered\""}],"id":1902,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16874:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16874:78:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1911,"nodeType":"ExpressionStatement","src":"16874:78:8"},{"assignments":[1913],"declarations":[{"constant":false,"id":1913,"mutability":"mutable","name":"prizeAmount","nameLocation":"16989:11:8","nodeType":"VariableDeclaration","scope":1988,"src":"16981:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1912,"name":"uint256","nodeType":"ElementaryTypeName","src":"16981:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1914,"nodeType":"VariableDeclarationStatement","src":"16981:19:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1915,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"17019:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17024:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17019:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1928,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"17134:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17139:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"17134:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1941,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"17249:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"32","id":1942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17254:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"17249:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1958,"nodeType":"Block","src":"17360:82:8","statements":[{"expression":{"id":1956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1954,"name":"prizeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"17379:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17393:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17379:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1957,"nodeType":"ExpressionStatement","src":"17379:15:8"}]},"id":1959,"nodeType":"IfStatement","src":"17245:197:8","trueBody":{"id":1953,"nodeType":"Block","src":"17257:97:8","statements":[{"expression":{"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1944,"name":"prizeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"17276:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1945,"name":"remainingPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"17291:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3230","id":1946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17308:2:8","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"17291:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1948,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17290:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"313030","id":1949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17314:3:8","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"17290:27:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17276:41:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1952,"nodeType":"ExpressionStatement","src":"17276:41:8"}]}},"id":1960,"nodeType":"IfStatement","src":"17130:312:8","trueBody":{"id":1940,"nodeType":"Block","src":"17142:97:8","statements":[{"expression":{"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1931,"name":"prizeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"17161:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1932,"name":"remainingPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"17176:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3330","id":1933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17193:2:8","typeDescriptions":{"typeIdentifier":"t_rational_30_by_1","typeString":"int_const 30"},"value":"30"},"src":"17176:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1935,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17175:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"313030","id":1936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17199:3:8","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"17175:27:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17161:41:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1939,"nodeType":"ExpressionStatement","src":"17161:41:8"}]}},"id":1961,"nodeType":"IfStatement","src":"17015:427:8","trueBody":{"id":1927,"nodeType":"Block","src":"17027:97:8","statements":[{"expression":{"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1918,"name":"prizeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"17046:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1919,"name":"remainingPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"17061:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3530","id":1920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17078:2:8","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"src":"17061:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1922,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17060:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"313030","id":1923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17084:3:8","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"17060:27:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17046:41:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1926,"nodeType":"ExpressionStatement","src":"17046:41:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1962,"name":"prizeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"17474:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17488:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17474:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1987,"nodeType":"IfStatement","src":"17470:192:8","trueBody":{"id":1986,"nodeType":"Block","src":"17491:171:8","statements":[{"expression":{"arguments":[{"baseExpression":{"id":1969,"name":"winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"17536:7:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1971,"indexExpression":{"id":1970,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"17544:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17536:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1972,"name":"prizeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"17548:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":1966,"name":"gdiToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"17517:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1965,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"17510:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$456_$","typeString":"type(contract IERC20)"}},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17510:16:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$456","typeString":"contract IERC20"}},"id":1968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17527:8:8","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":423,"src":"17510:25:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17510:50:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1974,"nodeType":"ExpressionStatement","src":"17510:50:8"},{"eventCall":{"arguments":[{"id":1976,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"17601:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":1977,"name":"winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"17615:7:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1979,"indexExpression":{"id":1978,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"17623:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17615:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1980,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"17627:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17631:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"17627:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1983,"name":"prizeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"17634:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1975,"name":"PrizeDistributed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"17584:16:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,address,uint256,uint256)"}},"id":1984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17584:62:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1985,"nodeType":"EmitStatement","src":"17579:67:8"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1895,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"16834:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1896,"name":"winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"16838:7:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16846:6:8","memberName":"length","nodeType":"MemberAccess","src":"16838:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16834:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1989,"initializationExpression":{"assignments":[1892],"declarations":[{"constant":false,"id":1892,"mutability":"mutable","name":"i","nameLocation":"16827:1:8","nodeType":"VariableDeclaration","scope":1989,"src":"16819:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1891,"name":"uint256","nodeType":"ElementaryTypeName","src":"16819:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1894,"initialValue":{"hexValue":"30","id":1893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16831:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"16819:13:8"},"loopExpression":{"expression":{"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"16854:3:8","subExpression":{"id":1899,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"16854:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1901,"nodeType":"ExpressionStatement","src":"16854:3:8"},"nodeType":"ForStatement","src":"16814:859:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1990,"name":"platformFeeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"17723:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17743:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17723:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2005,"nodeType":"IfStatement","src":"17719:113:8","trueBody":{"id":2004,"nodeType":"Block","src":"17746:86:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":1999,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"17795:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_GamingTournament_$2647","typeString":"contract GamingTournament"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_GamingTournament_$2647","typeString":"contract GamingTournament"}],"id":1998,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17787:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1997,"name":"address","nodeType":"ElementaryTypeName","src":"17787:7:8","typeDescriptions":{}}},"id":2000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17787:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2001,"name":"platformFeeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"17802:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":1994,"name":"gdiToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"17768:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1993,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"17761:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$456_$","typeString":"type(contract IERC20)"}},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17761:16:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$456","typeString":"contract IERC20"}},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17778:8:8","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":423,"src":"17761:25:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17761:59:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2003,"nodeType":"ExpressionStatement","src":"17761:59:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2006,"name":"organizerFeeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"17846:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17867:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17846:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2019,"nodeType":"IfStatement","src":"17842:122:8","trueBody":{"id":2018,"nodeType":"Block","src":"17870:94:8","statements":[{"expression":{"arguments":[{"expression":{"id":2013,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"17911:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2014,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17922:9:8","memberName":"organizer","nodeType":"MemberAccess","referencedDeclaration":783,"src":"17911:20:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2015,"name":"organizerFeeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"17933:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2010,"name":"gdiToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"17892:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2009,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"17885:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$456_$","typeString":"type(contract IERC20)"}},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17885:16:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$456","typeString":"contract IERC20"}},"id":2012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17902:8:8","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":423,"src":"17885:25:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17885:67:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2017,"nodeType":"ExpressionStatement","src":"17885:67:8"}]}},{"eventCall":{"arguments":[{"id":2021,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"18008:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":2022,"name":"winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"18022:7:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2024,"indexExpression":{"hexValue":"30","id":2023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18030:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18022:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2025,"name":"remainingPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"18034:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2026,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"18050:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18056:9:8","memberName":"timestamp","nodeType":"MemberAccess","src":"18050:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2020,"name":"TournamentFinished","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"17989:18:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,address,uint256,uint256)"}},"id":2028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17989:77:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2029,"nodeType":"EmitStatement","src":"17984:82:8"}]},"documentation":{"id":1808,"nodeType":"StructuredDocumentation","src":"15724:167:8","text":" @dev Finish a tournament and distribute prizes\n @param tournamentId Tournament ID\n @param winners Array of winner addresses in order"},"functionSelector":"56eafcc0","id":2031,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1816,"name":"TOURNAMENT_ORGANIZER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"16014:25:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1817,"kind":"modifierInvocation","modifierName":{"id":1815,"name":"onlyRole","nameLocations":["16005:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"16005:8:8"},"nodeType":"ModifierInvocation","src":"16005:35:8"},{"id":1819,"kind":"modifierInvocation","modifierName":{"id":1818,"name":"whenNotPaused","nameLocations":["16041:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":519,"src":"16041:13:8"},"nodeType":"ModifierInvocation","src":"16041:13:8"}],"name":"finishTournament","nameLocation":"15906:16:8","nodeType":"FunctionDefinition","parameters":{"id":1814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1810,"mutability":"mutable","name":"tournamentId","nameLocation":"15941:12:8","nodeType":"VariableDeclaration","scope":2031,"src":"15933:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1809,"name":"uint256","nodeType":"ElementaryTypeName","src":"15933:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1813,"mutability":"mutable","name":"winners","nameLocation":"15981:7:8","nodeType":"VariableDeclaration","scope":2031,"src":"15964:24:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1811,"name":"address","nodeType":"ElementaryTypeName","src":"15964:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1812,"nodeType":"ArrayTypeName","src":"15964:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"15922:73:8"},"returnParameters":{"id":1820,"nodeType":"ParameterList","parameters":[],"src":"16055:0:8"},"scope":2647,"src":"15897:2177:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2074,"nodeType":"Block","src":"18576:274:8","statements":[{"assignments":[2043],"declarations":[{"constant":false,"id":2043,"mutability":"mutable","name":"tournament","nameLocation":"18606:10:8","nodeType":"VariableDeclaration","scope":2074,"src":"18587:29:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"},"typeName":{"id":2042,"nodeType":"UserDefinedTypeName","pathNode":{"id":2041,"name":"Tournament","nameLocations":["18587:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":800,"src":"18587:10:8"},"referencedDeclaration":800,"src":"18587:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"}},"visibility":"internal"}],"id":2047,"initialValue":{"baseExpression":{"id":2044,"name":"tournaments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"18619:11:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Tournament_$800_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Tournament storage ref)"}},"id":2046,"indexExpression":{"id":2045,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"18631:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18619:25:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage","typeString":"struct GamingTournament.Tournament storage ref"}},"nodeType":"VariableDeclarationStatement","src":"18587:57:8"},{"body":{"id":2070,"nodeType":"Block","src":"18711:109:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":2060,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"18730:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2061,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18741:7:8","memberName":"players","nodeType":"MemberAccess","referencedDeclaration":786,"src":"18730:18:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2063,"indexExpression":{"id":2062,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"18749:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18730:21:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2064,"name":"player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2036,"src":"18755:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"18730:31:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2069,"nodeType":"IfStatement","src":"18726:83:8","trueBody":{"id":2068,"nodeType":"Block","src":"18763:46:8","statements":[{"expression":{"hexValue":"74727565","id":2066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"18789:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2040,"id":2067,"nodeType":"Return","src":"18782:11:8"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2052,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"18675:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":2053,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"18679:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2054,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18690:7:8","memberName":"players","nodeType":"MemberAccess","referencedDeclaration":786,"src":"18679:18:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18698:6:8","memberName":"length","nodeType":"MemberAccess","src":"18679:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18675:29:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2071,"initializationExpression":{"assignments":[2049],"declarations":[{"constant":false,"id":2049,"mutability":"mutable","name":"i","nameLocation":"18668:1:8","nodeType":"VariableDeclaration","scope":2071,"src":"18660:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2048,"name":"uint256","nodeType":"ElementaryTypeName","src":"18660:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2051,"initialValue":{"hexValue":"30","id":2050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18672:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18660:13:8"},"loopExpression":{"expression":{"id":2058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18706:3:8","subExpression":{"id":2057,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"18706:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2059,"nodeType":"ExpressionStatement","src":"18706:3:8"},"nodeType":"ForStatement","src":"18655:165:8"},{"expression":{"hexValue":"66616c7365","id":2072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"18837:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":2040,"id":2073,"nodeType":"Return","src":"18830:12:8"}]},"documentation":{"id":2032,"nodeType":"StructuredDocumentation","src":"18289:188:8","text":" @dev Check if a player is registered for a tournament\n @param tournamentId Tournament ID\n @param player Player address\n @return True if registered"},"functionSelector":"5d316c49","id":2075,"implemented":true,"kind":"function","modifiers":[],"name":"isPlayerRegistered","nameLocation":"18492:18:8","nodeType":"FunctionDefinition","parameters":{"id":2037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2034,"mutability":"mutable","name":"tournamentId","nameLocation":"18519:12:8","nodeType":"VariableDeclaration","scope":2075,"src":"18511:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2033,"name":"uint256","nodeType":"ElementaryTypeName","src":"18511:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2036,"mutability":"mutable","name":"player","nameLocation":"18541:6:8","nodeType":"VariableDeclaration","scope":2075,"src":"18533:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2035,"name":"address","nodeType":"ElementaryTypeName","src":"18533:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"18510:38:8"},"returnParameters":{"id":2040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2039,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2075,"src":"18570:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2038,"name":"bool","nodeType":"ElementaryTypeName","src":"18570:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"18569:6:8"},"scope":2647,"src":"18483:367:8","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2110,"nodeType":"Block","src":"19040:426:8","statements":[{"assignments":[2083],"declarations":[{"constant":false,"id":2083,"mutability":"mutable","name":"tournament","nameLocation":"19070:10:8","nodeType":"VariableDeclaration","scope":2110,"src":"19051:29:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"},"typeName":{"id":2082,"nodeType":"UserDefinedTypeName","pathNode":{"id":2081,"name":"Tournament","nameLocations":["19051:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":800,"src":"19051:10:8"},"referencedDeclaration":800,"src":"19051:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"}},"visibility":"internal"}],"id":2087,"initialValue":{"baseExpression":{"id":2084,"name":"tournaments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"19083:11:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Tournament_$800_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Tournament storage ref)"}},"id":2086,"indexExpression":{"id":2085,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"19095:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19083:25:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage","typeString":"struct GamingTournament.Tournament storage ref"}},"nodeType":"VariableDeclarationStatement","src":"19051:57:8"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"},"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2088,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"19133:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2089,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19144:14:8","memberName":"tournamentType","nodeType":"MemberAccess","referencedDeclaration":766,"src":"19133:25:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2090,"name":"TournamentType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"19162:14:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TournamentType_$752_$","typeString":"type(enum GamingTournament.TournamentType)"}},"id":2091,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"19177:18:8","memberName":"SINGLE_ELIMINATION","nodeType":"MemberAccess","referencedDeclaration":747,"src":"19162:33:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"}},"src":"19133:62:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2098,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"19280:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2099,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19291:14:8","memberName":"tournamentType","nodeType":"MemberAccess","referencedDeclaration":766,"src":"19280:25:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2100,"name":"TournamentType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"19309:14:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TournamentType_$752_$","typeString":"type(enum GamingTournament.TournamentType)"}},"id":2101,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"19324:13:8","memberName":"BATTLE_ROYALE","nodeType":"MemberAccess","referencedDeclaration":751,"src":"19309:28:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"}},"src":"19280:57:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2108,"nodeType":"IfStatement","src":"19276:129:8","trueBody":{"id":2107,"nodeType":"Block","src":"19339:66:8","statements":[{"expression":{"arguments":[{"id":2104,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"19380:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2103,"name":"generateBattleRoyaleMatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"19354:25:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19354:39:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2106,"nodeType":"ExpressionStatement","src":"19354:39:8"}]}},"id":2109,"nodeType":"IfStatement","src":"19129:276:8","trueBody":{"id":2097,"nodeType":"Block","src":"19197:73:8","statements":[{"expression":{"arguments":[{"id":2094,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"19245:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2093,"name":"generateSingleEliminationMatches","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2255,"src":"19212:32:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19212:46:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2096,"nodeType":"ExpressionStatement","src":"19212:46:8"}]}}]},"documentation":{"id":2076,"nodeType":"StructuredDocumentation","src":"18862:109:8","text":" @dev Generate initial matches for a tournament\n @param tournamentId Tournament ID"},"id":2111,"implemented":true,"kind":"function","modifiers":[],"name":"generateInitialMatches","nameLocation":"18986:22:8","nodeType":"FunctionDefinition","parameters":{"id":2079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2078,"mutability":"mutable","name":"tournamentId","nameLocation":"19017:12:8","nodeType":"VariableDeclaration","scope":2111,"src":"19009:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2077,"name":"uint256","nodeType":"ElementaryTypeName","src":"19009:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19008:22:8"},"returnParameters":{"id":2080,"nodeType":"ParameterList","parameters":[],"src":"19040:0:8"},"scope":2647,"src":"18977:489:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2254,"nodeType":"Block","src":"19660:1288:8","statements":[{"assignments":[2119],"declarations":[{"constant":false,"id":2119,"mutability":"mutable","name":"tournament","nameLocation":"19690:10:8","nodeType":"VariableDeclaration","scope":2254,"src":"19671:29:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"},"typeName":{"id":2118,"nodeType":"UserDefinedTypeName","pathNode":{"id":2117,"name":"Tournament","nameLocations":["19671:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":800,"src":"19671:10:8"},"referencedDeclaration":800,"src":"19671:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"}},"visibility":"internal"}],"id":2123,"initialValue":{"baseExpression":{"id":2120,"name":"tournaments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"19703:11:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Tournament_$800_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Tournament storage ref)"}},"id":2122,"indexExpression":{"id":2121,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"19715:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19703:25:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage","typeString":"struct GamingTournament.Tournament storage ref"}},"nodeType":"VariableDeclarationStatement","src":"19671:57:8"},{"assignments":[2125],"declarations":[{"constant":false,"id":2125,"mutability":"mutable","name":"playerCount","nameLocation":"19747:11:8","nodeType":"VariableDeclaration","scope":2254,"src":"19739:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2124,"name":"uint256","nodeType":"ElementaryTypeName","src":"19739:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2129,"initialValue":{"expression":{"expression":{"id":2126,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"19761:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2127,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19772:7:8","memberName":"players","nodeType":"MemberAccess","referencedDeclaration":786,"src":"19761:18:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19780:6:8","memberName":"length","nodeType":"MemberAccess","src":"19761:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19739:47:8"},{"body":{"id":2252,"nodeType":"Block","src":"19891:1050:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2141,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"19910:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19914:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19910:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2144,"name":"playerCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"19918:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19910:19:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2250,"nodeType":"Block","src":"20172:758:8","statements":[{"expression":{"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"20230:14:8","subExpression":{"id":2163,"name":"matchCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"20230:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2165,"nodeType":"ExpressionStatement","src":"20230:14:8"},{"assignments":[2167],"declarations":[{"constant":false,"id":2167,"mutability":"mutable","name":"matchId","nameLocation":"20271:7:8","nodeType":"VariableDeclaration","scope":2250,"src":"20263:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2166,"name":"uint256","nodeType":"ElementaryTypeName","src":"20263:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2169,"initialValue":{"id":2168,"name":"matchCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"20281:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20263:30:8"},{"assignments":[2172],"declarations":[{"constant":false,"id":2172,"mutability":"mutable","name":"matchData","nameLocation":"20344:9:8","nodeType":"VariableDeclaration","scope":2250,"src":"20330:23:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match"},"typeName":{"id":2171,"nodeType":"UserDefinedTypeName","pathNode":{"id":2170,"name":"Match","nameLocations":["20330:5:8"],"nodeType":"IdentifierPath","referencedDeclaration":841,"src":"20330:5:8"},"referencedDeclaration":841,"src":"20330:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match"}},"visibility":"internal"}],"id":2176,"initialValue":{"baseExpression":{"id":2173,"name":"matches","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"20356:7:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Match_$841_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Match storage ref)"}},"id":2175,"indexExpression":{"id":2174,"name":"matchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"20364:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20356:16:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage","typeString":"struct GamingTournament.Match storage ref"}},"nodeType":"VariableDeclarationStatement","src":"20330:42:8"},{"expression":{"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2177,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"20391:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2179,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"20401:7:8","memberName":"matchId","nodeType":"MemberAccess","referencedDeclaration":817,"src":"20391:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2180,"name":"matchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"20411:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20391:27:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2182,"nodeType":"ExpressionStatement","src":"20391:27:8"},{"expression":{"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2183,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"20437:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2185,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"20447:12:8","memberName":"tournamentId","nodeType":"MemberAccess","referencedDeclaration":819,"src":"20437:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2186,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"20462:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20437:37:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2188,"nodeType":"ExpressionStatement","src":"20437:37:8"},{"expression":{"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2189,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"20493:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2191,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"20503:7:8","memberName":"player1","nodeType":"MemberAccess","referencedDeclaration":821,"src":"20493:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"expression":{"id":2192,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"20513:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2193,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20524:7:8","memberName":"players","nodeType":"MemberAccess","referencedDeclaration":786,"src":"20513:18:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2195,"indexExpression":{"id":2194,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"20532:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20513:21:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20493:41:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2197,"nodeType":"ExpressionStatement","src":"20493:41:8"},{"expression":{"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2198,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"20553:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2200,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"20563:7:8","memberName":"player2","nodeType":"MemberAccess","referencedDeclaration":823,"src":"20553:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":2203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20581:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20573:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2201,"name":"address","nodeType":"ElementaryTypeName","src":"20573:7:8","typeDescriptions":{}}},"id":2204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20573:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20553:30:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2206,"nodeType":"ExpressionStatement","src":"20553:30:8"},{"expression":{"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2207,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"20602:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2209,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"20612:6:8","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":828,"src":"20602:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2210,"name":"MatchStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"20621:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MatchStatus_$757_$","typeString":"type(enum GamingTournament.MatchStatus)"}},"id":2211,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"20633:9:8","memberName":"COMPLETED","nodeType":"MemberAccess","referencedDeclaration":755,"src":"20621:21:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"src":"20602:40:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"id":2213,"nodeType":"ExpressionStatement","src":"20602:40:8"},{"expression":{"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2214,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"20661:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2216,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"20671:6:8","memberName":"winner","nodeType":"MemberAccess","referencedDeclaration":825,"src":"20661:16:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"expression":{"id":2217,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"20680:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20691:7:8","memberName":"players","nodeType":"MemberAccess","referencedDeclaration":786,"src":"20680:18:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2220,"indexExpression":{"id":2219,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"20699:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20680:21:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20661:40:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2222,"nodeType":"ExpressionStatement","src":"20661:40:8"},{"expression":{"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2223,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"20720:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2225,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"20730:5:8","memberName":"isBye","nodeType":"MemberAccess","referencedDeclaration":840,"src":"20720:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"20738:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"20720:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2228,"nodeType":"ExpressionStatement","src":"20720:22:8"},{"expression":{"arguments":[{"id":2234,"name":"matchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"20804:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":2229,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"20779:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2232,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20790:8:8","memberName":"matchIds","nodeType":"MemberAccess","referencedDeclaration":789,"src":"20779:19:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20799:4:8","memberName":"push","nodeType":"MemberAccess","src":"20779:24:8","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20779:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2236,"nodeType":"ExpressionStatement","src":"20779:33:8"},{"expression":{"arguments":[{"id":2244,"name":"matchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"20873:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":2237,"name":"playerMatches","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"20831:13:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":2242,"indexExpression":{"baseExpression":{"expression":{"id":2238,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"20845:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2239,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20856:7:8","memberName":"players","nodeType":"MemberAccess","referencedDeclaration":786,"src":"20845:18:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2241,"indexExpression":{"id":2240,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"20864:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20845:21:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20831:36:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20868:4:8","memberName":"push","nodeType":"MemberAccess","src":"20831:41:8","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20831:50:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2246,"nodeType":"ExpressionStatement","src":"20831:50:8"},{"expression":{"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"20900:14:8","subExpression":{"id":2247,"name":"totalMatches","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"20900:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2249,"nodeType":"ExpressionStatement","src":"20900:14:8"}]},"id":2251,"nodeType":"IfStatement","src":"19906:1024:8","trueBody":{"id":2162,"nodeType":"Block","src":"19931:235:8","statements":[{"expression":{"arguments":[{"id":2147,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"19984:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"expression":{"id":2148,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"20019:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2149,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20030:7:8","memberName":"players","nodeType":"MemberAccess","referencedDeclaration":786,"src":"20019:18:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2151,"indexExpression":{"id":2150,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"20038:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20019:21:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"expression":{"id":2152,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"20063:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2153,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20074:7:8","memberName":"players","nodeType":"MemberAccess","referencedDeclaration":786,"src":"20063:18:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2157,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2154,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"20082:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20086:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"20082:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20063:25:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2158,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"20111:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2159,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20122:9:8","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":779,"src":"20111:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2146,"name":"createMatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"19950:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint256,address,address,uint256)"}},"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19950:200:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2161,"nodeType":"ExpressionStatement","src":"19950:200:8"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2134,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"19866:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2135,"name":"playerCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"19870:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19866:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2253,"initializationExpression":{"assignments":[2131],"declarations":[{"constant":false,"id":2131,"mutability":"mutable","name":"i","nameLocation":"19859:1:8","nodeType":"VariableDeclaration","scope":2253,"src":"19851:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2130,"name":"uint256","nodeType":"ElementaryTypeName","src":"19851:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2133,"initialValue":{"hexValue":"30","id":2132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19863:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19851:13:8"},"loopExpression":{"expression":{"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2137,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"19883:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19888:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"19883:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2140,"nodeType":"ExpressionStatement","src":"19883:6:8"},"nodeType":"ForStatement","src":"19846:1095:8"}]},"documentation":{"id":2112,"nodeType":"StructuredDocumentation","src":"19478:103:8","text":" @dev Generate single elimination matches\n @param tournamentId Tournament ID"},"id":2255,"implemented":true,"kind":"function","modifiers":[],"name":"generateSingleEliminationMatches","nameLocation":"19596:32:8","nodeType":"FunctionDefinition","parameters":{"id":2115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2114,"mutability":"mutable","name":"tournamentId","nameLocation":"19637:12:8","nodeType":"VariableDeclaration","scope":2255,"src":"19629:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2113,"name":"uint256","nodeType":"ElementaryTypeName","src":"19629:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19628:22:8"},"returnParameters":{"id":2116,"nodeType":"ParameterList","parameters":[],"src":"19660:0:8"},"scope":2647,"src":"19587:1361:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2367,"nodeType":"Block","src":"21128:815:8","statements":[{"assignments":[2263],"declarations":[{"constant":false,"id":2263,"mutability":"mutable","name":"tournament","nameLocation":"21158:10:8","nodeType":"VariableDeclaration","scope":2367,"src":"21139:29:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"},"typeName":{"id":2262,"nodeType":"UserDefinedTypeName","pathNode":{"id":2261,"name":"Tournament","nameLocations":["21139:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":800,"src":"21139:10:8"},"referencedDeclaration":800,"src":"21139:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"}},"visibility":"internal"}],"id":2267,"initialValue":{"baseExpression":{"id":2264,"name":"tournaments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"21171:11:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Tournament_$800_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Tournament storage ref)"}},"id":2266,"indexExpression":{"id":2265,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2258,"src":"21183:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21171:25:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage","typeString":"struct GamingTournament.Tournament storage ref"}},"nodeType":"VariableDeclarationStatement","src":"21139:57:8"},{"expression":{"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"21267:14:8","subExpression":{"id":2268,"name":"matchCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"21267:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2270,"nodeType":"ExpressionStatement","src":"21267:14:8"},{"assignments":[2272],"declarations":[{"constant":false,"id":2272,"mutability":"mutable","name":"matchId","nameLocation":"21300:7:8","nodeType":"VariableDeclaration","scope":2367,"src":"21292:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2271,"name":"uint256","nodeType":"ElementaryTypeName","src":"21292:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2274,"initialValue":{"id":2273,"name":"matchCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"21310:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21292:30:8"},{"assignments":[2277],"declarations":[{"constant":false,"id":2277,"mutability":"mutable","name":"matchData","nameLocation":"21357:9:8","nodeType":"VariableDeclaration","scope":2367,"src":"21343:23:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match"},"typeName":{"id":2276,"nodeType":"UserDefinedTypeName","pathNode":{"id":2275,"name":"Match","nameLocations":["21343:5:8"],"nodeType":"IdentifierPath","referencedDeclaration":841,"src":"21343:5:8"},"referencedDeclaration":841,"src":"21343:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match"}},"visibility":"internal"}],"id":2281,"initialValue":{"baseExpression":{"id":2278,"name":"matches","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"21369:7:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Match_$841_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Match storage ref)"}},"id":2280,"indexExpression":{"id":2279,"name":"matchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"21377:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21369:16:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage","typeString":"struct GamingTournament.Match storage ref"}},"nodeType":"VariableDeclarationStatement","src":"21343:42:8"},{"expression":{"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2282,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"21396:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2284,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"21406:7:8","memberName":"matchId","nodeType":"MemberAccess","referencedDeclaration":817,"src":"21396:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2285,"name":"matchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"21416:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21396:27:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2287,"nodeType":"ExpressionStatement","src":"21396:27:8"},{"expression":{"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2288,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"21434:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2290,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"21444:12:8","memberName":"tournamentId","nodeType":"MemberAccess","referencedDeclaration":819,"src":"21434:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2291,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2258,"src":"21459:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21434:37:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2293,"nodeType":"ExpressionStatement","src":"21434:37:8"},{"expression":{"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2294,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"21482:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2296,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"21492:7:8","memberName":"player1","nodeType":"MemberAccess","referencedDeclaration":821,"src":"21482:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"expression":{"id":2297,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"21502:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2298,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21513:7:8","memberName":"players","nodeType":"MemberAccess","referencedDeclaration":786,"src":"21502:18:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2300,"indexExpression":{"hexValue":"30","id":2299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21521:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21502:21:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"21482:41:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2302,"nodeType":"ExpressionStatement","src":"21482:41:8"},{"expression":{"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2303,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"21534:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2305,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"21544:7:8","memberName":"player2","nodeType":"MemberAccess","referencedDeclaration":823,"src":"21534:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"expression":{"id":2306,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"21554:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2307,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21565:7:8","memberName":"players","nodeType":"MemberAccess","referencedDeclaration":786,"src":"21554:18:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2309,"indexExpression":{"hexValue":"31","id":2308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21573:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21554:21:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"21534:41:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2311,"nodeType":"ExpressionStatement","src":"21534:41:8"},{"expression":{"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2312,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"21586:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2314,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"21596:6:8","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":828,"src":"21586:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2315,"name":"MatchStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"21605:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MatchStatus_$757_$","typeString":"type(enum GamingTournament.MatchStatus)"}},"id":2316,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"21617:9:8","memberName":"SCHEDULED","nodeType":"MemberAccess","referencedDeclaration":753,"src":"21605:21:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"src":"21586:40:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"id":2318,"nodeType":"ExpressionStatement","src":"21586:40:8"},{"expression":{"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2319,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"21637:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2321,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"21647:9:8","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":830,"src":"21637:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2322,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"21659:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2323,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21670:9:8","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":779,"src":"21659:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21637:42:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2325,"nodeType":"ExpressionStatement","src":"21637:42:8"},{"expression":{"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2326,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"21690:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2328,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"21700:5:8","memberName":"isBye","nodeType":"MemberAccess","referencedDeclaration":840,"src":"21690:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":2329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"21708:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"21690:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2331,"nodeType":"ExpressionStatement","src":"21690:23:8"},{"expression":{"arguments":[{"id":2337,"name":"matchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"21759:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":2332,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"21734:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2335,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21745:8:8","memberName":"matchIds","nodeType":"MemberAccess","referencedDeclaration":789,"src":"21734:19:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21754:4:8","memberName":"push","nodeType":"MemberAccess","src":"21734:24:8","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21734:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2339,"nodeType":"ExpressionStatement","src":"21734:33:8"},{"body":{"id":2362,"nodeType":"Block","src":"21834:77:8","statements":[{"expression":{"arguments":[{"id":2359,"name":"matchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"21891:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":2352,"name":"playerMatches","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"21849:13:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":2357,"indexExpression":{"baseExpression":{"expression":{"id":2353,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"21863:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2354,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21874:7:8","memberName":"players","nodeType":"MemberAccess","referencedDeclaration":786,"src":"21863:18:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2356,"indexExpression":{"id":2355,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"21882:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21863:21:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21849:36:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21886:4:8","memberName":"push","nodeType":"MemberAccess","src":"21849:41:8","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21849:50:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2361,"nodeType":"ExpressionStatement","src":"21849:50:8"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2344,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"21798:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":2345,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"21802:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2346,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21813:7:8","memberName":"players","nodeType":"MemberAccess","referencedDeclaration":786,"src":"21802:18:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21821:6:8","memberName":"length","nodeType":"MemberAccess","src":"21802:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21798:29:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2363,"initializationExpression":{"assignments":[2341],"declarations":[{"constant":false,"id":2341,"mutability":"mutable","name":"i","nameLocation":"21791:1:8","nodeType":"VariableDeclaration","scope":2363,"src":"21783:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2340,"name":"uint256","nodeType":"ElementaryTypeName","src":"21783:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2343,"initialValue":{"hexValue":"30","id":2342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21795:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"21783:13:8"},"loopExpression":{"expression":{"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"21829:3:8","subExpression":{"id":2349,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"21829:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2351,"nodeType":"ExpressionStatement","src":"21829:3:8"},"nodeType":"ForStatement","src":"21778:133:8"},{"expression":{"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"21921:14:8","subExpression":{"id":2364,"name":"totalMatches","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"21921:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2366,"nodeType":"ExpressionStatement","src":"21921:14:8"}]},"documentation":{"id":2256,"nodeType":"StructuredDocumentation","src":"20960:96:8","text":" @dev Generate battle royale match\n @param tournamentId Tournament ID"},"id":2368,"implemented":true,"kind":"function","modifiers":[],"name":"generateBattleRoyaleMatch","nameLocation":"21071:25:8","nodeType":"FunctionDefinition","parameters":{"id":2259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2258,"mutability":"mutable","name":"tournamentId","nameLocation":"21105:12:8","nodeType":"VariableDeclaration","scope":2368,"src":"21097:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2257,"name":"uint256","nodeType":"ElementaryTypeName","src":"21097:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21096:22:8"},"returnParameters":{"id":2260,"nodeType":"ParameterList","parameters":[],"src":"21128:0:8"},"scope":2647,"src":"21062:881:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2433,"nodeType":"Block","src":"22690:530:8","statements":[{"assignments":[2402],"declarations":[{"constant":false,"id":2402,"mutability":"mutable","name":"tournament","nameLocation":"22720:10:8","nodeType":"VariableDeclaration","scope":2433,"src":"22701:29:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"},"typeName":{"id":2401,"nodeType":"UserDefinedTypeName","pathNode":{"id":2400,"name":"Tournament","nameLocations":["22701:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":800,"src":"22701:10:8"},"referencedDeclaration":800,"src":"22701:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament"}},"visibility":"internal"}],"id":2406,"initialValue":{"baseExpression":{"id":2403,"name":"tournaments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"22733:11:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Tournament_$800_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Tournament storage ref)"}},"id":2405,"indexExpression":{"id":2404,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"22745:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22733:25:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage","typeString":"struct GamingTournament.Tournament storage ref"}},"nodeType":"VariableDeclarationStatement","src":"22701:57:8"},{"expression":{"components":[{"expression":{"id":2407,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2402,"src":"22791:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"22802:12:8","memberName":"tournamentId","nodeType":"MemberAccess","referencedDeclaration":759,"src":"22791:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2409,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2402,"src":"22829:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2410,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"22840:4:8","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":761,"src":"22829:15:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},{"expression":{"id":2411,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2402,"src":"22859:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2412,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"22870:11:8","memberName":"description","nodeType":"MemberAccess","referencedDeclaration":763,"src":"22859:22:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},{"expression":{"id":2413,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2402,"src":"22896:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2414,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"22907:14:8","memberName":"tournamentType","nodeType":"MemberAccess","referencedDeclaration":766,"src":"22896:25:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"}},{"expression":{"id":2415,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2402,"src":"22936:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2416,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"22947:6:8","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":769,"src":"22936:17:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},{"expression":{"id":2417,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2402,"src":"22968:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2418,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"22979:8:8","memberName":"entryFee","nodeType":"MemberAccess","referencedDeclaration":771,"src":"22968:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2419,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2402,"src":"23002:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2420,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23013:9:8","memberName":"prizePool","nodeType":"MemberAccess","referencedDeclaration":773,"src":"23002:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2421,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2402,"src":"23037:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2422,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23048:10:8","memberName":"maxPlayers","nodeType":"MemberAccess","referencedDeclaration":775,"src":"23037:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2423,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2402,"src":"23073:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2424,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23084:14:8","memberName":"currentPlayers","nodeType":"MemberAccess","referencedDeclaration":777,"src":"23073:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2425,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2402,"src":"23113:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2426,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23124:9:8","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":779,"src":"23113:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2427,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2402,"src":"23148:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2428,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23159:7:8","memberName":"endTime","nodeType":"MemberAccess","referencedDeclaration":781,"src":"23148:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2429,"name":"tournament","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2402,"src":"23181:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage_ptr","typeString":"struct GamingTournament.Tournament storage pointer"}},"id":2430,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23192:9:8","memberName":"organizer","nodeType":"MemberAccess","referencedDeclaration":783,"src":"23181:20:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2431,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22776:436:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_string_storage_$_t_string_storage_$_t_enum$_TournamentType_$752_$_t_enum$_TournamentStatus_$746_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$","typeString":"tuple(uint256,string storage ref,string storage ref,enum GamingTournament.TournamentType,enum GamingTournament.TournamentStatus,uint256,uint256,uint256,uint256,uint256,uint256,address)"}},"functionReturnParameters":2399,"id":2432,"nodeType":"Return","src":"22769:443:8"}]},"documentation":{"id":2369,"nodeType":"StructuredDocumentation","src":"22156:94:8","text":" @dev Get tournament information\n @param tournamentId Tournament ID"},"functionSelector":"1a5bd7fc","id":2434,"implemented":true,"kind":"function","modifiers":[],"name":"getTournament","nameLocation":"22265:13:8","nodeType":"FunctionDefinition","parameters":{"id":2372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2371,"mutability":"mutable","name":"tournamentId","nameLocation":"22287:12:8","nodeType":"VariableDeclaration","scope":2434,"src":"22279:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2370,"name":"uint256","nodeType":"ElementaryTypeName","src":"22279:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22278:22:8"},"returnParameters":{"id":2399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2374,"mutability":"mutable","name":"id","nameLocation":"22342:2:8","nodeType":"VariableDeclaration","scope":2434,"src":"22334:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2373,"name":"uint256","nodeType":"ElementaryTypeName","src":"22334:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2376,"mutability":"mutable","name":"name","nameLocation":"22369:4:8","nodeType":"VariableDeclaration","scope":2434,"src":"22355:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2375,"name":"string","nodeType":"ElementaryTypeName","src":"22355:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2378,"mutability":"mutable","name":"description","nameLocation":"22398:11:8","nodeType":"VariableDeclaration","scope":2434,"src":"22384:25:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2377,"name":"string","nodeType":"ElementaryTypeName","src":"22384:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2381,"mutability":"mutable","name":"tournamentType","nameLocation":"22435:14:8","nodeType":"VariableDeclaration","scope":2434,"src":"22420:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"},"typeName":{"id":2380,"nodeType":"UserDefinedTypeName","pathNode":{"id":2379,"name":"TournamentType","nameLocations":["22420:14:8"],"nodeType":"IdentifierPath","referencedDeclaration":752,"src":"22420:14:8"},"referencedDeclaration":752,"src":"22420:14:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentType_$752","typeString":"enum GamingTournament.TournamentType"}},"visibility":"internal"},{"constant":false,"id":2384,"mutability":"mutable","name":"status","nameLocation":"22477:6:8","nodeType":"VariableDeclaration","scope":2434,"src":"22460:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"},"typeName":{"id":2383,"nodeType":"UserDefinedTypeName","pathNode":{"id":2382,"name":"TournamentStatus","nameLocations":["22460:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":746,"src":"22460:16:8"},"referencedDeclaration":746,"src":"22460:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_TournamentStatus_$746","typeString":"enum GamingTournament.TournamentStatus"}},"visibility":"internal"},{"constant":false,"id":2386,"mutability":"mutable","name":"entryFee","nameLocation":"22502:8:8","nodeType":"VariableDeclaration","scope":2434,"src":"22494:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2385,"name":"uint256","nodeType":"ElementaryTypeName","src":"22494:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2388,"mutability":"mutable","name":"prizePool","nameLocation":"22529:9:8","nodeType":"VariableDeclaration","scope":2434,"src":"22521:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2387,"name":"uint256","nodeType":"ElementaryTypeName","src":"22521:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2390,"mutability":"mutable","name":"maxPlayers","nameLocation":"22557:10:8","nodeType":"VariableDeclaration","scope":2434,"src":"22549:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2389,"name":"uint256","nodeType":"ElementaryTypeName","src":"22549:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2392,"mutability":"mutable","name":"currentPlayers","nameLocation":"22586:14:8","nodeType":"VariableDeclaration","scope":2434,"src":"22578:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2391,"name":"uint256","nodeType":"ElementaryTypeName","src":"22578:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2394,"mutability":"mutable","name":"startTime","nameLocation":"22619:9:8","nodeType":"VariableDeclaration","scope":2434,"src":"22611:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2393,"name":"uint256","nodeType":"ElementaryTypeName","src":"22611:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2396,"mutability":"mutable","name":"endTime","nameLocation":"22647:7:8","nodeType":"VariableDeclaration","scope":2434,"src":"22639:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2395,"name":"uint256","nodeType":"ElementaryTypeName","src":"22639:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2398,"mutability":"mutable","name":"organizer","nameLocation":"22673:9:8","nodeType":"VariableDeclaration","scope":2434,"src":"22665:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2397,"name":"address","nodeType":"ElementaryTypeName","src":"22665:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"22323:366:8"},"scope":2647,"src":"22256:964:8","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2448,"nodeType":"Block","src":"23471:59:8","statements":[{"expression":{"expression":{"baseExpression":{"id":2443,"name":"tournaments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"23489:11:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Tournament_$800_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Tournament storage ref)"}},"id":2445,"indexExpression":{"id":2444,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"23501:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23489:25:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage","typeString":"struct GamingTournament.Tournament storage ref"}},"id":2446,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23515:7:8","memberName":"players","nodeType":"MemberAccess","referencedDeclaration":786,"src":"23489:33:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"functionReturnParameters":2442,"id":2447,"nodeType":"Return","src":"23482:40:8"}]},"documentation":{"id":2435,"nodeType":"StructuredDocumentation","src":"23232:140:8","text":" @dev Get tournament players\n @param tournamentId Tournament ID\n @return players Array of player addresses"},"functionSelector":"26f7519a","id":2449,"implemented":true,"kind":"function","modifiers":[],"name":"getTournamentPlayers","nameLocation":"23387:20:8","nodeType":"FunctionDefinition","parameters":{"id":2438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2437,"mutability":"mutable","name":"tournamentId","nameLocation":"23416:12:8","nodeType":"VariableDeclaration","scope":2449,"src":"23408:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2436,"name":"uint256","nodeType":"ElementaryTypeName","src":"23408:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23407:22:8"},"returnParameters":{"id":2442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2441,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2449,"src":"23453:16:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2439,"name":"address","nodeType":"ElementaryTypeName","src":"23453:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2440,"nodeType":"ArrayTypeName","src":"23453:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"23452:18:8"},"scope":2647,"src":"23378:152:8","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2497,"nodeType":"Block","src":"23962:322:8","statements":[{"assignments":[2473],"declarations":[{"constant":false,"id":2473,"mutability":"mutable","name":"stats","nameLocation":"23993:5:8","nodeType":"VariableDeclaration","scope":2497,"src":"23973:25:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage_ptr","typeString":"struct GamingTournament.PlayerStats"},"typeName":{"id":2472,"nodeType":"UserDefinedTypeName","pathNode":{"id":2471,"name":"PlayerStats","nameLocations":["23973:11:8"],"nodeType":"IdentifierPath","referencedDeclaration":815,"src":"23973:11:8"},"referencedDeclaration":815,"src":"23973:11:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage_ptr","typeString":"struct GamingTournament.PlayerStats"}},"visibility":"internal"}],"id":2480,"initialValue":{"baseExpression":{"expression":{"baseExpression":{"id":2474,"name":"tournaments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"24001:11:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Tournament_$800_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Tournament storage ref)"}},"id":2476,"indexExpression":{"id":2475,"name":"tournamentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2452,"src":"24013:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24001:25:8","typeDescriptions":{"typeIdentifier":"t_struct$_Tournament_$800_storage","typeString":"struct GamingTournament.Tournament storage ref"}},"id":2477,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24027:11:8","memberName":"playerStats","nodeType":"MemberAccess","referencedDeclaration":794,"src":"24001:37:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PlayerStats_$815_storage_$","typeString":"mapping(address => struct GamingTournament.PlayerStats storage ref)"}},"id":2479,"indexExpression":{"id":2478,"name":"player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"24039:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24001:45:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage","typeString":"struct GamingTournament.PlayerStats storage ref"}},"nodeType":"VariableDeclarationStatement","src":"23973:73:8"},{"expression":{"components":[{"expression":{"id":2481,"name":"stats","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"24079:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage_ptr","typeString":"struct GamingTournament.PlayerStats storage pointer"}},"id":2482,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24085:4:8","memberName":"wins","nodeType":"MemberAccess","referencedDeclaration":802,"src":"24079:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2483,"name":"stats","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"24104:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage_ptr","typeString":"struct GamingTournament.PlayerStats storage pointer"}},"id":2484,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24110:6:8","memberName":"losses","nodeType":"MemberAccess","referencedDeclaration":804,"src":"24104:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2485,"name":"stats","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"24131:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage_ptr","typeString":"struct GamingTournament.PlayerStats storage pointer"}},"id":2486,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24137:5:8","memberName":"draws","nodeType":"MemberAccess","referencedDeclaration":806,"src":"24131:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2487,"name":"stats","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"24157:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage_ptr","typeString":"struct GamingTournament.PlayerStats storage pointer"}},"id":2488,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24163:10:8","memberName":"totalScore","nodeType":"MemberAccess","referencedDeclaration":808,"src":"24157:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2489,"name":"stats","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"24188:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage_ptr","typeString":"struct GamingTournament.PlayerStats storage pointer"}},"id":2490,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24194:4:8","memberName":"rank","nodeType":"MemberAccess","referencedDeclaration":810,"src":"24188:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2491,"name":"stats","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"24213:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage_ptr","typeString":"struct GamingTournament.PlayerStats storage pointer"}},"id":2492,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24219:12:8","memberName":"isEliminated","nodeType":"MemberAccess","referencedDeclaration":812,"src":"24213:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":2493,"name":"stats","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"24246:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_PlayerStats_$815_storage_ptr","typeString":"struct GamingTournament.PlayerStats storage pointer"}},"id":2494,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24252:13:8","memberName":"lastMatchTime","nodeType":"MemberAccess","referencedDeclaration":814,"src":"24246:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2495,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"24064:212:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256,uint256,uint256,bool,uint256)"}},"functionReturnParameters":2470,"id":2496,"nodeType":"Return","src":"24057:219:8"}]},"documentation":{"id":2450,"nodeType":"StructuredDocumentation","src":"23542:138:8","text":" @dev Get player stats for a tournament\n @param tournamentId Tournament ID\n @param player Player address"},"functionSelector":"66ccf959","id":2498,"implemented":true,"kind":"function","modifiers":[],"name":"getPlayerStats","nameLocation":"23695:14:8","nodeType":"FunctionDefinition","parameters":{"id":2455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2452,"mutability":"mutable","name":"tournamentId","nameLocation":"23718:12:8","nodeType":"VariableDeclaration","scope":2498,"src":"23710:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2451,"name":"uint256","nodeType":"ElementaryTypeName","src":"23710:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2454,"mutability":"mutable","name":"player","nameLocation":"23740:6:8","nodeType":"VariableDeclaration","scope":2498,"src":"23732:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2453,"name":"address","nodeType":"ElementaryTypeName","src":"23732:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"23709:38:8"},"returnParameters":{"id":2470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2457,"mutability":"mutable","name":"wins","nameLocation":"23789:4:8","nodeType":"VariableDeclaration","scope":2498,"src":"23781:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2456,"name":"uint256","nodeType":"ElementaryTypeName","src":"23781:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2459,"mutability":"mutable","name":"losses","nameLocation":"23812:6:8","nodeType":"VariableDeclaration","scope":2498,"src":"23804:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2458,"name":"uint256","nodeType":"ElementaryTypeName","src":"23804:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2461,"mutability":"mutable","name":"draws","nameLocation":"23837:5:8","nodeType":"VariableDeclaration","scope":2498,"src":"23829:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2460,"name":"uint256","nodeType":"ElementaryTypeName","src":"23829:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2463,"mutability":"mutable","name":"totalScore","nameLocation":"23861:10:8","nodeType":"VariableDeclaration","scope":2498,"src":"23853:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2462,"name":"uint256","nodeType":"ElementaryTypeName","src":"23853:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2465,"mutability":"mutable","name":"rank","nameLocation":"23890:4:8","nodeType":"VariableDeclaration","scope":2498,"src":"23882:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2464,"name":"uint256","nodeType":"ElementaryTypeName","src":"23882:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2467,"mutability":"mutable","name":"isEliminated","nameLocation":"23910:12:8","nodeType":"VariableDeclaration","scope":2498,"src":"23905:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2466,"name":"bool","nodeType":"ElementaryTypeName","src":"23905:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2469,"mutability":"mutable","name":"lastMatchTime","nameLocation":"23941:13:8","nodeType":"VariableDeclaration","scope":2498,"src":"23933:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2468,"name":"uint256","nodeType":"ElementaryTypeName","src":"23933:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23770:191:8"},"scope":2647,"src":"23686:598:8","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2562,"nodeType":"Block","src":"24774:488:8","statements":[{"assignments":[2531],"declarations":[{"constant":false,"id":2531,"mutability":"mutable","name":"matchData","nameLocation":"24799:9:8","nodeType":"VariableDeclaration","scope":2562,"src":"24785:23:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match"},"typeName":{"id":2530,"nodeType":"UserDefinedTypeName","pathNode":{"id":2529,"name":"Match","nameLocations":["24785:5:8"],"nodeType":"IdentifierPath","referencedDeclaration":841,"src":"24785:5:8"},"referencedDeclaration":841,"src":"24785:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match"}},"visibility":"internal"}],"id":2535,"initialValue":{"baseExpression":{"id":2532,"name":"matches","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"24811:7:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Match_$841_storage_$","typeString":"mapping(uint256 => struct GamingTournament.Match storage ref)"}},"id":2534,"indexExpression":{"id":2533,"name":"matchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2501,"src":"24819:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24811:16:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage","typeString":"struct GamingTournament.Match storage ref"}},"nodeType":"VariableDeclarationStatement","src":"24785:42:8"},{"expression":{"components":[{"expression":{"id":2536,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"24860:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2537,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24870:7:8","memberName":"matchId","nodeType":"MemberAccess","referencedDeclaration":817,"src":"24860:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2538,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"24892:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2539,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24902:12:8","memberName":"tournamentId","nodeType":"MemberAccess","referencedDeclaration":819,"src":"24892:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2540,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"24929:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2541,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24939:7:8","memberName":"player1","nodeType":"MemberAccess","referencedDeclaration":821,"src":"24929:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2542,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"24961:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2543,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24971:7:8","memberName":"player2","nodeType":"MemberAccess","referencedDeclaration":823,"src":"24961:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2544,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"24993:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2545,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25003:6:8","memberName":"winner","nodeType":"MemberAccess","referencedDeclaration":825,"src":"24993:16:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2546,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"25024:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2547,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25034:6:8","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":828,"src":"25024:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},{"expression":{"id":2548,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"25055:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2549,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25065:9:8","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":830,"src":"25055:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2550,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"25089:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2551,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25099:7:8","memberName":"endTime","nodeType":"MemberAccess","referencedDeclaration":832,"src":"25089:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2552,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"25121:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2553,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25131:12:8","memberName":"player1Score","nodeType":"MemberAccess","referencedDeclaration":834,"src":"25121:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2554,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"25158:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2555,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25168:12:8","memberName":"player2Score","nodeType":"MemberAccess","referencedDeclaration":836,"src":"25158:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2556,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"25195:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2557,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25205:8:8","memberName":"gameData","nodeType":"MemberAccess","referencedDeclaration":838,"src":"25195:18:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},{"expression":{"id":2558,"name":"matchData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"25228:9:8","typeDescriptions":{"typeIdentifier":"t_struct$_Match_$841_storage_ptr","typeString":"struct GamingTournament.Match storage pointer"}},"id":2559,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25238:5:8","memberName":"isBye","nodeType":"MemberAccess","referencedDeclaration":840,"src":"25228:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2560,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"24845:409:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_address_$_t_address_$_t_address_$_t_enum$_MatchStatus_$757_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_string_storage_$_t_bool_$","typeString":"tuple(uint256,uint256,address,address,address,enum GamingTournament.MatchStatus,uint256,uint256,uint256,uint256,string storage ref,bool)"}},"functionReturnParameters":2528,"id":2561,"nodeType":"Return","src":"24838:416:8"}]},"documentation":{"id":2499,"nodeType":"StructuredDocumentation","src":"24296:79:8","text":" @dev Get match information\n @param matchId Match ID"},"functionSelector":"3d092b3d","id":2563,"implemented":true,"kind":"function","modifiers":[],"name":"getMatch","nameLocation":"24390:8:8","nodeType":"FunctionDefinition","parameters":{"id":2502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2501,"mutability":"mutable","name":"matchId","nameLocation":"24407:7:8","nodeType":"VariableDeclaration","scope":2563,"src":"24399:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2500,"name":"uint256","nodeType":"ElementaryTypeName","src":"24399:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24398:17:8"},"returnParameters":{"id":2528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2504,"mutability":"mutable","name":"id","nameLocation":"24457:2:8","nodeType":"VariableDeclaration","scope":2563,"src":"24449:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2503,"name":"uint256","nodeType":"ElementaryTypeName","src":"24449:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2506,"mutability":"mutable","name":"tournamentId","nameLocation":"24478:12:8","nodeType":"VariableDeclaration","scope":2563,"src":"24470:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2505,"name":"uint256","nodeType":"ElementaryTypeName","src":"24470:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2508,"mutability":"mutable","name":"player1","nameLocation":"24509:7:8","nodeType":"VariableDeclaration","scope":2563,"src":"24501:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2507,"name":"address","nodeType":"ElementaryTypeName","src":"24501:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2510,"mutability":"mutable","name":"player2","nameLocation":"24535:7:8","nodeType":"VariableDeclaration","scope":2563,"src":"24527:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2509,"name":"address","nodeType":"ElementaryTypeName","src":"24527:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2512,"mutability":"mutable","name":"winner","nameLocation":"24561:6:8","nodeType":"VariableDeclaration","scope":2563,"src":"24553:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2511,"name":"address","nodeType":"ElementaryTypeName","src":"24553:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2515,"mutability":"mutable","name":"status","nameLocation":"24590:6:8","nodeType":"VariableDeclaration","scope":2563,"src":"24578:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"},"typeName":{"id":2514,"nodeType":"UserDefinedTypeName","pathNode":{"id":2513,"name":"MatchStatus","nameLocations":["24578:11:8"],"nodeType":"IdentifierPath","referencedDeclaration":757,"src":"24578:11:8"},"referencedDeclaration":757,"src":"24578:11:8","typeDescriptions":{"typeIdentifier":"t_enum$_MatchStatus_$757","typeString":"enum GamingTournament.MatchStatus"}},"visibility":"internal"},{"constant":false,"id":2517,"mutability":"mutable","name":"startTime","nameLocation":"24615:9:8","nodeType":"VariableDeclaration","scope":2563,"src":"24607:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2516,"name":"uint256","nodeType":"ElementaryTypeName","src":"24607:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2519,"mutability":"mutable","name":"endTime","nameLocation":"24643:7:8","nodeType":"VariableDeclaration","scope":2563,"src":"24635:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2518,"name":"uint256","nodeType":"ElementaryTypeName","src":"24635:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2521,"mutability":"mutable","name":"player1Score","nameLocation":"24669:12:8","nodeType":"VariableDeclaration","scope":2563,"src":"24661:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2520,"name":"uint256","nodeType":"ElementaryTypeName","src":"24661:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2523,"mutability":"mutable","name":"player2Score","nameLocation":"24700:12:8","nodeType":"VariableDeclaration","scope":2563,"src":"24692:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2522,"name":"uint256","nodeType":"ElementaryTypeName","src":"24692:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2525,"mutability":"mutable","name":"gameData","nameLocation":"24737:8:8","nodeType":"VariableDeclaration","scope":2563,"src":"24723:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2524,"name":"string","nodeType":"ElementaryTypeName","src":"24723:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2527,"mutability":"mutable","name":"isBye","nameLocation":"24761:5:8","nodeType":"VariableDeclaration","scope":2563,"src":"24756:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2526,"name":"bool","nodeType":"ElementaryTypeName","src":"24756:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"24438:335:8"},"scope":2647,"src":"24381:881:8","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2583,"nodeType":"Block","src":"25664:97:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2573,"name":"newFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"25683:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"3530","id":2574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25693:2:8","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"src":"25683:12:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46656520746f6f2068696768","id":2576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"25697:14:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_48d9dea795d8d010580a5b191d0fe7c1ee70cd850707a0d7e7aba7c702de6be1","typeString":"literal_string \"Fee too high\""},"value":"Fee too high"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_48d9dea795d8d010580a5b191d0fe7c1ee70cd850707a0d7e7aba7c702de6be1","typeString":"literal_string \"Fee too high\""}],"id":2572,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"25675:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25675:37:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2578,"nodeType":"ExpressionStatement","src":"25675:37:8"},{"expression":{"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2579,"name":"platformFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"25733:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2580,"name":"newFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"25747:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25733:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2582,"nodeType":"ExpressionStatement","src":"25733:20:8"}]},"documentation":{"id":2564,"nodeType":"StructuredDocumentation","src":"25476:101:8","text":" @dev Update platform fee\n @param newFee New fee percentage (basis points)"},"functionSelector":"aa0b5988","id":2584,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2569,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"25644:18:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2570,"kind":"modifierInvocation","modifierName":{"id":2568,"name":"onlyRole","nameLocations":["25635:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"25635:8:8"},"nodeType":"ModifierInvocation","src":"25635:28:8"}],"name":"updatePlatformFee","nameLocation":"25592:17:8","nodeType":"FunctionDefinition","parameters":{"id":2567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2566,"mutability":"mutable","name":"newFee","nameLocation":"25618:6:8","nodeType":"VariableDeclaration","scope":2584,"src":"25610:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2565,"name":"uint256","nodeType":"ElementaryTypeName","src":"25610:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25609:16:8"},"returnParameters":{"id":2571,"nodeType":"ParameterList","parameters":[],"src":"25664:0:8"},"scope":2647,"src":"25583:178:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2604,"nodeType":"Block","src":"25963:100:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2594,"name":"newFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"25982:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"313030","id":2595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25992:3:8","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"25982:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46656520746f6f2068696768","id":2597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"25997:14:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_48d9dea795d8d010580a5b191d0fe7c1ee70cd850707a0d7e7aba7c702de6be1","typeString":"literal_string \"Fee too high\""},"value":"Fee too high"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_48d9dea795d8d010580a5b191d0fe7c1ee70cd850707a0d7e7aba7c702de6be1","typeString":"literal_string \"Fee too high\""}],"id":2593,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"25974:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25974:38:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2599,"nodeType":"ExpressionStatement","src":"25974:38:8"},{"expression":{"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2600,"name":"organizerFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"26034:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2601,"name":"newFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"26049:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26034:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2603,"nodeType":"ExpressionStatement","src":"26034:21:8"}]},"documentation":{"id":2585,"nodeType":"StructuredDocumentation","src":"25773:102:8","text":" @dev Update organizer fee\n @param newFee New fee percentage (basis points)"},"functionSelector":"56d47ecb","id":2605,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2590,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"25943:18:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2591,"kind":"modifierInvocation","modifierName":{"id":2589,"name":"onlyRole","nameLocations":["25934:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"25934:8:8"},"nodeType":"ModifierInvocation","src":"25934:28:8"}],"name":"updateOrganizerFee","nameLocation":"25890:18:8","nodeType":"FunctionDefinition","parameters":{"id":2588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2587,"mutability":"mutable","name":"newFee","nameLocation":"25917:6:8","nodeType":"VariableDeclaration","scope":2605,"src":"25909:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2586,"name":"uint256","nodeType":"ElementaryTypeName","src":"25909:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25908:16:8"},"returnParameters":{"id":2592,"nodeType":"ParameterList","parameters":[],"src":"25963:0:8"},"scope":2647,"src":"25881:182:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2615,"nodeType":"Block","src":"26181:27:8","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2612,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"26192:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26192:8:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2614,"nodeType":"ExpressionStatement","src":"26192:8:8"}]},"documentation":{"id":2606,"nodeType":"StructuredDocumentation","src":"26075:49:8","text":" @dev Pause tournament system"},"functionSelector":"8456cb59","id":2616,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2609,"name":"EMERGENCY_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"26165:14:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2610,"kind":"modifierInvocation","modifierName":{"id":2608,"name":"onlyRole","nameLocations":["26156:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"26156:8:8"},"nodeType":"ModifierInvocation","src":"26156:24:8"}],"name":"pause","nameLocation":"26139:5:8","nodeType":"FunctionDefinition","parameters":{"id":2607,"nodeType":"ParameterList","parameters":[],"src":"26144:2:8"},"returnParameters":{"id":2611,"nodeType":"ParameterList","parameters":[],"src":"26181:0:8"},"scope":2647,"src":"26130:78:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2626,"nodeType":"Block","src":"26330:29:8","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2623,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"26341:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26341:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2625,"nodeType":"ExpressionStatement","src":"26341:10:8"}]},"documentation":{"id":2617,"nodeType":"StructuredDocumentation","src":"26220:51:8","text":" @dev Unpause tournament system"},"functionSelector":"3f4ba83a","id":2627,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2620,"name":"EMERGENCY_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"26314:14:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2621,"kind":"modifierInvocation","modifierName":{"id":2619,"name":"onlyRole","nameLocations":["26305:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"26305:8:8"},"nodeType":"ModifierInvocation","src":"26305:24:8"}],"name":"unpause","nameLocation":"26286:7:8","nodeType":"FunctionDefinition","parameters":{"id":2618,"nodeType":"ParameterList","parameters":[],"src":"26293:2:8"},"returnParameters":{"id":2622,"nodeType":"ParameterList","parameters":[],"src":"26330:0:8"},"scope":2647,"src":"26277:82:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2645,"nodeType":"Block","src":"26546:64:8","statements":[{"expression":{"arguments":[{"expression":{"id":2640,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"26583:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26587:6:8","memberName":"sender","nodeType":"MemberAccess","src":"26583:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2642,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2630,"src":"26595:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2637,"name":"gdiToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"26564:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2636,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"26557:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$456_$","typeString":"type(contract IERC20)"}},"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26557:16:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$456","typeString":"contract IERC20"}},"id":2639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26574:8:8","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":423,"src":"26557:25:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26557:45:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2644,"nodeType":"ExpressionStatement","src":"26557:45:8"}]},"documentation":{"id":2628,"nodeType":"StructuredDocumentation","src":"26371:92:8","text":" @dev Emergency withdraw tokens\n @param amount Amount to withdraw"},"functionSelector":"5312ea8e","id":2646,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2633,"name":"EMERGENCY_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"26530:14:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2634,"kind":"modifierInvocation","modifierName":{"id":2632,"name":"onlyRole","nameLocations":["26521:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"26521:8:8"},"nodeType":"ModifierInvocation","src":"26521:24:8"}],"name":"emergencyWithdraw","nameLocation":"26478:17:8","nodeType":"FunctionDefinition","parameters":{"id":2631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2630,"mutability":"mutable","name":"amount","nameLocation":"26504:6:8","nodeType":"VariableDeclaration","scope":2646,"src":"26496:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2629,"name":"uint256","nodeType":"ElementaryTypeName","src":"26496:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26495:16:8"},"returnParameters":{"id":2635,"nodeType":"ParameterList","parameters":[],"src":"26546:0:8"},"scope":2647,"src":"26469:141:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2648,"src":"502:26111:8","usedErrors":[305,308,508,511,608],"usedEvents":[317,326,335,500,505,908,918,926,938,950,960,970]}],"src":"33:26581:8"},"id":8}},"contracts":{"@openzeppelin/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":26,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)21_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)21_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)21_storage"},"t_struct(RoleData)21_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":18,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"hasRole","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":20,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/IAccessControl.sol":{"IAccessControl":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC-165 detection.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC-165 detection.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC-20 standard as defined in the ERC.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Pausable.sol":{"Pausable":{"abi":[{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","errors":{"EnforcedPause()":[{"details":"The operation failed because the contract is paused."}],"ExpectedPause()":[{"details":"The operation failed because the contract is not paused."}]},"events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":495,"contract":"@openzeppelin/contracts/utils/Pausable.sol:Pausable","label":"_paused","offset":0,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","errors":{"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":605,"contract":"@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/GamingTournament.sol":{"GamingTournament":{"abi":[{"inputs":[{"internalType":"address","name":"_gdiToken","type":"address"},{"internalType":"address","name":"_gamingCore","type":"address"},{"internalType":"address","name":"_aiOracle","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"matchId","type":"uint256"},{"indexed":true,"internalType":"address","name":"winner","type":"address"},{"indexed":false,"internalType":"uint256","name":"player1Score","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"player2Score","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"MatchCompleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"matchId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"tournamentId","type":"uint256"},{"indexed":false,"internalType":"address","name":"player1","type":"address"},{"indexed":false,"internalType":"address","name":"player2","type":"address"},{"indexed":false,"internalType":"uint256","name":"scheduledTime","type":"uint256"}],"name":"MatchCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tournamentId","type":"uint256"},{"indexed":true,"internalType":"address","name":"player","type":"address"},{"indexed":false,"internalType":"uint256","name":"entryFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"PlayerRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tournamentId","type":"uint256"},{"indexed":true,"internalType":"address","name":"player","type":"address"},{"indexed":false,"internalType":"uint256","name":"rank","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"prizeAmount","type":"uint256"}],"name":"PrizeDistributed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tournamentId","type":"uint256"},{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"enum GamingTournament.TournamentType","name":"tournamentType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"entryFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maxPlayers","type":"uint256"},{"indexed":true,"internalType":"address","name":"organizer","type":"address"}],"name":"TournamentCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tournamentId","type":"uint256"},{"indexed":true,"internalType":"address","name":"winner","type":"address"},{"indexed":false,"internalType":"uint256","name":"prizeAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"TournamentFinished","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tournamentId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalPlayers","type":"uint256"}],"name":"TournamentStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"EMERGENCY_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MATCH_REFEREE_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_TOURNAMENT_DURATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_TOURNAMENT_PLAYERS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_TOURNAMENT_DURATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_TOURNAMENT_PLAYERS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOURNAMENT_ORGANIZER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"aiOracle","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"matchId","type":"uint256"},{"internalType":"address","name":"winner","type":"address"},{"internalType":"uint256","name":"player1Score","type":"uint256"},{"internalType":"uint256","name":"player2Score","type":"uint256"},{"internalType":"string","name":"gameData","type":"string"}],"name":"completeMatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tournamentId","type":"uint256"},{"internalType":"address","name":"player1","type":"address"},{"internalType":"address","name":"player2","type":"address"},{"internalType":"uint256","name":"scheduledTime","type":"uint256"}],"name":"createMatchPublic","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"enum GamingTournament.TournamentType","name":"tournamentType","type":"uint8"},{"internalType":"uint256","name":"entryFee","type":"uint256"},{"internalType":"uint256","name":"maxPlayers","type":"uint256"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"createTournament","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"emergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tournamentId","type":"uint256"},{"internalType":"address[]","name":"winners","type":"address[]"}],"name":"finishTournament","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"gamingCore","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"gdiToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"matchId","type":"uint256"}],"name":"getMatch","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"tournamentId","type":"uint256"},{"internalType":"address","name":"player1","type":"address"},{"internalType":"address","name":"player2","type":"address"},{"internalType":"address","name":"winner","type":"address"},{"internalType":"enum GamingTournament.MatchStatus","name":"status","type":"uint8"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"uint256","name":"player1Score","type":"uint256"},{"internalType":"uint256","name":"player2Score","type":"uint256"},{"internalType":"string","name":"gameData","type":"string"},{"internalType":"bool","name":"isBye","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tournamentId","type":"uint256"},{"internalType":"address","name":"player","type":"address"}],"name":"getPlayerStats","outputs":[{"internalType":"uint256","name":"wins","type":"uint256"},{"internalType":"uint256","name":"losses","type":"uint256"},{"internalType":"uint256","name":"draws","type":"uint256"},{"internalType":"uint256","name":"totalScore","type":"uint256"},{"internalType":"uint256","name":"rank","type":"uint256"},{"internalType":"bool","name":"isEliminated","type":"bool"},{"internalType":"uint256","name":"lastMatchTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tournamentId","type":"uint256"}],"name":"getTournament","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"enum GamingTournament.TournamentType","name":"tournamentType","type":"uint8"},{"internalType":"enum GamingTournament.TournamentStatus","name":"status","type":"uint8"},{"internalType":"uint256","name":"entryFee","type":"uint256"},{"internalType":"uint256","name":"prizePool","type":"uint256"},{"internalType":"uint256","name":"maxPlayers","type":"uint256"},{"internalType":"uint256","name":"currentPlayers","type":"uint256"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"address","name":"organizer","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tournamentId","type":"uint256"}],"name":"getTournamentPlayers","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tournamentId","type":"uint256"},{"internalType":"address","name":"player","type":"address"}],"name":"isPlayerRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"matchCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"matches","outputs":[{"internalType":"uint256","name":"matchId","type":"uint256"},{"internalType":"uint256","name":"tournamentId","type":"uint256"},{"internalType":"address","name":"player1","type":"address"},{"internalType":"address","name":"player2","type":"address"},{"internalType":"address","name":"winner","type":"address"},{"internalType":"enum GamingTournament.MatchStatus","name":"status","type":"uint8"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"uint256","name":"player1Score","type":"uint256"},{"internalType":"uint256","name":"player2Score","type":"uint256"},{"internalType":"string","name":"gameData","type":"string"},{"internalType":"bool","name":"isBye","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"organizerFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"platformFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"playerMatches","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"playerTournaments","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tournamentId","type":"uint256"}],"name":"registerForTournament","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tournamentId","type":"uint256"}],"name":"startTournament","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalMatches","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalPrizePool","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalTournaments","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tournamentCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tournaments","outputs":[{"internalType":"uint256","name":"tournamentId","type":"uint256"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"enum GamingTournament.TournamentType","name":"tournamentType","type":"uint8"},{"internalType":"enum GamingTournament.TournamentStatus","name":"status","type":"uint8"},{"internalType":"uint256","name":"entryFee","type":"uint256"},{"internalType":"uint256","name":"prizePool","type":"uint256"},{"internalType":"uint256","name":"maxPlayers","type":"uint256"},{"internalType":"uint256","name":"currentPlayers","type":"uint256"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"address","name":"organizer","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"updateOrganizerFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"updatePlatformFee","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Advanced tournament system for GameDin L3 gaming platform Handles tournament creation, player registration, matchmaking, and prize distribution","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"EnforcedPause()":[{"details":"The operation failed because the contract is paused."}],"ExpectedPause()":[{"details":"The operation failed because the contract is not paused."}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"completeMatch(uint256,address,uint256,uint256,string)":{"details":"Complete a match with results","params":{"gameData":"Additional game data","matchId":"Match ID","player1Score":"Player 1 score","player2Score":"Player 2 score","winner":"Winner address"}},"createMatchPublic(uint256,address,address,uint256)":{"details":"Create a match between two players (public interface)","params":{"player1":"First player address","player2":"Second player address","scheduledTime":"Scheduled match time","tournamentId":"Tournament ID"}},"createTournament(string,string,uint8,uint256,uint256,uint256,uint256)":{"details":"Create a new tournament","params":{"description":"Tournament description","duration":"Tournament duration","entryFee":"Entry fee in GDI tokens","maxPlayers":"Maximum number of players","name":"Tournament name","startTime":"Tournament start time","tournamentType":"Type of tournament"}},"emergencyWithdraw(uint256)":{"details":"Emergency withdraw tokens","params":{"amount":"Amount to withdraw"}},"finishTournament(uint256,address[])":{"details":"Finish a tournament and distribute prizes","params":{"tournamentId":"Tournament ID","winners":"Array of winner addresses in order"}},"getMatch(uint256)":{"details":"Get match information","params":{"matchId":"Match ID"}},"getPlayerStats(uint256,address)":{"details":"Get player stats for a tournament","params":{"player":"Player address","tournamentId":"Tournament ID"}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getTournament(uint256)":{"details":"Get tournament information","params":{"tournamentId":"Tournament ID"}},"getTournamentPlayers(uint256)":{"details":"Get tournament players","params":{"tournamentId":"Tournament ID"},"returns":{"_0":"players Array of player addresses"}},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"isPlayerRegistered(uint256,address)":{"details":"Check if a player is registered for a tournament","params":{"player":"Player address","tournamentId":"Tournament ID"},"returns":{"_0":"True if registered"}},"pause()":{"details":"Pause tournament system"},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"registerForTournament(uint256)":{"details":"Register for a tournament","params":{"tournamentId":"Tournament ID"}},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"startTournament(uint256)":{"details":"Start a tournament","params":{"tournamentId":"Tournament ID"}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"unpause()":{"details":"Unpause tournament system"},"updateOrganizerFee(uint256)":{"details":"Update organizer fee","params":{"newFee":"New fee percentage (basis points)"}},"updatePlatformFee(uint256)":{"details":"Update platform fee","params":{"newFee":"New fee percentage (basis points)"}}},"title":"GameDin Tournament Contract","version":1},"evm":{"bytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":296,"id":null,"parameterSlots":1,"returnSlots":1},"fun_grantRole":{"entryPoint":764,"id":256,"parameterSlots":1,"returnSlots":1},"fun_grantRole_939":{"entryPoint":317,"id":256,"parameterSlots":1,"returnSlots":1},"fun_grantRole_940":{"entryPoint":445,"id":256,"parameterSlots":1,"returnSlots":1},"fun_grantRole_941":{"entryPoint":607,"id":256,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"6080346200010d57601f6200414338819003918201601f19168301916001600160401b0383118484101762000112578084926060946040528339810103126200010d576200004d8162000128565b620000696040620000616020850162000128565b930162000128565b600180556005600e55600a600f5560028054610100600160a81b03191660089390931b610100600160a81b031692909217909155600380546001600160a01b03199081166001600160a01b03948516179091556004805490911692909116919091179055620000d8336200013d565b50620000e433620001bd565b50620000f0336200025f565b50620000fc33620002fc565b50604051613d8990816200039a8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200010d57565b6001600160a01b031660008181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205490919060ff16620001b957818052816020526040822081835260205260408220600160ff198254161790553391600080516020620041238339815191528180a4600190565b5090565b6001600160a01b031660008181527f938fae1ebe625f23a46c9c067bf25f1fdc5e976aab24e3d0ff1a7bd30da2864460205260408120549091907f65c9916f995116b13da98f2377109ffc8f2ed0372863561a4bf02356bfc80bf69060ff166200025a57808352826020526040832082845260205260408320600160ff1982541617905560008051602062004123833981519152339380a4600190565b505090565b6001600160a01b031660008181527f656e56ab8dd91e8ab3a0bca8fa0441044baf531879b6b21d090de8274db24b3060205260408120549091907ffc2754c3124992c494f261273f660823cff6f38aa3c30f5781021a51340f912d9060ff166200025a57808352826020526040832082845260205260408320600160ff1982541617905560008051602062004123833981519152339380a4600190565b6001600160a01b031660008181527f3c1b1854ab1360abbb06c8d4c6b2672d4b8cedc5eff522ab19e51d5cb8fdbd4660205260408120549091907fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b269060ff166200025a57808352826020526040832082845260205260408320600160ff1982541617905560008051602062004123833981519152339380a460019056fe608080604052600436101561001357600080fd5b60003560e01c90816301fd1951146130a65750806301ffc9a714612fe75780631a5bd7fc14612f3057806320df435914612ed757806322106e3414612e7e578063248a9ca314612e3157806326232a2e14612df557806326f7519a14612d02578063281139ef14612cc75780632a5b145114612c8b5780632ae5a31d14612c4f5780632f2ff15d14612bf257806331b221cd14612ba0578063334f7deb146127a957806336568abe1461271f57806338bd1bc1146126ca578063398ab9a71461268e5780633d092b3d146125d75780633f4ba83a146125195780634768d4ef146124615780635312ea8e146123a3578063541133301461233057806354d82b21146122b857806356d47ecb1461226c57806356eafcc014611cce5780635c975abb14611c8d5780635d316c4914611c3f5780635f9f4b9c14611c03578063651ea943146115af5780636577b5c61461157557806366ccf959146114b857806368ff1b9014611466578063697ea0361461142a57806373ed5c1c146113ee57806374642a3114610c8d5780637503e1b714610bd25780638456cb5914610b3c57806391d1485414610ac3578063a217fddf14610a89578063aa0b598814610a3d578063d547741f146109de578063e06612751461095d578063e93e817c14610922578063f0a4e5c61461026c5763fbe7bc891461020e57600080fd5b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102675760206040517f65c9916f995116b13da98f2377109ffc8f2ed0372863561a4bf02356bfc80bf68152f35b600080fd5b346102675760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576102a36131df565b67ffffffffffffffff608435818111610267576102c490369060040161341d565b906102cd613525565b6102d56137c2565b600435600052600b6020526040600020918254156108c45760048301805460ff8160a01c16600481101561089557801590811561088a575b501561082c5773ffffffffffffffffffffffffffffffffffffffff60028601541673ffffffffffffffffffffffffffffffffffffffff87161480156107f3575b80156107d5575b15610777577fffffffffffffffffffffff0000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161774020000000000000000000000000000000000000000179055604435600784015560643560088401558051918211610748576103d260098401546132ac565b601f81116106fd575b50602090601f831160011461061d5773ffffffffffffffffffffffffffffffffffffffff93929160009183610612575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161760098201555b4260068201556001810154600052600a602052600d604060002083600284015416808587161460001461057c57508181018460028501541660005280602052604060002061048e8154613788565b90558460038501541660005260205260016040600020016104af8154613788565b90555b01826002830154166000528060205260036040600020016104d660443582546137b5565b905582600260038401938285541660005283602052600360406000200161050060643582546137b5565b90550154166000526020524260066040600020015554166000524260066040600020015573ffffffffffffffffffffffffffffffffffffffff604051916044358352606435602084015242604084015216907f17c8524efa0c839450a898abb8c8e0223f3c38f7995b61e189ed38344772a491606060043592a3005b600384019085825416868816146000146105d65750848383019154166000528060205260406000206105ae8154613788565b90558460028501541660005260205260016040600020016105cf8154613788565b90556104b2565b908590848401926000528260205260026040600020016105f68154613788565b9055541660005260205260026040600020016105cf8154613788565b01519050858061040b565b906009840160005260206000209160005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0851681106106e55750918391600193837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe073ffffffffffffffffffffffffffffffffffffffff989716106106ae575b505050811b016009820155610440565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c1916905585808061069e565b9192602060018192868501518155019401920161062e565b600984016000526020600020601f840160051c8101916020851061073e575b601f0160051c01905b81811061073257506103db565b60008155600101610725565b909150819061071c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c69642077696e6e65720000000000000000000000000000000000006044820152fd5b5073ffffffffffffffffffffffffffffffffffffffff861615610354565b5073ffffffffffffffffffffffffffffffffffffffff60038601541673ffffffffffffffffffffffffffffffffffffffff87161461034d565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4d61746368206e6f7420616374697665000000000000000000000000000000006044820152fd5b60019150148761030d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4d6174636820646f6573206e6f742065786973740000000000000000000000006044820152fd5b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020604051610e108152f35b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757610994613202565b73ffffffffffffffffffffffffffffffffffffffff6024359116600052600c60205260406000208054821015610267576020916109d091613405565b90546040519160031b1c8152f35b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757610a3b600435610a1b6131df565b90806000526000602052610a36600160406000200154613617565b6136e7565b005b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757600435610a77613581565b610a846032821115613cee565b600e55005b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757602060405160008152f35b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757610afa6131df565b600435600052600060205273ffffffffffffffffffffffffffffffffffffffff60406000209116600052602052602060ff604060002054166040519015158152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757610b73613492565b610b7b6137c2565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060025416176002557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757600435600052600a60205260406000208054610c89610c2260018401613340565b91610c2f60028501613340565b9360038101546004820154600583015460068401549060078501549260088601549473ffffffffffffffffffffffffffffffffffffffff600a600989015498015416976040519b8c9b60ff808560081c169416928d61314a565b0390f35b346102675760e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102675760043567ffffffffffffffff811161026757610cdc90369060040161341d565b60243567ffffffffffffffff811161026757610cfc90369060040161341d565b60449160058335101561026757610d116135bb565b610d196137c2565b8051156113905760046084351061133257610400608435116112d4574260a435111561127657610e1060c435106112185762093a8060c435116111ba57610d61600554613788565b918260055582600052600a602052604060002090838255825167ffffffffffffffff811161074857610d9660018401546132ac565b601f8111611173575b50806020601f82116001146110ac576000916110a1575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161760018301555b80519067ffffffffffffffff821161074857610e0960028401546132ac565b601f811161105a575b50602090601f8311600114610f6d577f6cee9b141362bef0916b96422a6c7e1d7dc5f2fffedb1a309647bdbde576ab269493929160009183610f62575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161760028201555b6003810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000060ff8835169116179055600a606435918260048201556000600582015560843560068201556000600782015560a4356008820155610eed60c43560a4356137b5565b600982015501337fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055610f26600754613788565b600755610f4d610f41604051936080855260808501906130df565b9560208401903561313d565b604082015260843560608201528033940390a3005b015190508780610e4f565b906002840160005260206000209160005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0851681106110425750918391600193837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe07f6cee9b141362bef0916b96422a6c7e1d7dc5f2fffedb1a309647bdbde576ab26999897161061100b575b505050811b016002820155610e84565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055878080610ffb565b91926020600181928685015181550194019201610f7e565b600284016000526020600020601f840160051c81016020851061109a575b601f830160051c8201811061108e575050610e12565b60008155600101611078565b5080611078565b905084015187610db6565b91506001840160005260206000206000925b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08316841061115b5760019350827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0811610611124575b5050811b016001830155610dea565b8601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690558780611115565b868101518255602093840193600190920191016110be565b600184016000526020600020601f830160051c8101602084106111b3575b601f830160051c820181106111a7575050610d9f565b60008155600101611191565b5080611191565b6064837f4475726174696f6e20746f6f206c6f6e67000000000000000000000000000000604051917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260116024840152820152fd5b6064837f4475726174696f6e20746f6f2073686f72740000000000000000000000000000604051917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260126024840152820152fd5b6064837f53746172742074696d65206d75737420626520696e2066757475726500000000604051917f08c379a000000000000000000000000000000000000000000000000000000000835260206004840152601c6024840152820152fd5b6064837f546f6f206d616e7920706c617965727300000000000000000000000000000000604051917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260106024840152820152fd5b6064837f546f6f2066657720706c61796572730000000000000000000000000000000000604051917f08c379a000000000000000000000000000000000000000000000000000000000835260206004840152600f6024840152820152fd5b6064837f546f75726e616d656e74206e616d652072657175697265640000000000000000604051917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260186024840152820152fd5b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020600554604051908152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757602060405162093a808152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757602073ffffffffffffffffffffffffffffffffffffffff60035416604051908152f35b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576114ef6131df565b600435600052600a60205273ffffffffffffffffffffffffffffffffffffffff600d604060002001911660005260205260e0604060002080549060018101549060028101546003820154600483015491600660ff600586015416940154946040519687526020870152604086015260608501526080840152151560a083015260c0820152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757602060405160048152f35b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576115e66135bb565b6115ee6137c2565b600435600052600a602052604060002061160a815415156137f8565b60038101805460ff8160081c16600681101561089557611ba5576004600784015410611b475760088301544210611ae9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff6103009116179055600435600052600a60205260ff60036040600020015416600581101561089557806119185750600435600052600a602052604060002090600b8201549160005b8381106116ea575050600791505b01546040519042825260208201527f2b4fbc018be75e6ff98b219698828856ce311122193b11596150e17268e2ee31604060043592a2005b600181018111611765578360018201106000146117945761175861171182600b8501613405565b9073ffffffffffffffffffffffffffffffffffffffff918291549060031b1c169061174260018501600b8701613405565b90549060031b1c16600885015491600435613931565b60028101809111156116a4575b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6119056117a2600654613788565b8060065580600052600b60205260406000208181556004356001820155600a6117ce85600b8801613405565b929073ffffffffffffffffffffffffffffffffffffffff938491549060031b1c16600282017fffffffffffffffffffffffff0000000000000000000000000000000000000000918282541617905560038201908154169055600481018781547fffffffffffffffffffffff000000000000000000000000000000000000000000866118998b600b7402000000000000000000000000000000000000000096877fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff881617895501613405565b90549060031b1c169116171790550160017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790556118de82600c8701613875565b6118eb84600b8701613405565b90549060031b1c16600052600d6020526040600020613875565b611910600854613788565b600855611758565b600414611928575b6007906116b2565b600435600052600a602052604060002090611944600654613788565b918260065582600052600b602052604060002083815560019160043583830155600b810190815415611aba578160005273ffffffffffffffffffffffffffffffffffffffff92836020600020541690600281017fffffffffffffffffffffffff000000000000000000000000000000000000000092838254161790558354861015611aba57611a4e92600a600c928a9487600052888a60206000200154166003830191825416179055600481017fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff815416905560088301546005820155017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00815416905501613875565b6000835b611a74575b5050505060079150611a6a600854613788565b6008559050611920565b8154811015611ab5578083611a8c611aaf9385613405565b90549060031b1c16600052600d602052611aaa876040600020613875565b613788565b83611a52565b611a57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f546f75726e616d656e74206e6f7420726561647920746f2073746172740000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e6f7420656e6f75676820706c617965727300000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f546f75726e616d656e7420616c726561647920737461727465640000000000006044820152fd5b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020600754604051908152f35b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020611c83611c7b6131df565b600435613c7f565b6040519015158152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757602060ff600254166040519015158152f35b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102675767ffffffffffffffff6024358181116102675736602382011215610267578060040135918211610748578160051b9060405192611d3d60208401856132ff565b83526020830190602482938201019036821161026757602401915b81831061223f57505050611d6a6135bb565b611d726137c2565b600435600052600a6020526040600020611d8e815415156137f8565b600381019182549260ff8460081c166006811015610895576003611db291146138cc565b8451156121e1576104007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff611e1795161790556005820154611e1c6103e89182611dfe600e5483613c4b565b04958693611e0e600f5484613c4b565b04938492613c5e565b613c5e565b9260005b86518110156120555773ffffffffffffffffffffffffffffffffffffffff90611e5782611e4d838b613c6b565b5116600435613c7f565b15611ff75780611fa75760328087029087820414871517156117655760649004915b82611e8f575b50611e8a9150613788565b611e20565b611f056020848b84611ea9878260025460081c1693613c6b565b511660006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af18015611f9b57611f6c575b50611f1f828a613c6b565b511660018201821161176557611e8a926040519060018401825260208201527fc0d2773dace20252cd0787cdc7c52fe3633eea19eb0f904ecae1b3a38226ab4c604060043592a388611e7f565b611f8d9060203d602011611f94575b611f8581836132ff565b81019061385d565b5089611f14565b503d611f7b565b6040513d6000823e3d90fd5b60018103611fcb57601e808702908782041487151715611765576064900491611e79565b60028103611fef576014808702908782041487151715611765576064900491611e79565b600091611e79565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f57696e6e6572206e6f74207265676973746572656400000000000000000000006044820152fd5b508592939480612156575b50816120be575b50505115611aba5773ffffffffffffffffffffffffffffffffffffffff905116906040519081524260208201527fb23508f522f6895a5c44e106456cb05b61d4e1539cc9c7a0f09e1baff64378ac604060043592a3005b600254600a91909101546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260248101939093526020918391604491839160009160081c165af18015611f9b57612137575b80612067565b61214f9060203d602011611f9457611f8581836132ff565b5083612131565b6002546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523060048201526024810192909252602090829060081c73ffffffffffffffffffffffffffffffffffffffff16816000816044810103925af18015611f9b5715612060576121da9060203d602011611f9457611f8581836132ff565b5085612060565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4e6f2077696e6e657273207370656369666965640000000000000000000000006044820152fd5b823573ffffffffffffffffffffffffffffffffffffffff8116810361026757815260209283019201611d58565b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576004356122a6613581565b6122b36064821115613cee565b600f55005b346102675760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576122ef6131df565b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361026757610a3b9161231c613525565b6123246137c2565b60643591600435613931565b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757612367613202565b73ffffffffffffffffffffffffffffffffffffffff6024359116600052600d60205260406000208054821015610267576020916109d091613405565b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576123da613492565b6002546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048083019190915235602482015290602090829060081c73ffffffffffffffffffffffffffffffffffffffff16816000816044810103925af18015611f9b5761244a57005b610a3b9060203d8111611f9457611f8581836132ff565b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757600435600052600b6020526040600020805490610c8960018201549273ffffffffffffffffffffffffffffffffffffffff92836002820154169184600383015416906004830154600584015460068501549160078601549360088701549560ff600a6124fe60098b01613340565b99015416986040519c8d9c60ff8660a01c169516938d613225565b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757612550613492565b60025460ff8116156125ad577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166002557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60046040517f8dfc202b000000000000000000000000000000000000000000000000000000008152fd5b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757600435600052600b60205260406000208054610c8960018301549273ffffffffffffffffffffffffffffffffffffffff928360028301541690846003840154169060048401546005850154600686015491600787015493600888015495612677600960ff600a8c0154169a01613340565b976040519c8d9c60ff8660a01c169516938d613225565b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020600954604051908152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757602073ffffffffffffffffffffffffffffffffffffffff60025460081c16604051908152f35b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576127566131df565b3373ffffffffffffffffffffffffffffffffffffffff82160361277f57610a3b906004356136e7565b60046040517f6697b232000000000000000000000000000000000000000000000000000000008152fd5b34610267576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757600435906127e56137c2565b6001916002835414612b76576002835580600052600a8252604060002061280e815415156137f8565b60ff600382015460081c16600681101561089557612b18576007810190815460068201541115612aba57600b8101918254158015612aa9575b15612a4b57600254600483810180546040517f23b872dd000000000000000000000000000000000000000000000000000000008152339381019390935230602484015260448301529473ffffffffffffffffffffffffffffffffffffffff9290919088908290606490829060009060081c88165af18015611f9b57612a2e575b506128e68554600586016128dc8282546137b5565b90556009546137b5565b6009558054680100000000000000008110156107485761290a918982018155613405565b819291549060031b9133831b921b19161790556129278154613788565b905533600052600c845261293f836040600020613875565b6040519060e082019082821067ffffffffffffffff8311176107485760069160405260008352858301600081526040840160008152606085016000815260808601916000835260a087019360008552600d60c08901966000885233600052018b52604060002097518855518b880155516002870155516003860155516004850155600584019051151560ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00835416911617905551910155549160405192835242908301527f279369079f3ed0a125dda793bfde61237d8d2f679c1345a15ab761c5d7b6135d60403393a38055005b612a4490883d8a11611f9457611f8581836132ff565b50886128c7565b606485604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601260248201527f416c7265616479207265676973746572656400000000000000000000000000006044820152fd5b50612ab43385613c7f565b15612847565b606484604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152600f60248201527f546f75726e616d656e742066756c6c00000000000000000000000000000000006044820152fd5b606483604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601560248201527f526567697374726174696f6e206e6f74206f70656e00000000000000000000006044820152fd5b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757602073ffffffffffffffffffffffffffffffffffffffff60045416604051908152f35b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757610a3b600435612c2f6131df565b90806000526000602052612c4a600160406000200154613617565b61363d565b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020600f54604051908152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020600854604051908152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102675760206040516104008152f35b34610267576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757600435600052600a8152600b60406000200160405190818382549182815201908192600052846000209060005b86828210612dcb578686612d75828803836132ff565b604051928392818401908285525180915260408401929160005b828110612d9e57505050500390f35b835173ffffffffffffffffffffffffffffffffffffffff1685528695509381019392810192600101612d8f565b835473ffffffffffffffffffffffffffffffffffffffff1685529093019260019283019201612d5f565b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020600e54604051908152f35b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102675760043560005260006020526020600160406000200154604051908152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102675760206040517ffc2754c3124992c494f261273f660823cff6f38aa3c30f5781021a51340f912d8152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102675760206040517fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b268152f35b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757600435600052600a6020526040600020805490610c89600382015460048301546005840154600685015460078601549060088701549260098801549473ffffffffffffffffffffffffffffffffffffffff600a8a01541696612fcf6002612fc860018d01613340565b9b01613340565b9a6040519b8c9b60ff808560081c169416928d61314a565b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361026757807f7965db0b000000000000000000000000000000000000000000000000000000006020921490811561307c575b506040519015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501482613071565b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020906006548152f35b919082519283825260005b8481106131295750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b6020818301810151848301820152016130ea565b9060058210156108955752565b9a969261317761319093959e9d9995613185938e9d999d9c989c528d6101809081602082015201906130df565b8c810360408e0152906130df565b9b60608b019061313d565b6006871015610895576101609773ffffffffffffffffffffffffffffffffffffffff9760808b015260a08a015260c089015260e088015261010087015261012086015261014085015216910152565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361026757565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361026757565b9a97949291909c9b9c9996999895988b5260208b015273ffffffffffffffffffffffffffffffffffffffff928380921660408c01521660608a0152166080880152600485101561089557610160956132a49560a089015260c088015260e0870152610100860152610120850152610180806101408601528401906130df565b931515910152565b90600182811c921680156132f5575b60208310146132c657565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916132bb565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761074857604052565b9060405191826000825492613354846132ac565b9081845260019485811690816000146133c35750600114613380575b505061337e925003836132ff565b565b9093915060005260209081600020936000915b8183106133ab57505061337e93508201013880613370565b85548884018501529485019487945091830191613393565b905061337e9550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013880613370565b8054821015611aba5760005260206000200190600090565b81601f820112156102675780359067ffffffffffffffff8211610748576040519261347060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f86011601856132ff565b8284526020838301011161026757816000926020809301838601378301015290565b3360009081527f3c1b1854ab1360abbb06c8d4c6b2672d4b8cedc5eff522ab19e51d5cb8fdbd4660205260409020547fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b269060ff16156134ee5750565b604490604051907fe2517d3f0000000000000000000000000000000000000000000000000000000082523360048301526024820152fd5b3360009081527f656e56ab8dd91e8ab3a0bca8fa0441044baf531879b6b21d090de8274db24b3060205260409020547ffc2754c3124992c494f261273f660823cff6f38aa3c30f5781021a51340f912d9060ff16156134ee5750565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205460ff16156134ee5750565b3360009081527f938fae1ebe625f23a46c9c067bf25f1fdc5e976aab24e3d0ff1a7bd30da2864460205260409020547f65c9916f995116b13da98f2377109ffc8f2ed0372863561a4bf02356bfc80bf69060ff16156134ee5750565b80600052600060205260406000203360005260205260ff60406000205416156134ee5750565b906000918083528260205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff604084205416156000146136e25780835282602052604083208284526020526040832060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b906000918083528260205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff6040842054166000146136e2578083528260205260408320828452602052604083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146117655760010190565b9190820180921161176557565b60ff600254166137ce57565b60046040517fd93c0665000000000000000000000000000000000000000000000000000000008152fd5b156137ff57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f546f75726e616d656e7420646f6573206e6f74206578697374000000000000006044820152fd5b90816020910312610267575180151581036102675790565b8054680100000000000000008110156107485761389791600182018155613405565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff829392549160031b92831b921b1916179055565b156138d357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f546f75726e616d656e74206e6f7420696e2070726f67726573730000000000006044820152fd5b929091600092848452602093600a855260409081812090613954825415156137f8565b60ff600383015460081c166006811015613c1e57600361397491146138cc565b61397e8489613c7f565b15613bc15761398d8589613c7f565b15613b645773ffffffffffffffffffffffffffffffffffffffff84811697908616888114613b0757908492916006546139c590613788565b998a809681600655818652600b85528d878720908382556001820155600281017fffffffffffffffffffffffff00000000000000000000000000000000000000009085828254161790558560038301918254161790556004810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690558c6005820155600a0180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600c0190613a8191613875565b8352600d82528484842090613a9591613875565b8252600d90522090613aa691613875565b600854613ab290613788565b6008555173ffffffffffffffffffffffffffffffffffffffff91821681529116602082015260408101919091527f7dfa3731603a731645c7aa2c72bad6ff6445dd8cd95be0db525efc20ae39027990606090a3565b6064828651907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601960248201527f506c6179657273206d75737420626520646966666572656e74000000000000006044820152fd5b6064878451907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601760248201527f506c617965722032206e6f7420726567697374657265640000000000000000006044820152fd5b6064878451907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601760248201527f506c617965722031206e6f7420726567697374657265640000000000000000006044820152fd5b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526021600452fd5b8181029291811591840414171561176557565b9190820391821161176557565b8051821015611aba5760209160051b010190565b600052600a602052604060002090600b600092018054925b838110613ca75750505050600090565b613cb18183613405565b905473ffffffffffffffffffffffffffffffffffffffff908186169260031b1c1614613ce557613ce090613788565b613c97565b50505050600190565b15613cf557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f46656520746f6f206869676800000000000000000000000000000000000000006044820152fdfea264697066735822122052bd9eb7fe2bee9e3225e7ca0c777e824955ebfa896df2766fff468eda4e951d64736f6c634300081400332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","opcodes":"PUSH1 0x80 CALLVALUE PUSH3 0x10D JUMPI PUSH1 0x1F PUSH3 0x4143 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH3 0x112 JUMPI DUP1 DUP5 SWAP3 PUSH1 0x60 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0x10D JUMPI PUSH3 0x4D DUP2 PUSH3 0x128 JUMP JUMPDEST PUSH3 0x69 PUSH1 0x40 PUSH3 0x61 PUSH1 0x20 DUP6 ADD PUSH3 0x128 JUMP JUMPDEST SWAP4 ADD PUSH3 0x128 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE PUSH1 0x5 PUSH1 0xE SSTORE PUSH1 0xA PUSH1 0xF SSTORE PUSH1 0x2 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH1 0x8 SWAP4 SWAP1 SWAP4 SHL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x4 DUP1 SLOAD SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0xD8 CALLER PUSH3 0x13D JUMP JUMPDEST POP PUSH3 0xE4 CALLER PUSH3 0x1BD JUMP JUMPDEST POP PUSH3 0xF0 CALLER PUSH3 0x25F JUMP JUMPDEST POP PUSH3 0xFC CALLER PUSH3 0x2FC JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x3D89 SWAP1 DUP2 PUSH3 0x39A DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH3 0x10D JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0xAD3228B676F7D3CD4284A5443F17F1962B36E491B30A40B2405849E597BA5FB5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND PUSH3 0x1B9 JUMPI DUP2 DUP1 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP2 DUP4 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE CALLER SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x4123 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x938FAE1EBE625F23A46C9C067BF25F1FDC5E976AAB24E3D0FF1A7BD30DA28644 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH32 0x65C9916F995116B13DA98F2377109FFC8F2ED0372863561A4BF02356BFC80BF6 SWAP1 PUSH1 0xFF AND PUSH3 0x25A JUMPI DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x4123 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x656E56AB8DD91E8AB3A0BCA8FA0441044BAF531879B6B21D090DE8274DB24B30 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH32 0xFC2754C3124992C494F261273F660823CFF6F38AA3C30F5781021A51340F912D SWAP1 PUSH1 0xFF AND PUSH3 0x25A JUMPI DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x4123 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x3C1B1854AB1360ABBB06C8D4C6B2672D4B8CEDC5EFF522AB19E51D5CB8FDBD46 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH32 0xBF233DD2AAFEB4D50879C4AA5C81E96D92F6E6945C906A58F9F2D1C1631B4B26 SWAP1 PUSH1 0xFF AND PUSH3 0x25A JUMPI DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x4123 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1FD1951 EQ PUSH2 0x30A6 JUMPI POP DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2FE7 JUMPI DUP1 PUSH4 0x1A5BD7FC EQ PUSH2 0x2F30 JUMPI DUP1 PUSH4 0x20DF4359 EQ PUSH2 0x2ED7 JUMPI DUP1 PUSH4 0x22106E34 EQ PUSH2 0x2E7E JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2E31 JUMPI DUP1 PUSH4 0x26232A2E EQ PUSH2 0x2DF5 JUMPI DUP1 PUSH4 0x26F7519A EQ PUSH2 0x2D02 JUMPI DUP1 PUSH4 0x281139EF EQ PUSH2 0x2CC7 JUMPI DUP1 PUSH4 0x2A5B1451 EQ PUSH2 0x2C8B JUMPI DUP1 PUSH4 0x2AE5A31D EQ PUSH2 0x2C4F JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2BF2 JUMPI DUP1 PUSH4 0x31B221CD EQ PUSH2 0x2BA0 JUMPI DUP1 PUSH4 0x334F7DEB EQ PUSH2 0x27A9 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x271F JUMPI DUP1 PUSH4 0x38BD1BC1 EQ PUSH2 0x26CA JUMPI DUP1 PUSH4 0x398AB9A7 EQ PUSH2 0x268E JUMPI DUP1 PUSH4 0x3D092B3D EQ PUSH2 0x25D7 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2519 JUMPI DUP1 PUSH4 0x4768D4EF EQ PUSH2 0x2461 JUMPI DUP1 PUSH4 0x5312EA8E EQ PUSH2 0x23A3 JUMPI DUP1 PUSH4 0x54113330 EQ PUSH2 0x2330 JUMPI DUP1 PUSH4 0x54D82B21 EQ PUSH2 0x22B8 JUMPI DUP1 PUSH4 0x56D47ECB EQ PUSH2 0x226C JUMPI DUP1 PUSH4 0x56EAFCC0 EQ PUSH2 0x1CCE JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x1C8D JUMPI DUP1 PUSH4 0x5D316C49 EQ PUSH2 0x1C3F JUMPI DUP1 PUSH4 0x5F9F4B9C EQ PUSH2 0x1C03 JUMPI DUP1 PUSH4 0x651EA943 EQ PUSH2 0x15AF JUMPI DUP1 PUSH4 0x6577B5C6 EQ PUSH2 0x1575 JUMPI DUP1 PUSH4 0x66CCF959 EQ PUSH2 0x14B8 JUMPI DUP1 PUSH4 0x68FF1B90 EQ PUSH2 0x1466 JUMPI DUP1 PUSH4 0x697EA036 EQ PUSH2 0x142A JUMPI DUP1 PUSH4 0x73ED5C1C EQ PUSH2 0x13EE JUMPI DUP1 PUSH4 0x74642A31 EQ PUSH2 0xC8D JUMPI DUP1 PUSH4 0x7503E1B7 EQ PUSH2 0xBD2 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0xB3C JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0xAC3 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0xA89 JUMPI DUP1 PUSH4 0xAA0B5988 EQ PUSH2 0xA3D JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x9DE JUMPI DUP1 PUSH4 0xE0661275 EQ PUSH2 0x95D JUMPI DUP1 PUSH4 0xE93E817C EQ PUSH2 0x922 JUMPI DUP1 PUSH4 0xF0A4E5C6 EQ PUSH2 0x26C JUMPI PUSH4 0xFBE7BC89 EQ PUSH2 0x20E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x65C9916F995116B13DA98F2377109FFC8F2ED0372863561A4BF02356BFC80BF6 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0xA0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x2A3 PUSH2 0x31DF JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x84 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x267 JUMPI PUSH2 0x2C4 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x341D JUMP JUMPDEST SWAP1 PUSH2 0x2CD PUSH2 0x3525 JUMP JUMPDEST PUSH2 0x2D5 PUSH2 0x37C2 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD ISZERO PUSH2 0x8C4 JUMPI PUSH1 0x4 DUP4 ADD DUP1 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x895 JUMPI DUP1 ISZERO SWAP1 DUP2 ISZERO PUSH2 0x88A JUMPI JUMPDEST POP ISZERO PUSH2 0x82C JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x2 DUP7 ADD SLOAD AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND EQ DUP1 ISZERO PUSH2 0x7F3 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI JUMPDEST ISZERO PUSH2 0x777 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND OR PUSH21 0x20000000000000000000000000000000000000000 OR SWAP1 SSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x7 DUP5 ADD SSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x8 DUP5 ADD SSTORE DUP1 MLOAD SWAP2 DUP3 GT PUSH2 0x748 JUMPI PUSH2 0x3D2 PUSH1 0x9 DUP5 ADD SLOAD PUSH2 0x32AC JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x6FD JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x61D JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0x612 JUMPI JUMPDEST POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x9 DUP3 ADD SSTORE JUMPDEST TIMESTAMP PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0xD PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP4 PUSH1 0x2 DUP5 ADD SLOAD AND DUP1 DUP6 DUP8 AND EQ PUSH1 0x0 EQ PUSH2 0x57C JUMPI POP DUP2 DUP2 ADD DUP5 PUSH1 0x2 DUP6 ADD SLOAD AND PUSH1 0x0 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x48E DUP2 SLOAD PUSH2 0x3788 JUMP JUMPDEST SWAP1 SSTORE DUP5 PUSH1 0x3 DUP6 ADD SLOAD AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x4AF DUP2 SLOAD PUSH2 0x3788 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST ADD DUP3 PUSH1 0x2 DUP4 ADD SLOAD AND PUSH1 0x0 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x3 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x4D6 PUSH1 0x44 CALLDATALOAD DUP3 SLOAD PUSH2 0x37B5 JUMP JUMPDEST SWAP1 SSTORE DUP3 PUSH1 0x2 PUSH1 0x3 DUP5 ADD SWAP4 DUP3 DUP6 SLOAD AND PUSH1 0x0 MSTORE DUP4 PUSH1 0x20 MSTORE PUSH1 0x3 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x500 PUSH1 0x64 CALLDATALOAD DUP3 SLOAD PUSH2 0x37B5 JUMP JUMPDEST SWAP1 SSTORE ADD SLOAD AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x6 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SSTORE SLOAD AND PUSH1 0x0 MSTORE TIMESTAMP PUSH1 0x6 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 MLOAD SWAP2 PUSH1 0x44 CALLDATALOAD DUP4 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x20 DUP5 ADD MSTORE TIMESTAMP PUSH1 0x40 DUP5 ADD MSTORE AND SWAP1 PUSH32 0x17C8524EFA0C839450A898ABB8C8E0223F3C38F7995B61E189ED38344772A491 PUSH1 0x60 PUSH1 0x4 CALLDATALOAD SWAP3 LOG3 STOP JUMPDEST PUSH1 0x3 DUP5 ADD SWAP1 DUP6 DUP3 SLOAD AND DUP7 DUP9 AND EQ PUSH1 0x0 EQ PUSH2 0x5D6 JUMPI POP DUP5 DUP4 DUP4 ADD SWAP2 SLOAD AND PUSH1 0x0 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x5AE DUP2 SLOAD PUSH2 0x3788 JUMP JUMPDEST SWAP1 SSTORE DUP5 PUSH1 0x2 DUP6 ADD SLOAD AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x5CF DUP2 SLOAD PUSH2 0x3788 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x4B2 JUMP JUMPDEST SWAP1 DUP6 SWAP1 DUP5 DUP5 ADD SWAP3 PUSH1 0x0 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x2 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x5F6 DUP2 SLOAD PUSH2 0x3788 JUMP JUMPDEST SWAP1 SSTORE SLOAD AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x2 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x5CF DUP2 SLOAD PUSH2 0x3788 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP6 DUP1 PUSH2 0x40B JUMP JUMPDEST SWAP1 PUSH1 0x9 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP6 AND DUP2 LT PUSH2 0x6E5 JUMPI POP SWAP2 DUP4 SWAP2 PUSH1 0x1 SWAP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP9 SWAP8 AND LT PUSH2 0x6AE JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x9 DUP3 ADD SSTORE PUSH2 0x440 JUMP JUMPDEST ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP6 DUP1 DUP1 PUSH2 0x69E JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x62E JUMP JUMPDEST PUSH1 0x9 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP6 LT PUSH2 0x73E JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x732 JUMPI POP PUSH2 0x3DB JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x725 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x71C JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642077696E6E6572000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND ISZERO PUSH2 0x354 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP7 ADD SLOAD AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND EQ PUSH2 0x34D JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D61746368206E6F742061637469766500000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x1 SWAP2 POP EQ DUP8 PUSH2 0x30D JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D6174636820646F6573206E6F74206578697374000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0xE10 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x994 PUSH2 0x3202 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x267 JUMPI PUSH1 0x20 SWAP2 PUSH2 0x9D0 SWAP2 PUSH2 0x3405 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH1 0x3 SHL SHR DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0xA3B PUSH1 0x4 CALLDATALOAD PUSH2 0xA1B PUSH2 0x31DF JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH2 0xA36 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x3617 JUMP JUMPDEST PUSH2 0x36E7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xA77 PUSH2 0x3581 JUMP JUMPDEST PUSH2 0xA84 PUSH1 0x32 DUP3 GT ISZERO PUSH2 0x3CEE JUMP JUMPDEST PUSH1 0xE SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0xAFA PUSH2 0x31DF JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0xB73 PUSH2 0x3492 JUMP JUMPDEST PUSH2 0xB7B PUSH2 0x37C2 JUMP JUMPDEST PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x2 SLOAD AND OR PUSH1 0x2 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0xC89 PUSH2 0xC22 PUSH1 0x1 DUP5 ADD PUSH2 0x3340 JUMP JUMPDEST SWAP2 PUSH2 0xC2F PUSH1 0x2 DUP6 ADD PUSH2 0x3340 JUMP JUMPDEST SWAP4 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0x6 DUP5 ADD SLOAD SWAP1 PUSH1 0x7 DUP6 ADD SLOAD SWAP3 PUSH1 0x8 DUP7 ADD SLOAD SWAP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA PUSH1 0x9 DUP10 ADD SLOAD SWAP9 ADD SLOAD AND SWAP8 PUSH1 0x40 MLOAD SWAP12 DUP13 SWAP12 PUSH1 0xFF DUP1 DUP6 PUSH1 0x8 SHR AND SWAP5 AND SWAP3 DUP14 PUSH2 0x314A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0xE0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x267 JUMPI PUSH2 0xCDC SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x341D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x267 JUMPI PUSH2 0xCFC SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x341D JUMP JUMPDEST PUSH1 0x44 SWAP2 PUSH1 0x5 DUP4 CALLDATALOAD LT ISZERO PUSH2 0x267 JUMPI PUSH2 0xD11 PUSH2 0x35BB JUMP JUMPDEST PUSH2 0xD19 PUSH2 0x37C2 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x1390 JUMPI PUSH1 0x4 PUSH1 0x84 CALLDATALOAD LT PUSH2 0x1332 JUMPI PUSH2 0x400 PUSH1 0x84 CALLDATALOAD GT PUSH2 0x12D4 JUMPI TIMESTAMP PUSH1 0xA4 CALLDATALOAD GT ISZERO PUSH2 0x1276 JUMPI PUSH2 0xE10 PUSH1 0xC4 CALLDATALOAD LT PUSH2 0x1218 JUMPI PUSH3 0x93A80 PUSH1 0xC4 CALLDATALOAD GT PUSH2 0x11BA JUMPI PUSH2 0xD61 PUSH1 0x5 SLOAD PUSH2 0x3788 JUMP JUMPDEST SWAP2 DUP3 PUSH1 0x5 SSTORE DUP3 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP4 DUP3 SSTORE DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x748 JUMPI PUSH2 0xD96 PUSH1 0x1 DUP5 ADD SLOAD PUSH2 0x32AC JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x1173 JUMPI JUMPDEST POP DUP1 PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x10AC JUMPI PUSH1 0x0 SWAP2 PUSH2 0x10A1 JUMPI JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1 DUP4 ADD SSTORE JUMPDEST DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x748 JUMPI PUSH2 0xE09 PUSH1 0x2 DUP5 ADD SLOAD PUSH2 0x32AC JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x105A JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xF6D JUMPI PUSH32 0x6CEE9B141362BEF0916B96422A6C7E1D7DC5F2FFFEDB1A309647BDBDE576AB26 SWAP5 SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0xF62 JUMPI JUMPDEST POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x2 DUP3 ADD SSTORE JUMPDEST PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 PUSH1 0xFF DUP9 CALLDATALOAD AND SWAP2 AND OR SWAP1 SSTORE PUSH1 0xA PUSH1 0x64 CALLDATALOAD SWAP2 DUP3 PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0x0 PUSH1 0x5 DUP3 ADD SSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0x0 PUSH1 0x7 DUP3 ADD SSTORE PUSH1 0xA4 CALLDATALOAD PUSH1 0x8 DUP3 ADD SSTORE PUSH2 0xEED PUSH1 0xC4 CALLDATALOAD PUSH1 0xA4 CALLDATALOAD PUSH2 0x37B5 JUMP JUMPDEST PUSH1 0x9 DUP3 ADD SSTORE ADD CALLER PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0xF26 PUSH1 0x7 SLOAD PUSH2 0x3788 JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH2 0xF4D PUSH2 0xF41 PUSH1 0x40 MLOAD SWAP4 PUSH1 0x80 DUP6 MSTORE PUSH1 0x80 DUP6 ADD SWAP1 PUSH2 0x30DF JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP5 ADD SWAP1 CALLDATALOAD PUSH2 0x313D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE DUP1 CALLER SWAP5 SUB SWAP1 LOG3 STOP JUMPDEST ADD MLOAD SWAP1 POP DUP8 DUP1 PUSH2 0xE4F JUMP JUMPDEST SWAP1 PUSH1 0x2 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP6 AND DUP2 LT PUSH2 0x1042 JUMPI POP SWAP2 DUP4 SWAP2 PUSH1 0x1 SWAP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH32 0x6CEE9B141362BEF0916B96422A6C7E1D7DC5F2FFFEDB1A309647BDBDE576AB26 SWAP10 SWAP9 SWAP8 AND LT PUSH2 0x100B JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x2 DUP3 ADD SSTORE PUSH2 0xE84 JUMP JUMPDEST ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP8 DUP1 DUP1 PUSH2 0xFFB JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0xF7E JUMP JUMPDEST PUSH1 0x2 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT PUSH2 0x109A JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x108E JUMPI POP POP PUSH2 0xE12 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1078 JUMP JUMPDEST POP DUP1 PUSH2 0x1078 JUMP JUMPDEST SWAP1 POP DUP5 ADD MLOAD DUP8 PUSH2 0xDB6 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP3 JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 AND DUP5 LT PUSH2 0x115B JUMPI PUSH1 0x1 SWAP4 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 AND LT PUSH2 0x1124 JUMPI JUMPDEST POP POP DUP2 SHL ADD PUSH1 0x1 DUP4 ADD SSTORE PUSH2 0xDEA JUMP JUMPDEST DUP7 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP8 DUP1 PUSH2 0x1115 JUMP JUMPDEST DUP7 DUP2 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x1 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP5 LT PUSH2 0x11B3 JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x11A7 JUMPI POP POP PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1191 JUMP JUMPDEST POP DUP1 PUSH2 0x1191 JUMP JUMPDEST PUSH1 0x64 DUP4 PUSH32 0x4475726174696F6E20746F6F206C6F6E67000000000000000000000000000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP4 PUSH32 0x4475726174696F6E20746F6F2073686F72740000000000000000000000000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP4 PUSH32 0x53746172742074696D65206D75737420626520696E2066757475726500000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP4 PUSH32 0x546F6F206D616E7920706C617965727300000000000000000000000000000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP4 PUSH32 0x546F6F2066657720706C61796572730000000000000000000000000000000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP4 PUSH32 0x546F75726E616D656E74206E616D652072657175697265640000000000000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH3 0x93A80 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x14EF PUSH2 0x31DF JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xD PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xE0 PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x4 DUP4 ADD SLOAD SWAP2 PUSH1 0x6 PUSH1 0xFF PUSH1 0x5 DUP7 ADD SLOAD AND SWAP5 ADD SLOAD SWAP5 PUSH1 0x40 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x4 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x15E6 PUSH2 0x35BB JUMP JUMPDEST PUSH2 0x15EE PUSH2 0x37C2 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x160A DUP2 SLOAD ISZERO ISZERO PUSH2 0x37F8 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND PUSH1 0x6 DUP2 LT ISZERO PUSH2 0x895 JUMPI PUSH2 0x1BA5 JUMPI PUSH1 0x4 PUSH1 0x7 DUP5 ADD SLOAD LT PUSH2 0x1B47 JUMPI PUSH1 0x8 DUP4 ADD SLOAD TIMESTAMP LT PUSH2 0x1AE9 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF PUSH2 0x300 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x3 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x895 JUMPI DUP1 PUSH2 0x1918 JUMPI POP PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0xB DUP3 ADD SLOAD SWAP2 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x16EA JUMPI POP POP PUSH1 0x7 SWAP2 POP JUMPDEST ADD SLOAD PUSH1 0x40 MLOAD SWAP1 TIMESTAMP DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x2B4FBC018BE75E6FF98B219698828856CE311122193B11596150E17268E2EE31 PUSH1 0x40 PUSH1 0x4 CALLDATALOAD SWAP3 LOG2 STOP JUMPDEST PUSH1 0x1 DUP2 ADD DUP2 GT PUSH2 0x1765 JUMPI DUP4 PUSH1 0x1 DUP3 ADD LT PUSH1 0x0 EQ PUSH2 0x1794 JUMPI PUSH2 0x1758 PUSH2 0x1711 DUP3 PUSH1 0xB DUP6 ADD PUSH2 0x3405 JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND SWAP1 PUSH2 0x1742 PUSH1 0x1 DUP6 ADD PUSH1 0xB DUP8 ADD PUSH2 0x3405 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x8 DUP6 ADD SLOAD SWAP2 PUSH1 0x4 CALLDATALOAD PUSH2 0x3931 JUMP JUMPDEST PUSH1 0x2 DUP2 ADD DUP1 SWAP2 GT ISZERO PUSH2 0x16A4 JUMPI JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1905 PUSH2 0x17A2 PUSH1 0x6 SLOAD PUSH2 0x3788 JUMP JUMPDEST DUP1 PUSH1 0x6 SSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0xA PUSH2 0x17CE DUP6 PUSH1 0xB DUP9 ADD PUSH2 0x3405 JUMP JUMPDEST SWAP3 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x2 DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP2 DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x3 DUP3 ADD SWAP1 DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP8 DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000 DUP7 PUSH2 0x1899 DUP12 PUSH1 0xB PUSH21 0x20000000000000000000000000000000000000000 SWAP7 DUP8 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND OR DUP10 SSTORE ADD PUSH2 0x3405 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND SWAP2 AND OR OR SWAP1 SSTORE ADD PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x18DE DUP3 PUSH1 0xC DUP8 ADD PUSH2 0x3875 JUMP JUMPDEST PUSH2 0x18EB DUP5 PUSH1 0xB DUP8 ADD PUSH2 0x3405 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x3875 JUMP JUMPDEST PUSH2 0x1910 PUSH1 0x8 SLOAD PUSH2 0x3788 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x1758 JUMP JUMPDEST PUSH1 0x4 EQ PUSH2 0x1928 JUMPI JUMPDEST PUSH1 0x7 SWAP1 PUSH2 0x16B2 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH2 0x1944 PUSH1 0x6 SLOAD PUSH2 0x3788 JUMP JUMPDEST SWAP2 DUP3 PUSH1 0x6 SSTORE DUP3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP4 DUP2 SSTORE PUSH1 0x1 SWAP2 PUSH1 0x4 CALLDATALOAD DUP4 DUP4 ADD SSTORE PUSH1 0xB DUP2 ADD SWAP1 DUP2 SLOAD ISZERO PUSH2 0x1ABA JUMPI DUP2 PUSH1 0x0 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 PUSH1 0x20 PUSH1 0x0 KECCAK256 SLOAD AND SWAP1 PUSH1 0x2 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP3 DUP4 DUP3 SLOAD AND OR SWAP1 SSTORE DUP4 SLOAD DUP7 LT ISZERO PUSH2 0x1ABA JUMPI PUSH2 0x1A4E SWAP3 PUSH1 0xA PUSH1 0xC SWAP3 DUP11 SWAP5 DUP8 PUSH1 0x0 MSTORE DUP9 DUP11 PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD AND PUSH1 0x3 DUP4 ADD SWAP2 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x4 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x8 DUP4 ADD SLOAD PUSH1 0x5 DUP3 ADD SSTORE ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP2 SLOAD AND SWAP1 SSTORE ADD PUSH2 0x3875 JUMP JUMPDEST PUSH1 0x0 DUP4 JUMPDEST PUSH2 0x1A74 JUMPI JUMPDEST POP POP POP POP PUSH1 0x7 SWAP2 POP PUSH2 0x1A6A PUSH1 0x8 SLOAD PUSH2 0x3788 JUMP JUMPDEST PUSH1 0x8 SSTORE SWAP1 POP PUSH2 0x1920 JUMP JUMPDEST DUP2 SLOAD DUP2 LT ISZERO PUSH2 0x1AB5 JUMPI DUP1 DUP4 PUSH2 0x1A8C PUSH2 0x1AAF SWAP4 DUP6 PUSH2 0x3405 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH2 0x1AAA DUP8 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x3875 JUMP JUMPDEST PUSH2 0x3788 JUMP JUMPDEST DUP4 PUSH2 0x1A52 JUMP JUMPDEST PUSH2 0x1A57 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F75726E616D656E74206E6F7420726561647920746F207374617274000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F75676820706C61796572730000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F75726E616D656E7420616C72656164792073746172746564000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH2 0x1C83 PUSH2 0x1C7B PUSH2 0x31DF JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x3C7F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x267 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x267 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x748 JUMPI DUP2 PUSH1 0x5 SHL SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1D3D PUSH1 0x20 DUP5 ADD DUP6 PUSH2 0x32FF JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH1 0x24 DUP3 SWAP4 DUP3 ADD ADD SWAP1 CALLDATASIZE DUP3 GT PUSH2 0x267 JUMPI PUSH1 0x24 ADD SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x223F JUMPI POP POP POP PUSH2 0x1D6A PUSH2 0x35BB JUMP JUMPDEST PUSH2 0x1D72 PUSH2 0x37C2 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1D8E DUP2 SLOAD ISZERO ISZERO PUSH2 0x37F8 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SWAP2 DUP3 SLOAD SWAP3 PUSH1 0xFF DUP5 PUSH1 0x8 SHR AND PUSH1 0x6 DUP2 LT ISZERO PUSH2 0x895 JUMPI PUSH1 0x3 PUSH2 0x1DB2 SWAP2 EQ PUSH2 0x38CC JUMP JUMPDEST DUP5 MLOAD ISZERO PUSH2 0x21E1 JUMPI PUSH2 0x400 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF PUSH2 0x1E17 SWAP6 AND OR SWAP1 SSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH2 0x1E1C PUSH2 0x3E8 SWAP2 DUP3 PUSH2 0x1DFE PUSH1 0xE SLOAD DUP4 PUSH2 0x3C4B JUMP JUMPDEST DIV SWAP6 DUP7 SWAP4 PUSH2 0x1E0E PUSH1 0xF SLOAD DUP5 PUSH2 0x3C4B JUMP JUMPDEST DIV SWAP4 DUP5 SWAP3 PUSH2 0x3C5E JUMP JUMPDEST PUSH2 0x3C5E JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x2055 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 PUSH2 0x1E57 DUP3 PUSH2 0x1E4D DUP4 DUP12 PUSH2 0x3C6B JUMP JUMPDEST MLOAD AND PUSH1 0x4 CALLDATALOAD PUSH2 0x3C7F JUMP JUMPDEST ISZERO PUSH2 0x1FF7 JUMPI DUP1 PUSH2 0x1FA7 JUMPI PUSH1 0x32 DUP1 DUP8 MUL SWAP1 DUP8 DUP3 DIV EQ DUP8 ISZERO OR ISZERO PUSH2 0x1765 JUMPI PUSH1 0x64 SWAP1 DIV SWAP2 JUMPDEST DUP3 PUSH2 0x1E8F JUMPI JUMPDEST POP PUSH2 0x1E8A SWAP2 POP PUSH2 0x3788 JUMP JUMPDEST PUSH2 0x1E20 JUMP JUMPDEST PUSH2 0x1F05 PUSH1 0x20 DUP5 DUP12 DUP5 PUSH2 0x1EA9 DUP8 DUP3 PUSH1 0x2 SLOAD PUSH1 0x8 SHR AND SWAP4 PUSH2 0x3C6B JUMP JUMPDEST MLOAD AND PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP3 ADD SWAP6 AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x1F9B JUMPI PUSH2 0x1F6C JUMPI JUMPDEST POP PUSH2 0x1F1F DUP3 DUP11 PUSH2 0x3C6B JUMP JUMPDEST MLOAD AND PUSH1 0x1 DUP3 ADD DUP3 GT PUSH2 0x1765 JUMPI PUSH2 0x1E8A SWAP3 PUSH1 0x40 MLOAD SWAP1 PUSH1 0x1 DUP5 ADD DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xC0D2773DACE20252CD0787CDC7C52FE3633EEA19EB0F904ECAE1B3A38226AB4C PUSH1 0x40 PUSH1 0x4 CALLDATALOAD SWAP3 LOG3 DUP9 PUSH2 0x1E7F JUMP JUMPDEST PUSH2 0x1F8D SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1F94 JUMPI JUMPDEST PUSH2 0x1F85 DUP2 DUP4 PUSH2 0x32FF JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x385D JUMP JUMPDEST POP DUP10 PUSH2 0x1F14 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1F7B JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x1FCB JUMPI PUSH1 0x1E DUP1 DUP8 MUL SWAP1 DUP8 DUP3 DIV EQ DUP8 ISZERO OR ISZERO PUSH2 0x1765 JUMPI PUSH1 0x64 SWAP1 DIV SWAP2 PUSH2 0x1E79 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0x1FEF JUMPI PUSH1 0x14 DUP1 DUP8 MUL SWAP1 DUP8 DUP3 DIV EQ DUP8 ISZERO OR ISZERO PUSH2 0x1765 JUMPI PUSH1 0x64 SWAP1 DIV SWAP2 PUSH2 0x1E79 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x1E79 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57696E6E6572206E6F7420726567697374657265640000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP DUP6 SWAP3 SWAP4 SWAP5 DUP1 PUSH2 0x2156 JUMPI JUMPDEST POP DUP2 PUSH2 0x20BE JUMPI JUMPDEST POP POP MLOAD ISZERO PUSH2 0x1ABA JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 MLOAD AND SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xB23508F522F6895A5C44E106456CB05B61D4E1539CC9C7A0F09E1BAFF64378AC PUSH1 0x40 PUSH1 0x4 CALLDATALOAD SWAP3 LOG3 STOP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xA SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x20 SWAP2 DUP4 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x8 SHR AND GAS CALL DUP1 ISZERO PUSH2 0x1F9B JUMPI PUSH2 0x2137 JUMPI JUMPDEST DUP1 PUSH2 0x2067 JUMP JUMPDEST PUSH2 0x214F SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1F94 JUMPI PUSH2 0x1F85 DUP2 DUP4 PUSH2 0x32FF JUMP JUMPDEST POP DUP4 PUSH2 0x2131 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x8 SHR PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 DUP2 PUSH1 0x44 DUP2 ADD SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x1F9B JUMPI ISZERO PUSH2 0x2060 JUMPI PUSH2 0x21DA SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1F94 JUMPI PUSH2 0x1F85 DUP2 DUP4 PUSH2 0x32FF JUMP JUMPDEST POP DUP6 PUSH2 0x2060 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F2077696E6E65727320737065636966696564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x267 JUMPI DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x1D58 JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x22A6 PUSH2 0x3581 JUMP JUMPDEST PUSH2 0x22B3 PUSH1 0x64 DUP3 GT ISZERO PUSH2 0x3CEE JUMP JUMPDEST PUSH1 0xF SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x80 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x22EF PUSH2 0x31DF JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x267 JUMPI PUSH2 0xA3B SWAP2 PUSH2 0x231C PUSH2 0x3525 JUMP JUMPDEST PUSH2 0x2324 PUSH2 0x37C2 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP2 PUSH1 0x4 CALLDATALOAD PUSH2 0x3931 JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x2367 PUSH2 0x3202 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x267 JUMPI PUSH1 0x20 SWAP2 PUSH2 0x9D0 SWAP2 PUSH2 0x3405 JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x23DA PUSH2 0x3492 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLDATALOAD PUSH1 0x24 DUP3 ADD MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x8 SHR PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 DUP2 PUSH1 0x44 DUP2 ADD SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x1F9B JUMPI PUSH2 0x244A JUMPI STOP JUMPDEST PUSH2 0xA3B SWAP1 PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1F94 JUMPI PUSH2 0x1F85 DUP2 DUP4 PUSH2 0x32FF JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH2 0xC89 PUSH1 0x1 DUP3 ADD SLOAD SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 PUSH1 0x2 DUP3 ADD SLOAD AND SWAP2 DUP5 PUSH1 0x3 DUP4 ADD SLOAD AND SWAP1 PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x5 DUP5 ADD SLOAD PUSH1 0x6 DUP6 ADD SLOAD SWAP2 PUSH1 0x7 DUP7 ADD SLOAD SWAP4 PUSH1 0x8 DUP8 ADD SLOAD SWAP6 PUSH1 0xFF PUSH1 0xA PUSH2 0x24FE PUSH1 0x9 DUP12 ADD PUSH2 0x3340 JUMP JUMPDEST SWAP10 ADD SLOAD AND SWAP9 PUSH1 0x40 MLOAD SWAP13 DUP14 SWAP13 PUSH1 0xFF DUP7 PUSH1 0xA0 SHR AND SWAP6 AND SWAP4 DUP14 PUSH2 0x3225 JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x2550 PUSH2 0x3492 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH2 0x25AD JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x2 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x8DFC202B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0xC89 PUSH1 0x1 DUP4 ADD SLOAD SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 PUSH1 0x2 DUP4 ADD SLOAD AND SWAP1 DUP5 PUSH1 0x3 DUP5 ADD SLOAD AND SWAP1 PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x6 DUP7 ADD SLOAD SWAP2 PUSH1 0x7 DUP8 ADD SLOAD SWAP4 PUSH1 0x8 DUP9 ADD SLOAD SWAP6 PUSH2 0x2677 PUSH1 0x9 PUSH1 0xFF PUSH1 0xA DUP13 ADD SLOAD AND SWAP11 ADD PUSH2 0x3340 JUMP JUMPDEST SWAP8 PUSH1 0x40 MLOAD SWAP13 DUP14 SWAP13 PUSH1 0xFF DUP7 PUSH1 0xA0 SHR AND SWAP6 AND SWAP4 DUP14 PUSH2 0x3225 JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x2 SLOAD PUSH1 0x8 SHR AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x2756 PUSH2 0x31DF JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SUB PUSH2 0x277F JUMPI PUSH2 0xA3B SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x36E7 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x6697B23200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x27E5 PUSH2 0x37C2 JUMP JUMPDEST PUSH1 0x1 SWAP2 PUSH1 0x2 DUP4 SLOAD EQ PUSH2 0x2B76 JUMPI PUSH1 0x2 DUP4 SSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0xA DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x280E DUP2 SLOAD ISZERO ISZERO PUSH2 0x37F8 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x8 SHR AND PUSH1 0x6 DUP2 LT ISZERO PUSH2 0x895 JUMPI PUSH2 0x2B18 JUMPI PUSH1 0x7 DUP2 ADD SWAP1 DUP2 SLOAD PUSH1 0x6 DUP3 ADD SLOAD GT ISZERO PUSH2 0x2ABA JUMPI PUSH1 0xB DUP2 ADD SWAP2 DUP3 SLOAD ISZERO DUP1 ISZERO PUSH2 0x2AA9 JUMPI JUMPDEST ISZERO PUSH2 0x2A4B JUMPI PUSH1 0x2 SLOAD PUSH1 0x4 DUP4 DUP2 ADD DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE ADDRESS PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD MSTORE SWAP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP2 SWAP1 DUP9 SWAP1 DUP3 SWAP1 PUSH1 0x64 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x8 SHR DUP9 AND GAS CALL DUP1 ISZERO PUSH2 0x1F9B JUMPI PUSH2 0x2A2E JUMPI JUMPDEST POP PUSH2 0x28E6 DUP6 SLOAD PUSH1 0x5 DUP7 ADD PUSH2 0x28DC DUP3 DUP3 SLOAD PUSH2 0x37B5 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x9 SLOAD PUSH2 0x37B5 JUMP JUMPDEST PUSH1 0x9 SSTORE DUP1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x748 JUMPI PUSH2 0x290A SWAP2 DUP10 DUP3 ADD DUP2 SSTORE PUSH2 0x3405 JUMP JUMPDEST DUP2 SWAP3 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 CALLER DUP4 SHL SWAP3 SHL NOT AND OR SWAP1 SSTORE PUSH2 0x2927 DUP2 SLOAD PUSH2 0x3788 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0xC DUP5 MSTORE PUSH2 0x293F DUP4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x3875 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0xE0 DUP3 ADD SWAP1 DUP3 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x748 JUMPI PUSH1 0x6 SWAP2 PUSH1 0x40 MSTORE PUSH1 0x0 DUP4 MSTORE DUP6 DUP4 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 DUP5 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 DUP6 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 PUSH1 0x0 DUP4 MSTORE PUSH1 0xA0 DUP8 ADD SWAP4 PUSH1 0x0 DUP6 MSTORE PUSH1 0xD PUSH1 0xC0 DUP10 ADD SWAP7 PUSH1 0x0 DUP9 MSTORE CALLER PUSH1 0x0 MSTORE ADD DUP12 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP8 MLOAD DUP9 SSTORE MLOAD DUP12 DUP9 ADD SSTORE MLOAD PUSH1 0x2 DUP8 ADD SSTORE MLOAD PUSH1 0x3 DUP7 ADD SSTORE MLOAD PUSH1 0x4 DUP6 ADD SSTORE PUSH1 0x5 DUP5 ADD SWAP1 MLOAD ISZERO ISZERO PUSH1 0xFF PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE MLOAD SWAP2 ADD SSTORE SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE TIMESTAMP SWAP1 DUP4 ADD MSTORE PUSH32 0x279369079F3ED0A125DDA793BFDE61237D8D2F679C1345A15AB761C5D7B6135D PUSH1 0x40 CALLER SWAP4 LOG3 DUP1 SSTORE STOP JUMPDEST PUSH2 0x2A44 SWAP1 DUP9 RETURNDATASIZE DUP11 GT PUSH2 0x1F94 JUMPI PUSH2 0x1F85 DUP2 DUP4 PUSH2 0x32FF JUMP JUMPDEST POP DUP9 PUSH2 0x28C7 JUMP JUMPDEST PUSH1 0x64 DUP6 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C726561647920726567697374657265640000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH2 0x2AB4 CALLER DUP6 PUSH2 0x3C7F JUMP JUMPDEST ISZERO PUSH2 0x2847 JUMP JUMPDEST PUSH1 0x64 DUP5 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F75726E616D656E742066756C6C0000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP4 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526567697374726174696F6E206E6F74206F70656E0000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0xA3B PUSH1 0x4 CALLDATALOAD PUSH2 0x2C2F PUSH2 0x31DF JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH2 0x2C4A PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x3617 JUMP JUMPDEST PUSH2 0x363D JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0xF SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x400 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA DUP2 MSTORE PUSH1 0xB PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 DUP4 DUP3 SLOAD SWAP2 DUP3 DUP2 MSTORE ADD SWAP1 DUP2 SWAP3 PUSH1 0x0 MSTORE DUP5 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 JUMPDEST DUP7 DUP3 DUP3 LT PUSH2 0x2DCB JUMPI DUP7 DUP7 PUSH2 0x2D75 DUP3 DUP9 SUB DUP4 PUSH2 0x32FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP2 DUP5 ADD SWAP1 DUP3 DUP6 MSTORE MLOAD DUP1 SWAP2 MSTORE PUSH1 0x40 DUP5 ADD SWAP3 SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x2D9E JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x2D8F JUMP JUMPDEST DUP4 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 MSTORE SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x2D5F JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0xE SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0xFC2754C3124992C494F261273F660823CFF6F38AA3C30F5781021A51340F912D DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0xBF233DD2AAFEB4D50879C4AA5C81E96D92F6E6945C906A58F9F2D1C1631B4B26 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH2 0xC89 PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x5 DUP5 ADD SLOAD PUSH1 0x6 DUP6 ADD SLOAD PUSH1 0x7 DUP7 ADD SLOAD SWAP1 PUSH1 0x8 DUP8 ADD SLOAD SWAP3 PUSH1 0x9 DUP9 ADD SLOAD SWAP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA DUP11 ADD SLOAD AND SWAP7 PUSH2 0x2FCF PUSH1 0x2 PUSH2 0x2FC8 PUSH1 0x1 DUP14 ADD PUSH2 0x3340 JUMP JUMPDEST SWAP12 ADD PUSH2 0x3340 JUMP JUMPDEST SWAP11 PUSH1 0x40 MLOAD SWAP12 DUP13 SWAP12 PUSH1 0xFF DUP1 DUP6 PUSH1 0x8 SHR AND SWAP5 AND SWAP3 DUP14 PUSH2 0x314A JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x267 JUMPI DUP1 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 SWAP3 EQ SWAP1 DUP2 ISZERO PUSH2 0x307C JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 SWAP2 POP EQ DUP3 PUSH2 0x3071 JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x6 SLOAD DUP2 MSTORE RETURN JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x3129 JUMPI POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP7 SWAP8 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x30EA JUMP JUMPDEST SWAP1 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x895 JUMPI MSTORE JUMP JUMPDEST SWAP11 SWAP7 SWAP3 PUSH2 0x3177 PUSH2 0x3190 SWAP4 SWAP6 SWAP15 SWAP14 SWAP10 SWAP6 PUSH2 0x3185 SWAP4 DUP15 SWAP14 SWAP10 SWAP14 SWAP13 SWAP9 SWAP13 MSTORE DUP14 PUSH2 0x180 SWAP1 DUP2 PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x30DF JUMP JUMPDEST DUP13 DUP2 SUB PUSH1 0x40 DUP15 ADD MSTORE SWAP1 PUSH2 0x30DF JUMP JUMPDEST SWAP12 PUSH1 0x60 DUP12 ADD SWAP1 PUSH2 0x313D JUMP JUMPDEST PUSH1 0x6 DUP8 LT ISZERO PUSH2 0x895 JUMPI PUSH2 0x160 SWAP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP8 PUSH1 0x80 DUP12 ADD MSTORE PUSH1 0xA0 DUP11 ADD MSTORE PUSH1 0xC0 DUP10 ADD MSTORE PUSH1 0xE0 DUP9 ADD MSTORE PUSH2 0x100 DUP8 ADD MSTORE PUSH2 0x120 DUP7 ADD MSTORE PUSH2 0x140 DUP6 ADD MSTORE AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x267 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x267 JUMPI JUMP JUMPDEST SWAP11 SWAP8 SWAP5 SWAP3 SWAP2 SWAP1 SWAP13 SWAP12 SWAP13 SWAP10 SWAP7 SWAP10 SWAP9 SWAP6 SWAP9 DUP12 MSTORE PUSH1 0x20 DUP12 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP1 SWAP3 AND PUSH1 0x40 DUP13 ADD MSTORE AND PUSH1 0x60 DUP11 ADD MSTORE AND PUSH1 0x80 DUP9 ADD MSTORE PUSH1 0x4 DUP6 LT ISZERO PUSH2 0x895 JUMPI PUSH2 0x160 SWAP6 PUSH2 0x32A4 SWAP6 PUSH1 0xA0 DUP10 ADD MSTORE PUSH1 0xC0 DUP9 ADD MSTORE PUSH1 0xE0 DUP8 ADD MSTORE PUSH2 0x100 DUP7 ADD MSTORE PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x180 DUP1 PUSH2 0x140 DUP7 ADD MSTORE DUP5 ADD SWAP1 PUSH2 0x30DF JUMP JUMPDEST SWAP4 ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x32F5 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x32C6 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x32BB JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x748 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x3354 DUP5 PUSH2 0x32AC JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x33C3 JUMPI POP PUSH1 0x1 EQ PUSH2 0x3380 JUMPI JUMPDEST POP POP PUSH2 0x337E SWAP3 POP SUB DUP4 PUSH2 0x32FF JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x33AB JUMPI POP POP PUSH2 0x337E SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x3370 JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x3393 JUMP JUMPDEST SWAP1 POP PUSH2 0x337E SWAP6 POP PUSH1 0x20 SWAP4 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 SWAP2 POP AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x3370 JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x1ABA JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x267 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x748 JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x3470 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND ADD DUP6 PUSH2 0x32FF JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x267 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x3C1B1854AB1360ABBB06C8D4C6B2672D4B8CEDC5EFF522AB19E51D5CB8FDBD46 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH32 0xBF233DD2AAFEB4D50879C4AA5C81E96D92F6E6945C906A58F9F2D1C1631B4B26 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x34EE JUMPI POP JUMP JUMPDEST PUSH1 0x44 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH32 0xE2517D3F00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x656E56AB8DD91E8AB3A0BCA8FA0441044BAF531879B6B21D090DE8274DB24B30 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH32 0xFC2754C3124992C494F261273F660823CFF6F38AA3C30F5781021A51340F912D SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x34EE JUMPI POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xAD3228B676F7D3CD4284A5443F17F1962B36E491B30A40B2405849E597BA5FB5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x34EE JUMPI POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x938FAE1EBE625F23A46C9C067BF25F1FDC5E976AAB24E3D0FF1A7BD30DA28644 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH32 0x65C9916F995116B13DA98F2377109FFC8F2ED0372863561A4BF02356BFC80BF6 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x34EE JUMPI POP JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x34EE JUMPI POP JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP5 KECCAK256 SWAP3 AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND ISZERO PUSH1 0x0 EQ PUSH2 0x36E2 JUMPI DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP5 KECCAK256 SWAP3 AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH1 0x0 EQ PUSH2 0x36E2 JUMPI DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x1765 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1765 JUMPI JUMP JUMPDEST PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH2 0x37CE JUMPI JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0xD93C066500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST ISZERO PUSH2 0x37FF JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F75726E616D656E7420646F6573206E6F7420657869737400000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x267 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x267 JUMPI SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x748 JUMPI PUSH2 0x3897 SWAP2 PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x3405 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SWAP4 SWAP3 SLOAD SWAP2 PUSH1 0x3 SHL SWAP3 DUP4 SHL SWAP3 SHL NOT AND OR SWAP1 SSTORE JUMP JUMPDEST ISZERO PUSH2 0x38D3 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F75726E616D656E74206E6F7420696E2070726F6772657373000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP3 SWAP1 SWAP2 PUSH1 0x0 SWAP3 DUP5 DUP5 MSTORE PUSH1 0x20 SWAP4 PUSH1 0xA DUP6 MSTORE PUSH1 0x40 SWAP1 DUP2 DUP2 KECCAK256 SWAP1 PUSH2 0x3954 DUP3 SLOAD ISZERO ISZERO PUSH2 0x37F8 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x8 SHR AND PUSH1 0x6 DUP2 LT ISZERO PUSH2 0x3C1E JUMPI PUSH1 0x3 PUSH2 0x3974 SWAP2 EQ PUSH2 0x38CC JUMP JUMPDEST PUSH2 0x397E DUP5 DUP10 PUSH2 0x3C7F JUMP JUMPDEST ISZERO PUSH2 0x3BC1 JUMPI PUSH2 0x398D DUP6 DUP10 PUSH2 0x3C7F JUMP JUMPDEST ISZERO PUSH2 0x3B64 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND SWAP8 SWAP1 DUP7 AND DUP9 DUP2 EQ PUSH2 0x3B07 JUMPI SWAP1 DUP5 SWAP3 SWAP2 PUSH1 0x6 SLOAD PUSH2 0x39C5 SWAP1 PUSH2 0x3788 JUMP JUMPDEST SWAP10 DUP11 DUP1 SWAP7 DUP2 PUSH1 0x6 SSTORE DUP2 DUP7 MSTORE PUSH1 0xB DUP6 MSTORE DUP14 DUP8 DUP8 KECCAK256 SWAP1 DUP4 DUP3 SSTORE PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x2 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 DUP6 DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE DUP6 PUSH1 0x3 DUP4 ADD SWAP2 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 SSTORE DUP13 PUSH1 0x5 DUP3 ADD SSTORE PUSH1 0xA ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE PUSH1 0xC ADD SWAP1 PUSH2 0x3A81 SWAP2 PUSH2 0x3875 JUMP JUMPDEST DUP4 MSTORE PUSH1 0xD DUP3 MSTORE DUP5 DUP5 DUP5 KECCAK256 SWAP1 PUSH2 0x3A95 SWAP2 PUSH2 0x3875 JUMP JUMPDEST DUP3 MSTORE PUSH1 0xD SWAP1 MSTORE KECCAK256 SWAP1 PUSH2 0x3AA6 SWAP2 PUSH2 0x3875 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x3AB2 SWAP1 PUSH2 0x3788 JUMP JUMPDEST PUSH1 0x8 SSTORE MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x7DFA3731603A731645C7AA2C72BAD6FF6445DD8CD95BE0DB525EFC20AE390279 SWAP1 PUSH1 0x60 SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x64 DUP3 DUP7 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C6179657273206D75737420626520646966666572656E7400000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP8 DUP5 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C617965722032206E6F742072656769737465726564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP8 DUP5 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C617965722031206E6F742072656769737465726564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x24 DUP3 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE REVERT JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x1765 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x1765 JUMPI JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x1ABA JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0xB PUSH1 0x0 SWAP3 ADD DUP1 SLOAD SWAP3 JUMPDEST DUP4 DUP2 LT PUSH2 0x3CA7 JUMPI POP POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3CB1 DUP2 DUP4 PUSH2 0x3405 JUMP JUMPDEST SWAP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 DUP7 AND SWAP3 PUSH1 0x3 SHL SHR AND EQ PUSH2 0x3CE5 JUMPI PUSH2 0x3CE0 SWAP1 PUSH2 0x3788 JUMP JUMPDEST PUSH2 0x3C97 JUMP JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x3CF5 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46656520746F6F20686967680000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE 0xBD SWAP15 0xB7 INVALID 0x2B 0xEE SWAP15 ORIGIN 0x25 0xE7 0xCA 0xC PUSH24 0x7E824955EBFA896DF2766FFF468EDA4E951D64736F6C6343 STOP ADDMOD EQ STOP CALLER 0x2F DUP8 DUP9 GT PUSH31 0x7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D00000000 ","sourceMap":"502:26111:8:-:0;;;;;;;;;;;;;-1:-1:-1;;502:26111:8;;;;-1:-1:-1;;;;;502:26111:8;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;3996:1;;502:26111;4042:2;;502:26111;5849:20;502:26111;;-1:-1:-1;;;;;;502:26111:8;;;;;;-1:-1:-1;;;;;502:26111:8;;;;;;;;5880:24;502:26111;;-1:-1:-1;;;;;;502:26111:8;;;-1:-1:-1;;;;;502:26111:8;;;;;;;5915:20;502:26111;;;;;;;;;;;;;;;5956:42;5987:10;5956:42;:::i;:::-;;6009:49;5987:10;6009:49;:::i;:::-;;6069:42;5987:10;6069:42;:::i;:::-;;6122:38;5987:10;6122:38;:::i;:::-;;502:26111;;;;;;;;;;-1:-1:-1;502:26111:8;;;;;;-1:-1:-1;502:26111:8;;;;;-1:-1:-1;502:26111:8;;;;-1:-1:-1;;;;;502:26111:8;;;;;;:::o;6179:316:0:-;-1:-1:-1;;;;;502:26111:8;2232:4:0;502:26111:8;;;;;;;;;;2232:4:0;;502:26111:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;735:10:3;6370:40:0;-1:-1:-1;;;;;;;;;;;6370:40:0;;;502:26111:8;6424:11:0;:::o;6272:217::-;6466:12;;:::o;6179:316::-;-1:-1:-1;;;;;502:26111:8;2954:6:0;502:26111:8;;;;;;;;;;2954:6:0;;502:26111:8;835:38;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;735:10:3;6370:40:0;;;502:26111:8;6424:11:0;:::o;6272:217::-;6466:12;;;:::o;6179:316::-;-1:-1:-1;;;;;502:26111:8;2954:6:0;502:26111:8;;;;;;;;;;2954:6:0;;502:26111:8;925:31;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;735:10:3;6370:40:0;;;502:26111:8;6424:11:0;:::o;6179:316::-;-1:-1:-1;;;;;502:26111:8;2954:6:0;502:26111:8;;;;;;;;;;2954:6:0;;502:26111:8;1004:27;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;735:10:3;6370:40:0;;;502:26111:8;6424:11:0;:::o"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":12767,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_45541":{"entryPoint":12802,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":14429,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_string":{"entryPoint":13341,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_address_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_enum_TournamentType":{"entryPoint":12605,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_string":{"entryPoint":12511,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint256_string_string_enum_TournamentType_enum_TournamentStatus_uint256_uint256_uint256_uint256_uint256_uint256_address":{"entryPoint":12618,"id":null,"parameterSlots":13,"returnSlots":1},"abi_encode_uint256_uint256_address_address_address_enum_MatchStatus_uint256_uint256_uint256_uint256_string_bool":{"entryPoint":12837,"id":null,"parameterSlots":13,"returnSlots":1},"array_push_from_uint256_to_array_uint256_dyn_storage_ptr":{"entryPoint":14453,"id":null,"parameterSlots":2,"returnSlots":0},"checked_add_uint256":{"entryPoint":14261,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_uint256":{"entryPoint":15435,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256":{"entryPoint":15454,"id":null,"parameterSlots":2,"returnSlots":1},"copy_array_from_storage_to_memory_string":{"entryPoint":13120,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":12972,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":13055,"id":null,"parameterSlots":2,"returnSlots":0},"fun_checkRole":{"entryPoint":13847,"id":93,"parameterSlots":1,"returnSlots":0},"fun_checkRole_45539":{"entryPoint":13458,"id":93,"parameterSlots":0,"returnSlots":0},"fun_checkRole_45544":{"entryPoint":13605,"id":93,"parameterSlots":0,"returnSlots":0},"fun_checkRole_45545":{"entryPoint":13697,"id":93,"parameterSlots":0,"returnSlots":0},"fun_checkRole_45546":{"entryPoint":13755,"id":93,"parameterSlots":0,"returnSlots":0},"fun_createMatch":{"entryPoint":14641,"id":1548,"parameterSlots":4,"returnSlots":0},"fun_grantRole":{"entryPoint":13885,"id":256,"parameterSlots":2,"returnSlots":1},"fun_isPlayerRegistered":{"entryPoint":15487,"id":2075,"parameterSlots":2,"returnSlots":1},"fun_requireNotPaused":{"entryPoint":14274,"id":548,"parameterSlots":0,"returnSlots":0},"fun_revokeRole":{"entryPoint":14055,"id":294,"parameterSlots":2,"returnSlots":1},"increment_uint256":{"entryPoint":14216,"id":null,"parameterSlots":1,"returnSlots":1},"memory_array_index_access_address_dyn":{"entryPoint":15467,"id":null,"parameterSlots":2,"returnSlots":1},"require_helper_stringliteral_46d1":{"entryPoint":14540,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_48d9":{"entryPoint":15598,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_f4d0":{"entryPoint":14328,"id":null,"parameterSlots":1,"returnSlots":0},"storage_array_index_access_uint256_dyn":{"entryPoint":13317,"id":null,"parameterSlots":2,"returnSlots":2}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608080604052600436101561001357600080fd5b60003560e01c90816301fd1951146130a65750806301ffc9a714612fe75780631a5bd7fc14612f3057806320df435914612ed757806322106e3414612e7e578063248a9ca314612e3157806326232a2e14612df557806326f7519a14612d02578063281139ef14612cc75780632a5b145114612c8b5780632ae5a31d14612c4f5780632f2ff15d14612bf257806331b221cd14612ba0578063334f7deb146127a957806336568abe1461271f57806338bd1bc1146126ca578063398ab9a71461268e5780633d092b3d146125d75780633f4ba83a146125195780634768d4ef146124615780635312ea8e146123a3578063541133301461233057806354d82b21146122b857806356d47ecb1461226c57806356eafcc014611cce5780635c975abb14611c8d5780635d316c4914611c3f5780635f9f4b9c14611c03578063651ea943146115af5780636577b5c61461157557806366ccf959146114b857806368ff1b9014611466578063697ea0361461142a57806373ed5c1c146113ee57806374642a3114610c8d5780637503e1b714610bd25780638456cb5914610b3c57806391d1485414610ac3578063a217fddf14610a89578063aa0b598814610a3d578063d547741f146109de578063e06612751461095d578063e93e817c14610922578063f0a4e5c61461026c5763fbe7bc891461020e57600080fd5b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102675760206040517f65c9916f995116b13da98f2377109ffc8f2ed0372863561a4bf02356bfc80bf68152f35b600080fd5b346102675760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576102a36131df565b67ffffffffffffffff608435818111610267576102c490369060040161341d565b906102cd613525565b6102d56137c2565b600435600052600b6020526040600020918254156108c45760048301805460ff8160a01c16600481101561089557801590811561088a575b501561082c5773ffffffffffffffffffffffffffffffffffffffff60028601541673ffffffffffffffffffffffffffffffffffffffff87161480156107f3575b80156107d5575b15610777577fffffffffffffffffffffff0000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161774020000000000000000000000000000000000000000179055604435600784015560643560088401558051918211610748576103d260098401546132ac565b601f81116106fd575b50602090601f831160011461061d5773ffffffffffffffffffffffffffffffffffffffff93929160009183610612575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161760098201555b4260068201556001810154600052600a602052600d604060002083600284015416808587161460001461057c57508181018460028501541660005280602052604060002061048e8154613788565b90558460038501541660005260205260016040600020016104af8154613788565b90555b01826002830154166000528060205260036040600020016104d660443582546137b5565b905582600260038401938285541660005283602052600360406000200161050060643582546137b5565b90550154166000526020524260066040600020015554166000524260066040600020015573ffffffffffffffffffffffffffffffffffffffff604051916044358352606435602084015242604084015216907f17c8524efa0c839450a898abb8c8e0223f3c38f7995b61e189ed38344772a491606060043592a3005b600384019085825416868816146000146105d65750848383019154166000528060205260406000206105ae8154613788565b90558460028501541660005260205260016040600020016105cf8154613788565b90556104b2565b908590848401926000528260205260026040600020016105f68154613788565b9055541660005260205260026040600020016105cf8154613788565b01519050858061040b565b906009840160005260206000209160005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0851681106106e55750918391600193837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe073ffffffffffffffffffffffffffffffffffffffff989716106106ae575b505050811b016009820155610440565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c1916905585808061069e565b9192602060018192868501518155019401920161062e565b600984016000526020600020601f840160051c8101916020851061073e575b601f0160051c01905b81811061073257506103db565b60008155600101610725565b909150819061071c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c69642077696e6e65720000000000000000000000000000000000006044820152fd5b5073ffffffffffffffffffffffffffffffffffffffff861615610354565b5073ffffffffffffffffffffffffffffffffffffffff60038601541673ffffffffffffffffffffffffffffffffffffffff87161461034d565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4d61746368206e6f7420616374697665000000000000000000000000000000006044820152fd5b60019150148761030d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4d6174636820646f6573206e6f742065786973740000000000000000000000006044820152fd5b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020604051610e108152f35b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757610994613202565b73ffffffffffffffffffffffffffffffffffffffff6024359116600052600c60205260406000208054821015610267576020916109d091613405565b90546040519160031b1c8152f35b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757610a3b600435610a1b6131df565b90806000526000602052610a36600160406000200154613617565b6136e7565b005b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757600435610a77613581565b610a846032821115613cee565b600e55005b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757602060405160008152f35b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757610afa6131df565b600435600052600060205273ffffffffffffffffffffffffffffffffffffffff60406000209116600052602052602060ff604060002054166040519015158152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757610b73613492565b610b7b6137c2565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060025416176002557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757600435600052600a60205260406000208054610c89610c2260018401613340565b91610c2f60028501613340565b9360038101546004820154600583015460068401549060078501549260088601549473ffffffffffffffffffffffffffffffffffffffff600a600989015498015416976040519b8c9b60ff808560081c169416928d61314a565b0390f35b346102675760e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102675760043567ffffffffffffffff811161026757610cdc90369060040161341d565b60243567ffffffffffffffff811161026757610cfc90369060040161341d565b60449160058335101561026757610d116135bb565b610d196137c2565b8051156113905760046084351061133257610400608435116112d4574260a435111561127657610e1060c435106112185762093a8060c435116111ba57610d61600554613788565b918260055582600052600a602052604060002090838255825167ffffffffffffffff811161074857610d9660018401546132ac565b601f8111611173575b50806020601f82116001146110ac576000916110a1575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161760018301555b80519067ffffffffffffffff821161074857610e0960028401546132ac565b601f811161105a575b50602090601f8311600114610f6d577f6cee9b141362bef0916b96422a6c7e1d7dc5f2fffedb1a309647bdbde576ab269493929160009183610f62575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161760028201555b6003810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000060ff8835169116179055600a606435918260048201556000600582015560843560068201556000600782015560a4356008820155610eed60c43560a4356137b5565b600982015501337fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055610f26600754613788565b600755610f4d610f41604051936080855260808501906130df565b9560208401903561313d565b604082015260843560608201528033940390a3005b015190508780610e4f565b906002840160005260206000209160005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0851681106110425750918391600193837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe07f6cee9b141362bef0916b96422a6c7e1d7dc5f2fffedb1a309647bdbde576ab26999897161061100b575b505050811b016002820155610e84565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055878080610ffb565b91926020600181928685015181550194019201610f7e565b600284016000526020600020601f840160051c81016020851061109a575b601f830160051c8201811061108e575050610e12565b60008155600101611078565b5080611078565b905084015187610db6565b91506001840160005260206000206000925b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08316841061115b5760019350827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0811610611124575b5050811b016001830155610dea565b8601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690558780611115565b868101518255602093840193600190920191016110be565b600184016000526020600020601f830160051c8101602084106111b3575b601f830160051c820181106111a7575050610d9f565b60008155600101611191565b5080611191565b6064837f4475726174696f6e20746f6f206c6f6e67000000000000000000000000000000604051917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260116024840152820152fd5b6064837f4475726174696f6e20746f6f2073686f72740000000000000000000000000000604051917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260126024840152820152fd5b6064837f53746172742074696d65206d75737420626520696e2066757475726500000000604051917f08c379a000000000000000000000000000000000000000000000000000000000835260206004840152601c6024840152820152fd5b6064837f546f6f206d616e7920706c617965727300000000000000000000000000000000604051917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260106024840152820152fd5b6064837f546f6f2066657720706c61796572730000000000000000000000000000000000604051917f08c379a000000000000000000000000000000000000000000000000000000000835260206004840152600f6024840152820152fd5b6064837f546f75726e616d656e74206e616d652072657175697265640000000000000000604051917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260186024840152820152fd5b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020600554604051908152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757602060405162093a808152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757602073ffffffffffffffffffffffffffffffffffffffff60035416604051908152f35b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576114ef6131df565b600435600052600a60205273ffffffffffffffffffffffffffffffffffffffff600d604060002001911660005260205260e0604060002080549060018101549060028101546003820154600483015491600660ff600586015416940154946040519687526020870152604086015260608501526080840152151560a083015260c0820152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757602060405160048152f35b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576115e66135bb565b6115ee6137c2565b600435600052600a602052604060002061160a815415156137f8565b60038101805460ff8160081c16600681101561089557611ba5576004600784015410611b475760088301544210611ae9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff6103009116179055600435600052600a60205260ff60036040600020015416600581101561089557806119185750600435600052600a602052604060002090600b8201549160005b8381106116ea575050600791505b01546040519042825260208201527f2b4fbc018be75e6ff98b219698828856ce311122193b11596150e17268e2ee31604060043592a2005b600181018111611765578360018201106000146117945761175861171182600b8501613405565b9073ffffffffffffffffffffffffffffffffffffffff918291549060031b1c169061174260018501600b8701613405565b90549060031b1c16600885015491600435613931565b60028101809111156116a4575b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6119056117a2600654613788565b8060065580600052600b60205260406000208181556004356001820155600a6117ce85600b8801613405565b929073ffffffffffffffffffffffffffffffffffffffff938491549060031b1c16600282017fffffffffffffffffffffffff0000000000000000000000000000000000000000918282541617905560038201908154169055600481018781547fffffffffffffffffffffff000000000000000000000000000000000000000000866118998b600b7402000000000000000000000000000000000000000096877fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff881617895501613405565b90549060031b1c169116171790550160017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790556118de82600c8701613875565b6118eb84600b8701613405565b90549060031b1c16600052600d6020526040600020613875565b611910600854613788565b600855611758565b600414611928575b6007906116b2565b600435600052600a602052604060002090611944600654613788565b918260065582600052600b602052604060002083815560019160043583830155600b810190815415611aba578160005273ffffffffffffffffffffffffffffffffffffffff92836020600020541690600281017fffffffffffffffffffffffff000000000000000000000000000000000000000092838254161790558354861015611aba57611a4e92600a600c928a9487600052888a60206000200154166003830191825416179055600481017fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff815416905560088301546005820155017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00815416905501613875565b6000835b611a74575b5050505060079150611a6a600854613788565b6008559050611920565b8154811015611ab5578083611a8c611aaf9385613405565b90549060031b1c16600052600d602052611aaa876040600020613875565b613788565b83611a52565b611a57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f546f75726e616d656e74206e6f7420726561647920746f2073746172740000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e6f7420656e6f75676820706c617965727300000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f546f75726e616d656e7420616c726561647920737461727465640000000000006044820152fd5b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020600754604051908152f35b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020611c83611c7b6131df565b600435613c7f565b6040519015158152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757602060ff600254166040519015158152f35b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102675767ffffffffffffffff6024358181116102675736602382011215610267578060040135918211610748578160051b9060405192611d3d60208401856132ff565b83526020830190602482938201019036821161026757602401915b81831061223f57505050611d6a6135bb565b611d726137c2565b600435600052600a6020526040600020611d8e815415156137f8565b600381019182549260ff8460081c166006811015610895576003611db291146138cc565b8451156121e1576104007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff611e1795161790556005820154611e1c6103e89182611dfe600e5483613c4b565b04958693611e0e600f5484613c4b565b04938492613c5e565b613c5e565b9260005b86518110156120555773ffffffffffffffffffffffffffffffffffffffff90611e5782611e4d838b613c6b565b5116600435613c7f565b15611ff75780611fa75760328087029087820414871517156117655760649004915b82611e8f575b50611e8a9150613788565b611e20565b611f056020848b84611ea9878260025460081c1693613c6b565b511660006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af18015611f9b57611f6c575b50611f1f828a613c6b565b511660018201821161176557611e8a926040519060018401825260208201527fc0d2773dace20252cd0787cdc7c52fe3633eea19eb0f904ecae1b3a38226ab4c604060043592a388611e7f565b611f8d9060203d602011611f94575b611f8581836132ff565b81019061385d565b5089611f14565b503d611f7b565b6040513d6000823e3d90fd5b60018103611fcb57601e808702908782041487151715611765576064900491611e79565b60028103611fef576014808702908782041487151715611765576064900491611e79565b600091611e79565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f57696e6e6572206e6f74207265676973746572656400000000000000000000006044820152fd5b508592939480612156575b50816120be575b50505115611aba5773ffffffffffffffffffffffffffffffffffffffff905116906040519081524260208201527fb23508f522f6895a5c44e106456cb05b61d4e1539cc9c7a0f09e1baff64378ac604060043592a3005b600254600a91909101546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260248101939093526020918391604491839160009160081c165af18015611f9b57612137575b80612067565b61214f9060203d602011611f9457611f8581836132ff565b5083612131565b6002546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523060048201526024810192909252602090829060081c73ffffffffffffffffffffffffffffffffffffffff16816000816044810103925af18015611f9b5715612060576121da9060203d602011611f9457611f8581836132ff565b5085612060565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4e6f2077696e6e657273207370656369666965640000000000000000000000006044820152fd5b823573ffffffffffffffffffffffffffffffffffffffff8116810361026757815260209283019201611d58565b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576004356122a6613581565b6122b36064821115613cee565b600f55005b346102675760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576122ef6131df565b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361026757610a3b9161231c613525565b6123246137c2565b60643591600435613931565b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757612367613202565b73ffffffffffffffffffffffffffffffffffffffff6024359116600052600d60205260406000208054821015610267576020916109d091613405565b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576123da613492565b6002546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048083019190915235602482015290602090829060081c73ffffffffffffffffffffffffffffffffffffffff16816000816044810103925af18015611f9b5761244a57005b610a3b9060203d8111611f9457611f8581836132ff565b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757600435600052600b6020526040600020805490610c8960018201549273ffffffffffffffffffffffffffffffffffffffff92836002820154169184600383015416906004830154600584015460068501549160078601549360088701549560ff600a6124fe60098b01613340565b99015416986040519c8d9c60ff8660a01c169516938d613225565b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757612550613492565b60025460ff8116156125ad577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166002557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60046040517f8dfc202b000000000000000000000000000000000000000000000000000000008152fd5b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757600435600052600b60205260406000208054610c8960018301549273ffffffffffffffffffffffffffffffffffffffff928360028301541690846003840154169060048401546005850154600686015491600787015493600888015495612677600960ff600a8c0154169a01613340565b976040519c8d9c60ff8660a01c169516938d613225565b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020600954604051908152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757602073ffffffffffffffffffffffffffffffffffffffff60025460081c16604051908152f35b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576127566131df565b3373ffffffffffffffffffffffffffffffffffffffff82160361277f57610a3b906004356136e7565b60046040517f6697b232000000000000000000000000000000000000000000000000000000008152fd5b34610267576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757600435906127e56137c2565b6001916002835414612b76576002835580600052600a8252604060002061280e815415156137f8565b60ff600382015460081c16600681101561089557612b18576007810190815460068201541115612aba57600b8101918254158015612aa9575b15612a4b57600254600483810180546040517f23b872dd000000000000000000000000000000000000000000000000000000008152339381019390935230602484015260448301529473ffffffffffffffffffffffffffffffffffffffff9290919088908290606490829060009060081c88165af18015611f9b57612a2e575b506128e68554600586016128dc8282546137b5565b90556009546137b5565b6009558054680100000000000000008110156107485761290a918982018155613405565b819291549060031b9133831b921b19161790556129278154613788565b905533600052600c845261293f836040600020613875565b6040519060e082019082821067ffffffffffffffff8311176107485760069160405260008352858301600081526040840160008152606085016000815260808601916000835260a087019360008552600d60c08901966000885233600052018b52604060002097518855518b880155516002870155516003860155516004850155600584019051151560ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00835416911617905551910155549160405192835242908301527f279369079f3ed0a125dda793bfde61237d8d2f679c1345a15ab761c5d7b6135d60403393a38055005b612a4490883d8a11611f9457611f8581836132ff565b50886128c7565b606485604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601260248201527f416c7265616479207265676973746572656400000000000000000000000000006044820152fd5b50612ab43385613c7f565b15612847565b606484604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152600f60248201527f546f75726e616d656e742066756c6c00000000000000000000000000000000006044820152fd5b606483604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601560248201527f526567697374726174696f6e206e6f74206f70656e00000000000000000000006044820152fd5b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757602073ffffffffffffffffffffffffffffffffffffffff60045416604051908152f35b346102675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757610a3b600435612c2f6131df565b90806000526000602052612c4a600160406000200154613617565b61363d565b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020600f54604051908152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020600854604051908152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102675760206040516104008152f35b34610267576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757600435600052600a8152600b60406000200160405190818382549182815201908192600052846000209060005b86828210612dcb578686612d75828803836132ff565b604051928392818401908285525180915260408401929160005b828110612d9e57505050500390f35b835173ffffffffffffffffffffffffffffffffffffffff1685528695509381019392810192600101612d8f565b835473ffffffffffffffffffffffffffffffffffffffff1685529093019260019283019201612d5f565b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020600e54604051908152f35b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102675760043560005260006020526020600160406000200154604051908152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102675760206040517ffc2754c3124992c494f261273f660823cff6f38aa3c30f5781021a51340f912d8152f35b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102675760206040517fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b268152f35b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026757600435600052600a6020526040600020805490610c89600382015460048301546005840154600685015460078601549060088701549260098801549473ffffffffffffffffffffffffffffffffffffffff600a8a01541696612fcf6002612fc860018d01613340565b9b01613340565b9a6040519b8c9b60ff808560081c169416928d61314a565b346102675760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361026757807f7965db0b000000000000000000000000000000000000000000000000000000006020921490811561307c575b506040519015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501482613071565b346102675760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610267576020906006548152f35b919082519283825260005b8481106131295750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b6020818301810151848301820152016130ea565b9060058210156108955752565b9a969261317761319093959e9d9995613185938e9d999d9c989c528d6101809081602082015201906130df565b8c810360408e0152906130df565b9b60608b019061313d565b6006871015610895576101609773ffffffffffffffffffffffffffffffffffffffff9760808b015260a08a015260c089015260e088015261010087015261012086015261014085015216910152565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361026757565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361026757565b9a97949291909c9b9c9996999895988b5260208b015273ffffffffffffffffffffffffffffffffffffffff928380921660408c01521660608a0152166080880152600485101561089557610160956132a49560a089015260c088015260e0870152610100860152610120850152610180806101408601528401906130df565b931515910152565b90600182811c921680156132f5575b60208310146132c657565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916132bb565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761074857604052565b9060405191826000825492613354846132ac565b9081845260019485811690816000146133c35750600114613380575b505061337e925003836132ff565b565b9093915060005260209081600020936000915b8183106133ab57505061337e93508201013880613370565b85548884018501529485019487945091830191613393565b905061337e9550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013880613370565b8054821015611aba5760005260206000200190600090565b81601f820112156102675780359067ffffffffffffffff8211610748576040519261347060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f86011601856132ff565b8284526020838301011161026757816000926020809301838601378301015290565b3360009081527f3c1b1854ab1360abbb06c8d4c6b2672d4b8cedc5eff522ab19e51d5cb8fdbd4660205260409020547fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b269060ff16156134ee5750565b604490604051907fe2517d3f0000000000000000000000000000000000000000000000000000000082523360048301526024820152fd5b3360009081527f656e56ab8dd91e8ab3a0bca8fa0441044baf531879b6b21d090de8274db24b3060205260409020547ffc2754c3124992c494f261273f660823cff6f38aa3c30f5781021a51340f912d9060ff16156134ee5750565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205460ff16156134ee5750565b3360009081527f938fae1ebe625f23a46c9c067bf25f1fdc5e976aab24e3d0ff1a7bd30da2864460205260409020547f65c9916f995116b13da98f2377109ffc8f2ed0372863561a4bf02356bfc80bf69060ff16156134ee5750565b80600052600060205260406000203360005260205260ff60406000205416156134ee5750565b906000918083528260205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff604084205416156000146136e25780835282602052604083208284526020526040832060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b906000918083528260205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff6040842054166000146136e2578083528260205260408320828452602052604083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146117655760010190565b9190820180921161176557565b60ff600254166137ce57565b60046040517fd93c0665000000000000000000000000000000000000000000000000000000008152fd5b156137ff57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f546f75726e616d656e7420646f6573206e6f74206578697374000000000000006044820152fd5b90816020910312610267575180151581036102675790565b8054680100000000000000008110156107485761389791600182018155613405565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff829392549160031b92831b921b1916179055565b156138d357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f546f75726e616d656e74206e6f7420696e2070726f67726573730000000000006044820152fd5b929091600092848452602093600a855260409081812090613954825415156137f8565b60ff600383015460081c166006811015613c1e57600361397491146138cc565b61397e8489613c7f565b15613bc15761398d8589613c7f565b15613b645773ffffffffffffffffffffffffffffffffffffffff84811697908616888114613b0757908492916006546139c590613788565b998a809681600655818652600b85528d878720908382556001820155600281017fffffffffffffffffffffffff00000000000000000000000000000000000000009085828254161790558560038301918254161790556004810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690558c6005820155600a0180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600c0190613a8191613875565b8352600d82528484842090613a9591613875565b8252600d90522090613aa691613875565b600854613ab290613788565b6008555173ffffffffffffffffffffffffffffffffffffffff91821681529116602082015260408101919091527f7dfa3731603a731645c7aa2c72bad6ff6445dd8cd95be0db525efc20ae39027990606090a3565b6064828651907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601960248201527f506c6179657273206d75737420626520646966666572656e74000000000000006044820152fd5b6064878451907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601760248201527f506c617965722032206e6f7420726567697374657265640000000000000000006044820152fd5b6064878451907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601760248201527f506c617965722031206e6f7420726567697374657265640000000000000000006044820152fd5b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526021600452fd5b8181029291811591840414171561176557565b9190820391821161176557565b8051821015611aba5760209160051b010190565b600052600a602052604060002090600b600092018054925b838110613ca75750505050600090565b613cb18183613405565b905473ffffffffffffffffffffffffffffffffffffffff908186169260031b1c1614613ce557613ce090613788565b613c97565b50505050600190565b15613cf557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f46656520746f6f206869676800000000000000000000000000000000000000006044820152fdfea264697066735822122052bd9eb7fe2bee9e3225e7ca0c777e824955ebfa896df2766fff468eda4e951d64736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1FD1951 EQ PUSH2 0x30A6 JUMPI POP DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2FE7 JUMPI DUP1 PUSH4 0x1A5BD7FC EQ PUSH2 0x2F30 JUMPI DUP1 PUSH4 0x20DF4359 EQ PUSH2 0x2ED7 JUMPI DUP1 PUSH4 0x22106E34 EQ PUSH2 0x2E7E JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2E31 JUMPI DUP1 PUSH4 0x26232A2E EQ PUSH2 0x2DF5 JUMPI DUP1 PUSH4 0x26F7519A EQ PUSH2 0x2D02 JUMPI DUP1 PUSH4 0x281139EF EQ PUSH2 0x2CC7 JUMPI DUP1 PUSH4 0x2A5B1451 EQ PUSH2 0x2C8B JUMPI DUP1 PUSH4 0x2AE5A31D EQ PUSH2 0x2C4F JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2BF2 JUMPI DUP1 PUSH4 0x31B221CD EQ PUSH2 0x2BA0 JUMPI DUP1 PUSH4 0x334F7DEB EQ PUSH2 0x27A9 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x271F JUMPI DUP1 PUSH4 0x38BD1BC1 EQ PUSH2 0x26CA JUMPI DUP1 PUSH4 0x398AB9A7 EQ PUSH2 0x268E JUMPI DUP1 PUSH4 0x3D092B3D EQ PUSH2 0x25D7 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2519 JUMPI DUP1 PUSH4 0x4768D4EF EQ PUSH2 0x2461 JUMPI DUP1 PUSH4 0x5312EA8E EQ PUSH2 0x23A3 JUMPI DUP1 PUSH4 0x54113330 EQ PUSH2 0x2330 JUMPI DUP1 PUSH4 0x54D82B21 EQ PUSH2 0x22B8 JUMPI DUP1 PUSH4 0x56D47ECB EQ PUSH2 0x226C JUMPI DUP1 PUSH4 0x56EAFCC0 EQ PUSH2 0x1CCE JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x1C8D JUMPI DUP1 PUSH4 0x5D316C49 EQ PUSH2 0x1C3F JUMPI DUP1 PUSH4 0x5F9F4B9C EQ PUSH2 0x1C03 JUMPI DUP1 PUSH4 0x651EA943 EQ PUSH2 0x15AF JUMPI DUP1 PUSH4 0x6577B5C6 EQ PUSH2 0x1575 JUMPI DUP1 PUSH4 0x66CCF959 EQ PUSH2 0x14B8 JUMPI DUP1 PUSH4 0x68FF1B90 EQ PUSH2 0x1466 JUMPI DUP1 PUSH4 0x697EA036 EQ PUSH2 0x142A JUMPI DUP1 PUSH4 0x73ED5C1C EQ PUSH2 0x13EE JUMPI DUP1 PUSH4 0x74642A31 EQ PUSH2 0xC8D JUMPI DUP1 PUSH4 0x7503E1B7 EQ PUSH2 0xBD2 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0xB3C JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0xAC3 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0xA89 JUMPI DUP1 PUSH4 0xAA0B5988 EQ PUSH2 0xA3D JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x9DE JUMPI DUP1 PUSH4 0xE0661275 EQ PUSH2 0x95D JUMPI DUP1 PUSH4 0xE93E817C EQ PUSH2 0x922 JUMPI DUP1 PUSH4 0xF0A4E5C6 EQ PUSH2 0x26C JUMPI PUSH4 0xFBE7BC89 EQ PUSH2 0x20E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x65C9916F995116B13DA98F2377109FFC8F2ED0372863561A4BF02356BFC80BF6 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0xA0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x2A3 PUSH2 0x31DF JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x84 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x267 JUMPI PUSH2 0x2C4 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x341D JUMP JUMPDEST SWAP1 PUSH2 0x2CD PUSH2 0x3525 JUMP JUMPDEST PUSH2 0x2D5 PUSH2 0x37C2 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD ISZERO PUSH2 0x8C4 JUMPI PUSH1 0x4 DUP4 ADD DUP1 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x895 JUMPI DUP1 ISZERO SWAP1 DUP2 ISZERO PUSH2 0x88A JUMPI JUMPDEST POP ISZERO PUSH2 0x82C JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x2 DUP7 ADD SLOAD AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND EQ DUP1 ISZERO PUSH2 0x7F3 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI JUMPDEST ISZERO PUSH2 0x777 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND OR PUSH21 0x20000000000000000000000000000000000000000 OR SWAP1 SSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x7 DUP5 ADD SSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x8 DUP5 ADD SSTORE DUP1 MLOAD SWAP2 DUP3 GT PUSH2 0x748 JUMPI PUSH2 0x3D2 PUSH1 0x9 DUP5 ADD SLOAD PUSH2 0x32AC JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x6FD JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x61D JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0x612 JUMPI JUMPDEST POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x9 DUP3 ADD SSTORE JUMPDEST TIMESTAMP PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0xD PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP4 PUSH1 0x2 DUP5 ADD SLOAD AND DUP1 DUP6 DUP8 AND EQ PUSH1 0x0 EQ PUSH2 0x57C JUMPI POP DUP2 DUP2 ADD DUP5 PUSH1 0x2 DUP6 ADD SLOAD AND PUSH1 0x0 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x48E DUP2 SLOAD PUSH2 0x3788 JUMP JUMPDEST SWAP1 SSTORE DUP5 PUSH1 0x3 DUP6 ADD SLOAD AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x4AF DUP2 SLOAD PUSH2 0x3788 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST ADD DUP3 PUSH1 0x2 DUP4 ADD SLOAD AND PUSH1 0x0 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x3 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x4D6 PUSH1 0x44 CALLDATALOAD DUP3 SLOAD PUSH2 0x37B5 JUMP JUMPDEST SWAP1 SSTORE DUP3 PUSH1 0x2 PUSH1 0x3 DUP5 ADD SWAP4 DUP3 DUP6 SLOAD AND PUSH1 0x0 MSTORE DUP4 PUSH1 0x20 MSTORE PUSH1 0x3 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x500 PUSH1 0x64 CALLDATALOAD DUP3 SLOAD PUSH2 0x37B5 JUMP JUMPDEST SWAP1 SSTORE ADD SLOAD AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE TIMESTAMP PUSH1 0x6 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SSTORE SLOAD AND PUSH1 0x0 MSTORE TIMESTAMP PUSH1 0x6 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 MLOAD SWAP2 PUSH1 0x44 CALLDATALOAD DUP4 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x20 DUP5 ADD MSTORE TIMESTAMP PUSH1 0x40 DUP5 ADD MSTORE AND SWAP1 PUSH32 0x17C8524EFA0C839450A898ABB8C8E0223F3C38F7995B61E189ED38344772A491 PUSH1 0x60 PUSH1 0x4 CALLDATALOAD SWAP3 LOG3 STOP JUMPDEST PUSH1 0x3 DUP5 ADD SWAP1 DUP6 DUP3 SLOAD AND DUP7 DUP9 AND EQ PUSH1 0x0 EQ PUSH2 0x5D6 JUMPI POP DUP5 DUP4 DUP4 ADD SWAP2 SLOAD AND PUSH1 0x0 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x5AE DUP2 SLOAD PUSH2 0x3788 JUMP JUMPDEST SWAP1 SSTORE DUP5 PUSH1 0x2 DUP6 ADD SLOAD AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x5CF DUP2 SLOAD PUSH2 0x3788 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x4B2 JUMP JUMPDEST SWAP1 DUP6 SWAP1 DUP5 DUP5 ADD SWAP3 PUSH1 0x0 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x2 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x5F6 DUP2 SLOAD PUSH2 0x3788 JUMP JUMPDEST SWAP1 SSTORE SLOAD AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x2 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x5CF DUP2 SLOAD PUSH2 0x3788 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP6 DUP1 PUSH2 0x40B JUMP JUMPDEST SWAP1 PUSH1 0x9 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP6 AND DUP2 LT PUSH2 0x6E5 JUMPI POP SWAP2 DUP4 SWAP2 PUSH1 0x1 SWAP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP9 SWAP8 AND LT PUSH2 0x6AE JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x9 DUP3 ADD SSTORE PUSH2 0x440 JUMP JUMPDEST ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP6 DUP1 DUP1 PUSH2 0x69E JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x62E JUMP JUMPDEST PUSH1 0x9 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP6 LT PUSH2 0x73E JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x732 JUMPI POP PUSH2 0x3DB JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x725 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x71C JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642077696E6E6572000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND ISZERO PUSH2 0x354 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP7 ADD SLOAD AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND EQ PUSH2 0x34D JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D61746368206E6F742061637469766500000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x1 SWAP2 POP EQ DUP8 PUSH2 0x30D JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D6174636820646F6573206E6F74206578697374000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0xE10 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x994 PUSH2 0x3202 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x267 JUMPI PUSH1 0x20 SWAP2 PUSH2 0x9D0 SWAP2 PUSH2 0x3405 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH1 0x3 SHL SHR DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0xA3B PUSH1 0x4 CALLDATALOAD PUSH2 0xA1B PUSH2 0x31DF JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH2 0xA36 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x3617 JUMP JUMPDEST PUSH2 0x36E7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xA77 PUSH2 0x3581 JUMP JUMPDEST PUSH2 0xA84 PUSH1 0x32 DUP3 GT ISZERO PUSH2 0x3CEE JUMP JUMPDEST PUSH1 0xE SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0xAFA PUSH2 0x31DF JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0xB73 PUSH2 0x3492 JUMP JUMPDEST PUSH2 0xB7B PUSH2 0x37C2 JUMP JUMPDEST PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x2 SLOAD AND OR PUSH1 0x2 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0xC89 PUSH2 0xC22 PUSH1 0x1 DUP5 ADD PUSH2 0x3340 JUMP JUMPDEST SWAP2 PUSH2 0xC2F PUSH1 0x2 DUP6 ADD PUSH2 0x3340 JUMP JUMPDEST SWAP4 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0x6 DUP5 ADD SLOAD SWAP1 PUSH1 0x7 DUP6 ADD SLOAD SWAP3 PUSH1 0x8 DUP7 ADD SLOAD SWAP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA PUSH1 0x9 DUP10 ADD SLOAD SWAP9 ADD SLOAD AND SWAP8 PUSH1 0x40 MLOAD SWAP12 DUP13 SWAP12 PUSH1 0xFF DUP1 DUP6 PUSH1 0x8 SHR AND SWAP5 AND SWAP3 DUP14 PUSH2 0x314A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0xE0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x267 JUMPI PUSH2 0xCDC SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x341D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x267 JUMPI PUSH2 0xCFC SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x341D JUMP JUMPDEST PUSH1 0x44 SWAP2 PUSH1 0x5 DUP4 CALLDATALOAD LT ISZERO PUSH2 0x267 JUMPI PUSH2 0xD11 PUSH2 0x35BB JUMP JUMPDEST PUSH2 0xD19 PUSH2 0x37C2 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x1390 JUMPI PUSH1 0x4 PUSH1 0x84 CALLDATALOAD LT PUSH2 0x1332 JUMPI PUSH2 0x400 PUSH1 0x84 CALLDATALOAD GT PUSH2 0x12D4 JUMPI TIMESTAMP PUSH1 0xA4 CALLDATALOAD GT ISZERO PUSH2 0x1276 JUMPI PUSH2 0xE10 PUSH1 0xC4 CALLDATALOAD LT PUSH2 0x1218 JUMPI PUSH3 0x93A80 PUSH1 0xC4 CALLDATALOAD GT PUSH2 0x11BA JUMPI PUSH2 0xD61 PUSH1 0x5 SLOAD PUSH2 0x3788 JUMP JUMPDEST SWAP2 DUP3 PUSH1 0x5 SSTORE DUP3 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP4 DUP3 SSTORE DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x748 JUMPI PUSH2 0xD96 PUSH1 0x1 DUP5 ADD SLOAD PUSH2 0x32AC JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x1173 JUMPI JUMPDEST POP DUP1 PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x10AC JUMPI PUSH1 0x0 SWAP2 PUSH2 0x10A1 JUMPI JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1 DUP4 ADD SSTORE JUMPDEST DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x748 JUMPI PUSH2 0xE09 PUSH1 0x2 DUP5 ADD SLOAD PUSH2 0x32AC JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x105A JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xF6D JUMPI PUSH32 0x6CEE9B141362BEF0916B96422A6C7E1D7DC5F2FFFEDB1A309647BDBDE576AB26 SWAP5 SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0xF62 JUMPI JUMPDEST POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x2 DUP3 ADD SSTORE JUMPDEST PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 PUSH1 0xFF DUP9 CALLDATALOAD AND SWAP2 AND OR SWAP1 SSTORE PUSH1 0xA PUSH1 0x64 CALLDATALOAD SWAP2 DUP3 PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0x0 PUSH1 0x5 DUP3 ADD SSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0x0 PUSH1 0x7 DUP3 ADD SSTORE PUSH1 0xA4 CALLDATALOAD PUSH1 0x8 DUP3 ADD SSTORE PUSH2 0xEED PUSH1 0xC4 CALLDATALOAD PUSH1 0xA4 CALLDATALOAD PUSH2 0x37B5 JUMP JUMPDEST PUSH1 0x9 DUP3 ADD SSTORE ADD CALLER PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0xF26 PUSH1 0x7 SLOAD PUSH2 0x3788 JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH2 0xF4D PUSH2 0xF41 PUSH1 0x40 MLOAD SWAP4 PUSH1 0x80 DUP6 MSTORE PUSH1 0x80 DUP6 ADD SWAP1 PUSH2 0x30DF JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP5 ADD SWAP1 CALLDATALOAD PUSH2 0x313D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE DUP1 CALLER SWAP5 SUB SWAP1 LOG3 STOP JUMPDEST ADD MLOAD SWAP1 POP DUP8 DUP1 PUSH2 0xE4F JUMP JUMPDEST SWAP1 PUSH1 0x2 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP6 AND DUP2 LT PUSH2 0x1042 JUMPI POP SWAP2 DUP4 SWAP2 PUSH1 0x1 SWAP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH32 0x6CEE9B141362BEF0916B96422A6C7E1D7DC5F2FFFEDB1A309647BDBDE576AB26 SWAP10 SWAP9 SWAP8 AND LT PUSH2 0x100B JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x2 DUP3 ADD SSTORE PUSH2 0xE84 JUMP JUMPDEST ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP8 DUP1 DUP1 PUSH2 0xFFB JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0xF7E JUMP JUMPDEST PUSH1 0x2 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT PUSH2 0x109A JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x108E JUMPI POP POP PUSH2 0xE12 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1078 JUMP JUMPDEST POP DUP1 PUSH2 0x1078 JUMP JUMPDEST SWAP1 POP DUP5 ADD MLOAD DUP8 PUSH2 0xDB6 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP3 JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 AND DUP5 LT PUSH2 0x115B JUMPI PUSH1 0x1 SWAP4 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 AND LT PUSH2 0x1124 JUMPI JUMPDEST POP POP DUP2 SHL ADD PUSH1 0x1 DUP4 ADD SSTORE PUSH2 0xDEA JUMP JUMPDEST DUP7 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP8 DUP1 PUSH2 0x1115 JUMP JUMPDEST DUP7 DUP2 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x1 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP5 LT PUSH2 0x11B3 JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x11A7 JUMPI POP POP PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1191 JUMP JUMPDEST POP DUP1 PUSH2 0x1191 JUMP JUMPDEST PUSH1 0x64 DUP4 PUSH32 0x4475726174696F6E20746F6F206C6F6E67000000000000000000000000000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP4 PUSH32 0x4475726174696F6E20746F6F2073686F72740000000000000000000000000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP4 PUSH32 0x53746172742074696D65206D75737420626520696E2066757475726500000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP4 PUSH32 0x546F6F206D616E7920706C617965727300000000000000000000000000000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP4 PUSH32 0x546F6F2066657720706C61796572730000000000000000000000000000000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP4 PUSH32 0x546F75726E616D656E74206E616D652072657175697265640000000000000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH3 0x93A80 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x14EF PUSH2 0x31DF JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xD PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xE0 PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x4 DUP4 ADD SLOAD SWAP2 PUSH1 0x6 PUSH1 0xFF PUSH1 0x5 DUP7 ADD SLOAD AND SWAP5 ADD SLOAD SWAP5 PUSH1 0x40 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x4 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x15E6 PUSH2 0x35BB JUMP JUMPDEST PUSH2 0x15EE PUSH2 0x37C2 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x160A DUP2 SLOAD ISZERO ISZERO PUSH2 0x37F8 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND PUSH1 0x6 DUP2 LT ISZERO PUSH2 0x895 JUMPI PUSH2 0x1BA5 JUMPI PUSH1 0x4 PUSH1 0x7 DUP5 ADD SLOAD LT PUSH2 0x1B47 JUMPI PUSH1 0x8 DUP4 ADD SLOAD TIMESTAMP LT PUSH2 0x1AE9 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF PUSH2 0x300 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x3 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x895 JUMPI DUP1 PUSH2 0x1918 JUMPI POP PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0xB DUP3 ADD SLOAD SWAP2 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x16EA JUMPI POP POP PUSH1 0x7 SWAP2 POP JUMPDEST ADD SLOAD PUSH1 0x40 MLOAD SWAP1 TIMESTAMP DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x2B4FBC018BE75E6FF98B219698828856CE311122193B11596150E17268E2EE31 PUSH1 0x40 PUSH1 0x4 CALLDATALOAD SWAP3 LOG2 STOP JUMPDEST PUSH1 0x1 DUP2 ADD DUP2 GT PUSH2 0x1765 JUMPI DUP4 PUSH1 0x1 DUP3 ADD LT PUSH1 0x0 EQ PUSH2 0x1794 JUMPI PUSH2 0x1758 PUSH2 0x1711 DUP3 PUSH1 0xB DUP6 ADD PUSH2 0x3405 JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND SWAP1 PUSH2 0x1742 PUSH1 0x1 DUP6 ADD PUSH1 0xB DUP8 ADD PUSH2 0x3405 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x8 DUP6 ADD SLOAD SWAP2 PUSH1 0x4 CALLDATALOAD PUSH2 0x3931 JUMP JUMPDEST PUSH1 0x2 DUP2 ADD DUP1 SWAP2 GT ISZERO PUSH2 0x16A4 JUMPI JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1905 PUSH2 0x17A2 PUSH1 0x6 SLOAD PUSH2 0x3788 JUMP JUMPDEST DUP1 PUSH1 0x6 SSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0xA PUSH2 0x17CE DUP6 PUSH1 0xB DUP9 ADD PUSH2 0x3405 JUMP JUMPDEST SWAP3 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x2 DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP2 DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x3 DUP3 ADD SWAP1 DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP8 DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000 DUP7 PUSH2 0x1899 DUP12 PUSH1 0xB PUSH21 0x20000000000000000000000000000000000000000 SWAP7 DUP8 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND OR DUP10 SSTORE ADD PUSH2 0x3405 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND SWAP2 AND OR OR SWAP1 SSTORE ADD PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x18DE DUP3 PUSH1 0xC DUP8 ADD PUSH2 0x3875 JUMP JUMPDEST PUSH2 0x18EB DUP5 PUSH1 0xB DUP8 ADD PUSH2 0x3405 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x3875 JUMP JUMPDEST PUSH2 0x1910 PUSH1 0x8 SLOAD PUSH2 0x3788 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x1758 JUMP JUMPDEST PUSH1 0x4 EQ PUSH2 0x1928 JUMPI JUMPDEST PUSH1 0x7 SWAP1 PUSH2 0x16B2 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH2 0x1944 PUSH1 0x6 SLOAD PUSH2 0x3788 JUMP JUMPDEST SWAP2 DUP3 PUSH1 0x6 SSTORE DUP3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP4 DUP2 SSTORE PUSH1 0x1 SWAP2 PUSH1 0x4 CALLDATALOAD DUP4 DUP4 ADD SSTORE PUSH1 0xB DUP2 ADD SWAP1 DUP2 SLOAD ISZERO PUSH2 0x1ABA JUMPI DUP2 PUSH1 0x0 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 PUSH1 0x20 PUSH1 0x0 KECCAK256 SLOAD AND SWAP1 PUSH1 0x2 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP3 DUP4 DUP3 SLOAD AND OR SWAP1 SSTORE DUP4 SLOAD DUP7 LT ISZERO PUSH2 0x1ABA JUMPI PUSH2 0x1A4E SWAP3 PUSH1 0xA PUSH1 0xC SWAP3 DUP11 SWAP5 DUP8 PUSH1 0x0 MSTORE DUP9 DUP11 PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD AND PUSH1 0x3 DUP4 ADD SWAP2 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x4 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x8 DUP4 ADD SLOAD PUSH1 0x5 DUP3 ADD SSTORE ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP2 SLOAD AND SWAP1 SSTORE ADD PUSH2 0x3875 JUMP JUMPDEST PUSH1 0x0 DUP4 JUMPDEST PUSH2 0x1A74 JUMPI JUMPDEST POP POP POP POP PUSH1 0x7 SWAP2 POP PUSH2 0x1A6A PUSH1 0x8 SLOAD PUSH2 0x3788 JUMP JUMPDEST PUSH1 0x8 SSTORE SWAP1 POP PUSH2 0x1920 JUMP JUMPDEST DUP2 SLOAD DUP2 LT ISZERO PUSH2 0x1AB5 JUMPI DUP1 DUP4 PUSH2 0x1A8C PUSH2 0x1AAF SWAP4 DUP6 PUSH2 0x3405 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH2 0x1AAA DUP8 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x3875 JUMP JUMPDEST PUSH2 0x3788 JUMP JUMPDEST DUP4 PUSH2 0x1A52 JUMP JUMPDEST PUSH2 0x1A57 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F75726E616D656E74206E6F7420726561647920746F207374617274000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F75676820706C61796572730000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F75726E616D656E7420616C72656164792073746172746564000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH2 0x1C83 PUSH2 0x1C7B PUSH2 0x31DF JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x3C7F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x267 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x267 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x748 JUMPI DUP2 PUSH1 0x5 SHL SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1D3D PUSH1 0x20 DUP5 ADD DUP6 PUSH2 0x32FF JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH1 0x24 DUP3 SWAP4 DUP3 ADD ADD SWAP1 CALLDATASIZE DUP3 GT PUSH2 0x267 JUMPI PUSH1 0x24 ADD SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x223F JUMPI POP POP POP PUSH2 0x1D6A PUSH2 0x35BB JUMP JUMPDEST PUSH2 0x1D72 PUSH2 0x37C2 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1D8E DUP2 SLOAD ISZERO ISZERO PUSH2 0x37F8 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SWAP2 DUP3 SLOAD SWAP3 PUSH1 0xFF DUP5 PUSH1 0x8 SHR AND PUSH1 0x6 DUP2 LT ISZERO PUSH2 0x895 JUMPI PUSH1 0x3 PUSH2 0x1DB2 SWAP2 EQ PUSH2 0x38CC JUMP JUMPDEST DUP5 MLOAD ISZERO PUSH2 0x21E1 JUMPI PUSH2 0x400 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF PUSH2 0x1E17 SWAP6 AND OR SWAP1 SSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH2 0x1E1C PUSH2 0x3E8 SWAP2 DUP3 PUSH2 0x1DFE PUSH1 0xE SLOAD DUP4 PUSH2 0x3C4B JUMP JUMPDEST DIV SWAP6 DUP7 SWAP4 PUSH2 0x1E0E PUSH1 0xF SLOAD DUP5 PUSH2 0x3C4B JUMP JUMPDEST DIV SWAP4 DUP5 SWAP3 PUSH2 0x3C5E JUMP JUMPDEST PUSH2 0x3C5E JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x2055 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 PUSH2 0x1E57 DUP3 PUSH2 0x1E4D DUP4 DUP12 PUSH2 0x3C6B JUMP JUMPDEST MLOAD AND PUSH1 0x4 CALLDATALOAD PUSH2 0x3C7F JUMP JUMPDEST ISZERO PUSH2 0x1FF7 JUMPI DUP1 PUSH2 0x1FA7 JUMPI PUSH1 0x32 DUP1 DUP8 MUL SWAP1 DUP8 DUP3 DIV EQ DUP8 ISZERO OR ISZERO PUSH2 0x1765 JUMPI PUSH1 0x64 SWAP1 DIV SWAP2 JUMPDEST DUP3 PUSH2 0x1E8F JUMPI JUMPDEST POP PUSH2 0x1E8A SWAP2 POP PUSH2 0x3788 JUMP JUMPDEST PUSH2 0x1E20 JUMP JUMPDEST PUSH2 0x1F05 PUSH1 0x20 DUP5 DUP12 DUP5 PUSH2 0x1EA9 DUP8 DUP3 PUSH1 0x2 SLOAD PUSH1 0x8 SHR AND SWAP4 PUSH2 0x3C6B JUMP JUMPDEST MLOAD AND PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP3 ADD SWAP6 AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x1F9B JUMPI PUSH2 0x1F6C JUMPI JUMPDEST POP PUSH2 0x1F1F DUP3 DUP11 PUSH2 0x3C6B JUMP JUMPDEST MLOAD AND PUSH1 0x1 DUP3 ADD DUP3 GT PUSH2 0x1765 JUMPI PUSH2 0x1E8A SWAP3 PUSH1 0x40 MLOAD SWAP1 PUSH1 0x1 DUP5 ADD DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xC0D2773DACE20252CD0787CDC7C52FE3633EEA19EB0F904ECAE1B3A38226AB4C PUSH1 0x40 PUSH1 0x4 CALLDATALOAD SWAP3 LOG3 DUP9 PUSH2 0x1E7F JUMP JUMPDEST PUSH2 0x1F8D SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1F94 JUMPI JUMPDEST PUSH2 0x1F85 DUP2 DUP4 PUSH2 0x32FF JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x385D JUMP JUMPDEST POP DUP10 PUSH2 0x1F14 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1F7B JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x1FCB JUMPI PUSH1 0x1E DUP1 DUP8 MUL SWAP1 DUP8 DUP3 DIV EQ DUP8 ISZERO OR ISZERO PUSH2 0x1765 JUMPI PUSH1 0x64 SWAP1 DIV SWAP2 PUSH2 0x1E79 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0x1FEF JUMPI PUSH1 0x14 DUP1 DUP8 MUL SWAP1 DUP8 DUP3 DIV EQ DUP8 ISZERO OR ISZERO PUSH2 0x1765 JUMPI PUSH1 0x64 SWAP1 DIV SWAP2 PUSH2 0x1E79 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x1E79 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57696E6E6572206E6F7420726567697374657265640000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP DUP6 SWAP3 SWAP4 SWAP5 DUP1 PUSH2 0x2156 JUMPI JUMPDEST POP DUP2 PUSH2 0x20BE JUMPI JUMPDEST POP POP MLOAD ISZERO PUSH2 0x1ABA JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 MLOAD AND SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xB23508F522F6895A5C44E106456CB05B61D4E1539CC9C7A0F09E1BAFF64378AC PUSH1 0x40 PUSH1 0x4 CALLDATALOAD SWAP3 LOG3 STOP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xA SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x20 SWAP2 DUP4 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x8 SHR AND GAS CALL DUP1 ISZERO PUSH2 0x1F9B JUMPI PUSH2 0x2137 JUMPI JUMPDEST DUP1 PUSH2 0x2067 JUMP JUMPDEST PUSH2 0x214F SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1F94 JUMPI PUSH2 0x1F85 DUP2 DUP4 PUSH2 0x32FF JUMP JUMPDEST POP DUP4 PUSH2 0x2131 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x8 SHR PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 DUP2 PUSH1 0x44 DUP2 ADD SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x1F9B JUMPI ISZERO PUSH2 0x2060 JUMPI PUSH2 0x21DA SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1F94 JUMPI PUSH2 0x1F85 DUP2 DUP4 PUSH2 0x32FF JUMP JUMPDEST POP DUP6 PUSH2 0x2060 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F2077696E6E65727320737065636966696564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x267 JUMPI DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x1D58 JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x22A6 PUSH2 0x3581 JUMP JUMPDEST PUSH2 0x22B3 PUSH1 0x64 DUP3 GT ISZERO PUSH2 0x3CEE JUMP JUMPDEST PUSH1 0xF SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x80 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x22EF PUSH2 0x31DF JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x267 JUMPI PUSH2 0xA3B SWAP2 PUSH2 0x231C PUSH2 0x3525 JUMP JUMPDEST PUSH2 0x2324 PUSH2 0x37C2 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP2 PUSH1 0x4 CALLDATALOAD PUSH2 0x3931 JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x2367 PUSH2 0x3202 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x267 JUMPI PUSH1 0x20 SWAP2 PUSH2 0x9D0 SWAP2 PUSH2 0x3405 JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x23DA PUSH2 0x3492 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLDATALOAD PUSH1 0x24 DUP3 ADD MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x8 SHR PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 DUP2 PUSH1 0x44 DUP2 ADD SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x1F9B JUMPI PUSH2 0x244A JUMPI STOP JUMPDEST PUSH2 0xA3B SWAP1 PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1F94 JUMPI PUSH2 0x1F85 DUP2 DUP4 PUSH2 0x32FF JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH2 0xC89 PUSH1 0x1 DUP3 ADD SLOAD SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 PUSH1 0x2 DUP3 ADD SLOAD AND SWAP2 DUP5 PUSH1 0x3 DUP4 ADD SLOAD AND SWAP1 PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x5 DUP5 ADD SLOAD PUSH1 0x6 DUP6 ADD SLOAD SWAP2 PUSH1 0x7 DUP7 ADD SLOAD SWAP4 PUSH1 0x8 DUP8 ADD SLOAD SWAP6 PUSH1 0xFF PUSH1 0xA PUSH2 0x24FE PUSH1 0x9 DUP12 ADD PUSH2 0x3340 JUMP JUMPDEST SWAP10 ADD SLOAD AND SWAP9 PUSH1 0x40 MLOAD SWAP13 DUP14 SWAP13 PUSH1 0xFF DUP7 PUSH1 0xA0 SHR AND SWAP6 AND SWAP4 DUP14 PUSH2 0x3225 JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x2550 PUSH2 0x3492 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH2 0x25AD JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x2 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x8DFC202B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0xC89 PUSH1 0x1 DUP4 ADD SLOAD SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 PUSH1 0x2 DUP4 ADD SLOAD AND SWAP1 DUP5 PUSH1 0x3 DUP5 ADD SLOAD AND SWAP1 PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x6 DUP7 ADD SLOAD SWAP2 PUSH1 0x7 DUP8 ADD SLOAD SWAP4 PUSH1 0x8 DUP9 ADD SLOAD SWAP6 PUSH2 0x2677 PUSH1 0x9 PUSH1 0xFF PUSH1 0xA DUP13 ADD SLOAD AND SWAP11 ADD PUSH2 0x3340 JUMP JUMPDEST SWAP8 PUSH1 0x40 MLOAD SWAP13 DUP14 SWAP13 PUSH1 0xFF DUP7 PUSH1 0xA0 SHR AND SWAP6 AND SWAP4 DUP14 PUSH2 0x3225 JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x2 SLOAD PUSH1 0x8 SHR AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0x2756 PUSH2 0x31DF JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SUB PUSH2 0x277F JUMPI PUSH2 0xA3B SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x36E7 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x6697B23200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x27E5 PUSH2 0x37C2 JUMP JUMPDEST PUSH1 0x1 SWAP2 PUSH1 0x2 DUP4 SLOAD EQ PUSH2 0x2B76 JUMPI PUSH1 0x2 DUP4 SSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0xA DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x280E DUP2 SLOAD ISZERO ISZERO PUSH2 0x37F8 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x8 SHR AND PUSH1 0x6 DUP2 LT ISZERO PUSH2 0x895 JUMPI PUSH2 0x2B18 JUMPI PUSH1 0x7 DUP2 ADD SWAP1 DUP2 SLOAD PUSH1 0x6 DUP3 ADD SLOAD GT ISZERO PUSH2 0x2ABA JUMPI PUSH1 0xB DUP2 ADD SWAP2 DUP3 SLOAD ISZERO DUP1 ISZERO PUSH2 0x2AA9 JUMPI JUMPDEST ISZERO PUSH2 0x2A4B JUMPI PUSH1 0x2 SLOAD PUSH1 0x4 DUP4 DUP2 ADD DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE ADDRESS PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD MSTORE SWAP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP2 SWAP1 DUP9 SWAP1 DUP3 SWAP1 PUSH1 0x64 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x8 SHR DUP9 AND GAS CALL DUP1 ISZERO PUSH2 0x1F9B JUMPI PUSH2 0x2A2E JUMPI JUMPDEST POP PUSH2 0x28E6 DUP6 SLOAD PUSH1 0x5 DUP7 ADD PUSH2 0x28DC DUP3 DUP3 SLOAD PUSH2 0x37B5 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x9 SLOAD PUSH2 0x37B5 JUMP JUMPDEST PUSH1 0x9 SSTORE DUP1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x748 JUMPI PUSH2 0x290A SWAP2 DUP10 DUP3 ADD DUP2 SSTORE PUSH2 0x3405 JUMP JUMPDEST DUP2 SWAP3 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 CALLER DUP4 SHL SWAP3 SHL NOT AND OR SWAP1 SSTORE PUSH2 0x2927 DUP2 SLOAD PUSH2 0x3788 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0xC DUP5 MSTORE PUSH2 0x293F DUP4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x3875 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0xE0 DUP3 ADD SWAP1 DUP3 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x748 JUMPI PUSH1 0x6 SWAP2 PUSH1 0x40 MSTORE PUSH1 0x0 DUP4 MSTORE DUP6 DUP4 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 DUP5 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 DUP6 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 PUSH1 0x0 DUP4 MSTORE PUSH1 0xA0 DUP8 ADD SWAP4 PUSH1 0x0 DUP6 MSTORE PUSH1 0xD PUSH1 0xC0 DUP10 ADD SWAP7 PUSH1 0x0 DUP9 MSTORE CALLER PUSH1 0x0 MSTORE ADD DUP12 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP8 MLOAD DUP9 SSTORE MLOAD DUP12 DUP9 ADD SSTORE MLOAD PUSH1 0x2 DUP8 ADD SSTORE MLOAD PUSH1 0x3 DUP7 ADD SSTORE MLOAD PUSH1 0x4 DUP6 ADD SSTORE PUSH1 0x5 DUP5 ADD SWAP1 MLOAD ISZERO ISZERO PUSH1 0xFF PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE MLOAD SWAP2 ADD SSTORE SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE TIMESTAMP SWAP1 DUP4 ADD MSTORE PUSH32 0x279369079F3ED0A125DDA793BFDE61237D8D2F679C1345A15AB761C5D7B6135D PUSH1 0x40 CALLER SWAP4 LOG3 DUP1 SSTORE STOP JUMPDEST PUSH2 0x2A44 SWAP1 DUP9 RETURNDATASIZE DUP11 GT PUSH2 0x1F94 JUMPI PUSH2 0x1F85 DUP2 DUP4 PUSH2 0x32FF JUMP JUMPDEST POP DUP9 PUSH2 0x28C7 JUMP JUMPDEST PUSH1 0x64 DUP6 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C726561647920726567697374657265640000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH2 0x2AB4 CALLER DUP6 PUSH2 0x3C7F JUMP JUMPDEST ISZERO PUSH2 0x2847 JUMP JUMPDEST PUSH1 0x64 DUP5 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F75726E616D656E742066756C6C0000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP4 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526567697374726174696F6E206E6F74206F70656E0000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH2 0xA3B PUSH1 0x4 CALLDATALOAD PUSH2 0x2C2F PUSH2 0x31DF JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH2 0x2C4A PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x3617 JUMP JUMPDEST PUSH2 0x363D JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0xF SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x400 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA DUP2 MSTORE PUSH1 0xB PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 DUP4 DUP3 SLOAD SWAP2 DUP3 DUP2 MSTORE ADD SWAP1 DUP2 SWAP3 PUSH1 0x0 MSTORE DUP5 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 JUMPDEST DUP7 DUP3 DUP3 LT PUSH2 0x2DCB JUMPI DUP7 DUP7 PUSH2 0x2D75 DUP3 DUP9 SUB DUP4 PUSH2 0x32FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP2 DUP5 ADD SWAP1 DUP3 DUP6 MSTORE MLOAD DUP1 SWAP2 MSTORE PUSH1 0x40 DUP5 ADD SWAP3 SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x2D9E JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x2D8F JUMP JUMPDEST DUP4 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 MSTORE SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x2D5F JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0xE SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0xFC2754C3124992C494F261273F660823CFF6F38AA3C30F5781021A51340F912D DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0xBF233DD2AAFEB4D50879C4AA5C81E96D92F6E6945C906A58F9F2D1C1631B4B26 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH2 0xC89 PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x5 DUP5 ADD SLOAD PUSH1 0x6 DUP6 ADD SLOAD PUSH1 0x7 DUP7 ADD SLOAD SWAP1 PUSH1 0x8 DUP8 ADD SLOAD SWAP3 PUSH1 0x9 DUP9 ADD SLOAD SWAP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA DUP11 ADD SLOAD AND SWAP7 PUSH2 0x2FCF PUSH1 0x2 PUSH2 0x2FC8 PUSH1 0x1 DUP14 ADD PUSH2 0x3340 JUMP JUMPDEST SWAP12 ADD PUSH2 0x3340 JUMP JUMPDEST SWAP11 PUSH1 0x40 MLOAD SWAP12 DUP13 SWAP12 PUSH1 0xFF DUP1 DUP6 PUSH1 0x8 SHR AND SWAP5 AND SWAP3 DUP14 PUSH2 0x314A JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x4 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x267 JUMPI DUP1 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 SWAP3 EQ SWAP1 DUP2 ISZERO PUSH2 0x307C JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 SWAP2 POP EQ DUP3 PUSH2 0x3071 JUMP JUMPDEST CALLVALUE PUSH2 0x267 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x267 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x6 SLOAD DUP2 MSTORE RETURN JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x3129 JUMPI POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP7 SWAP8 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x30EA JUMP JUMPDEST SWAP1 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x895 JUMPI MSTORE JUMP JUMPDEST SWAP11 SWAP7 SWAP3 PUSH2 0x3177 PUSH2 0x3190 SWAP4 SWAP6 SWAP15 SWAP14 SWAP10 SWAP6 PUSH2 0x3185 SWAP4 DUP15 SWAP14 SWAP10 SWAP14 SWAP13 SWAP9 SWAP13 MSTORE DUP14 PUSH2 0x180 SWAP1 DUP2 PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x30DF JUMP JUMPDEST DUP13 DUP2 SUB PUSH1 0x40 DUP15 ADD MSTORE SWAP1 PUSH2 0x30DF JUMP JUMPDEST SWAP12 PUSH1 0x60 DUP12 ADD SWAP1 PUSH2 0x313D JUMP JUMPDEST PUSH1 0x6 DUP8 LT ISZERO PUSH2 0x895 JUMPI PUSH2 0x160 SWAP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP8 PUSH1 0x80 DUP12 ADD MSTORE PUSH1 0xA0 DUP11 ADD MSTORE PUSH1 0xC0 DUP10 ADD MSTORE PUSH1 0xE0 DUP9 ADD MSTORE PUSH2 0x100 DUP8 ADD MSTORE PUSH2 0x120 DUP7 ADD MSTORE PUSH2 0x140 DUP6 ADD MSTORE AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x267 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x267 JUMPI JUMP JUMPDEST SWAP11 SWAP8 SWAP5 SWAP3 SWAP2 SWAP1 SWAP13 SWAP12 SWAP13 SWAP10 SWAP7 SWAP10 SWAP9 SWAP6 SWAP9 DUP12 MSTORE PUSH1 0x20 DUP12 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP1 SWAP3 AND PUSH1 0x40 DUP13 ADD MSTORE AND PUSH1 0x60 DUP11 ADD MSTORE AND PUSH1 0x80 DUP9 ADD MSTORE PUSH1 0x4 DUP6 LT ISZERO PUSH2 0x895 JUMPI PUSH2 0x160 SWAP6 PUSH2 0x32A4 SWAP6 PUSH1 0xA0 DUP10 ADD MSTORE PUSH1 0xC0 DUP9 ADD MSTORE PUSH1 0xE0 DUP8 ADD MSTORE PUSH2 0x100 DUP7 ADD MSTORE PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x180 DUP1 PUSH2 0x140 DUP7 ADD MSTORE DUP5 ADD SWAP1 PUSH2 0x30DF JUMP JUMPDEST SWAP4 ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x32F5 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x32C6 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x32BB JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x748 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x3354 DUP5 PUSH2 0x32AC JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x33C3 JUMPI POP PUSH1 0x1 EQ PUSH2 0x3380 JUMPI JUMPDEST POP POP PUSH2 0x337E SWAP3 POP SUB DUP4 PUSH2 0x32FF JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x33AB JUMPI POP POP PUSH2 0x337E SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x3370 JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x3393 JUMP JUMPDEST SWAP1 POP PUSH2 0x337E SWAP6 POP PUSH1 0x20 SWAP4 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 SWAP2 POP AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x3370 JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x1ABA JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x267 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x748 JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x3470 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND ADD DUP6 PUSH2 0x32FF JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x267 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x3C1B1854AB1360ABBB06C8D4C6B2672D4B8CEDC5EFF522AB19E51D5CB8FDBD46 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH32 0xBF233DD2AAFEB4D50879C4AA5C81E96D92F6E6945C906A58F9F2D1C1631B4B26 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x34EE JUMPI POP JUMP JUMPDEST PUSH1 0x44 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH32 0xE2517D3F00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x656E56AB8DD91E8AB3A0BCA8FA0441044BAF531879B6B21D090DE8274DB24B30 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH32 0xFC2754C3124992C494F261273F660823CFF6F38AA3C30F5781021A51340F912D SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x34EE JUMPI POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xAD3228B676F7D3CD4284A5443F17F1962B36E491B30A40B2405849E597BA5FB5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x34EE JUMPI POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x938FAE1EBE625F23A46C9C067BF25F1FDC5E976AAB24E3D0FF1A7BD30DA28644 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH32 0x65C9916F995116B13DA98F2377109FFC8F2ED0372863561A4BF02356BFC80BF6 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x34EE JUMPI POP JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x34EE JUMPI POP JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP5 KECCAK256 SWAP3 AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND ISZERO PUSH1 0x0 EQ PUSH2 0x36E2 JUMPI DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP5 KECCAK256 SWAP3 AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH1 0x0 EQ PUSH2 0x36E2 JUMPI DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x1765 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1765 JUMPI JUMP JUMPDEST PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH2 0x37CE JUMPI JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0xD93C066500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST ISZERO PUSH2 0x37FF JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F75726E616D656E7420646F6573206E6F7420657869737400000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x267 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x267 JUMPI SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x748 JUMPI PUSH2 0x3897 SWAP2 PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x3405 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SWAP4 SWAP3 SLOAD SWAP2 PUSH1 0x3 SHL SWAP3 DUP4 SHL SWAP3 SHL NOT AND OR SWAP1 SSTORE JUMP JUMPDEST ISZERO PUSH2 0x38D3 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F75726E616D656E74206E6F7420696E2070726F6772657373000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP3 SWAP1 SWAP2 PUSH1 0x0 SWAP3 DUP5 DUP5 MSTORE PUSH1 0x20 SWAP4 PUSH1 0xA DUP6 MSTORE PUSH1 0x40 SWAP1 DUP2 DUP2 KECCAK256 SWAP1 PUSH2 0x3954 DUP3 SLOAD ISZERO ISZERO PUSH2 0x37F8 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x8 SHR AND PUSH1 0x6 DUP2 LT ISZERO PUSH2 0x3C1E JUMPI PUSH1 0x3 PUSH2 0x3974 SWAP2 EQ PUSH2 0x38CC JUMP JUMPDEST PUSH2 0x397E DUP5 DUP10 PUSH2 0x3C7F JUMP JUMPDEST ISZERO PUSH2 0x3BC1 JUMPI PUSH2 0x398D DUP6 DUP10 PUSH2 0x3C7F JUMP JUMPDEST ISZERO PUSH2 0x3B64 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND SWAP8 SWAP1 DUP7 AND DUP9 DUP2 EQ PUSH2 0x3B07 JUMPI SWAP1 DUP5 SWAP3 SWAP2 PUSH1 0x6 SLOAD PUSH2 0x39C5 SWAP1 PUSH2 0x3788 JUMP JUMPDEST SWAP10 DUP11 DUP1 SWAP7 DUP2 PUSH1 0x6 SSTORE DUP2 DUP7 MSTORE PUSH1 0xB DUP6 MSTORE DUP14 DUP8 DUP8 KECCAK256 SWAP1 DUP4 DUP3 SSTORE PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x2 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 DUP6 DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE DUP6 PUSH1 0x3 DUP4 ADD SWAP2 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 SSTORE DUP13 PUSH1 0x5 DUP3 ADD SSTORE PUSH1 0xA ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE PUSH1 0xC ADD SWAP1 PUSH2 0x3A81 SWAP2 PUSH2 0x3875 JUMP JUMPDEST DUP4 MSTORE PUSH1 0xD DUP3 MSTORE DUP5 DUP5 DUP5 KECCAK256 SWAP1 PUSH2 0x3A95 SWAP2 PUSH2 0x3875 JUMP JUMPDEST DUP3 MSTORE PUSH1 0xD SWAP1 MSTORE KECCAK256 SWAP1 PUSH2 0x3AA6 SWAP2 PUSH2 0x3875 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x3AB2 SWAP1 PUSH2 0x3788 JUMP JUMPDEST PUSH1 0x8 SSTORE MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x7DFA3731603A731645C7AA2C72BAD6FF6445DD8CD95BE0DB525EFC20AE390279 SWAP1 PUSH1 0x60 SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x64 DUP3 DUP7 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C6179657273206D75737420626520646966666572656E7400000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP8 DUP5 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C617965722032206E6F742072656769737465726564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP8 DUP5 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C617965722031206E6F742072656769737465726564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x24 DUP3 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE REVERT JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x1765 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x1765 JUMPI JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x1ABA JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0xB PUSH1 0x0 SWAP3 ADD DUP1 SLOAD SWAP3 JUMPDEST DUP4 DUP2 LT PUSH2 0x3CA7 JUMPI POP POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3CB1 DUP2 DUP4 PUSH2 0x3405 JUMP JUMPDEST SWAP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 DUP7 AND SWAP3 PUSH1 0x3 SHL SHR AND EQ PUSH2 0x3CE5 JUMPI PUSH2 0x3CE0 SWAP1 PUSH2 0x3788 JUMP JUMPDEST PUSH2 0x3C97 JUMP JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x3CF5 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46656520746F6F20686967680000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE 0xBD SWAP15 0xB7 INVALID 0x2B 0xEE SWAP15 ORIGIN 0x25 0xE7 0xCA 0xC PUSH24 0x7E824955EBFA896DF2766FFF468EDA4E951D64736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"502:26111:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;835:38;502:26111;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;2475:4:0;;;:::i;:::-;1315:72:4;;:::i;:::-;502:26111:8;;;;13800:7;502:26111;;;;;;;;13835:22;502:26111;;;13901:16;;502:26111;;;;;;;;;;;;;13901:41;;:88;;;;;502:26111;;;;;;14039:17;;;502:26111;;;;;14029:27;:58;;;;502:26111;14029:82;;;;502:26111;;;;;;;;;;;;;;;;14238:22;;;502:26111;;;14286:22;;;502:26111;;;;;;;;;14334:18;;;502:26111;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14334:18;;;502:26111;;14394:15;14374:17;;;502:26111;;14506:22;;502:26111;;;14494:11;502:26111;;15079:22;502:26111;;;14039:17;;;;502:26111;;;;;;14544:27;14540:519;14544:27;;;14588:22;;;;14039:17;;;;502:26111;;;;;;;;;;14588:48;502:26111;;14588:48;:::i;:::-;502:26111;;14674:17;;;;502:26111;;;;;;;;;;14651:48;:50;502:26111;;14651:50;:::i;:::-;502:26111;;14540:519;15079:22;14039:17;;;;502:26111;;;;;;;15079:52;502:26111;;;15079:52;:68;502:26111;;;;15079:68;:::i;:::-;502:26111;;15181:17;14039;15079:52;15181:17;;502:26111;;;;;;;;;;15079:52;502:26111;;;15158:52;:68;502:26111;;;;15158:68;:::i;:::-;502:26111;;14039:17;502:26111;;;;;;14394:15;14374:17;502:26111;;;15237:55;502:26111;;;;;14394:15;14374:17;502:26111;;;15321:55;502:26111;;;;;;;;;;;;;;;14394:15;502:26111;;;;;;15420:76;502:26111;;;15420:76;;502:26111;14540:519;14733:17;;;502:26111;;;;;;;;14723:27;14719:340;502:26111;;;14767:22;;;;;502:26111;;;;;;;;;;;14767:48;502:26111;;14767:48;:::i;:::-;502:26111;;14039:17;;;;502:26111;;;;;;;;;;14830:48;:50;502:26111;;14830:50;:::i;:::-;502:26111;;14540:519;;14719:340;14934:22;;;;;;502:26111;;;;;;14039:17;502:26111;;;14934:47;:49;502:26111;;14934:49;:::i;:::-;502:26111;;;;;;;;14039:17;502:26111;;;14998:47;:49;502:26111;;14998:49;:::i;502:26111::-;;;;-1:-1:-1;502:26111:8;;;;;14334:18;;;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14334:18;;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14334:18;;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;502:26111:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14029:82;502:26111;;;;14091:20;14029:82;;:58;14070:17;502:26111;14070:17;;;502:26111;;;;;14060:27;14029:58;;502:26111;;;;;;;;;;;;;;;;;;;;;;;13901:88;502:26111;13946:43;;;13901:88;;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1274:7;502:26111;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;3843:54;502:26111;;;;;;;3843:54;;;;;502:26111;3843:54;;;;:::i;:::-;502:26111;;;;;;;;;;;;;;;;;;;;;;4747:26:0;502:26111:8;;;;:::i;:::-;;;;;;;;2475:4:0;502:26111:8;;;;3901:22:0;502:26111:8;2475:4:0;:::i;:::-;4747:26;:::i;:::-;502:26111:8;;;;;;;;;;;;;;2475:4:0;;:::i;:::-;25675:37:8;25693:2;25683:12;;;25675:37;:::i;:::-;25733:20;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2475:4:0;;:::i;:::-;1315:72:4;;:::i;:::-;2408:4;502:26111:8;2398:14:4;502:26111:8;;;2398:14:4;502:26111:8;2427:20:4;502:26111:8;;;735:10:3;502:26111:8;;2427:20:4;502:26111:8;;;;;;;;;;;;;;;;3740:49;502:26111;;;;;;;;3740:49;502:26111;3740:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;502:26111;;3740:49;;502:26111;3740:49;;;502:26111;3740:49;;;502:26111;3740:49;;;;502:26111;3740:49;502:26111;3740:49;;502:26111;3740:49;502:26111;3740:49;;;;502:26111;3740:49;;502:26111;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;2475:4:0;;:::i;:::-;1315:72:4;;:::i;:::-;502:26111:8;;7096:22;502:26111;;;;;7166:36;502:26111;;1093:4;502:26111;;7241:36;502:26111;;7329:15;502:26111;;7317:27;502:26111;;;1274:7;502:26111;;7396:35;502:26111;;1211:6;502:26111;;7473:35;502:26111;;7551:19;502:26111;;7551:19;:::i;:::-;502:26111;;;;;;;7674:11;502:26111;;;;;;;;;;;;;;;;;;7759:15;;502:26111;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7759:15;;502:26111;;;;;;;;;;;7792:22;;;502:26111;;:::i;:::-;;;;;;;;;;;;;;;;;8301:176;;502:26111;;;;;;;;;;;;;;;;;;;;;;7792:22;;;502:26111;;7839:25;;;502:26111;;;;;;;;;;;;7674:11;502:26111;;7947:19;;502:26111;7947:19;;502:26111;;;7988:20;;502:26111;;;8023:21;;;502:26111;;8068:25;;;502:26111;;;8108:20;;;502:26111;8172:20;502:26111;;;;8172:20;:::i;:::-;8151:18;;;502:26111;8203:20;8226:10;502:26111;;;;;;;8257:18;8068:25;502:26111;8257:18;:::i;:::-;8068:25;502:26111;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;8226:10;;8301:176;;;;502:26111;;;;;-1:-1:-1;502:26111:8;;;;;7792:22;;;;502:26111;;;;;;;;;;;;;;;;;;;;;;;8301:176;502:26111;;;;;;;;;;;;;;7792:22;;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7792:22;;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;502:26111:8;;;;;;;;;;;;;7759:15;;502:26111;7759:15;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7759:15;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7759:15;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;502:26111:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3553:32;502:26111;;;;;;;;;;;;;;;;;;;;;1211:6;502:26111;;;;;;;;;;;;;;;;3485:25;502:26111;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;24001:11;502:26111;;;24001:37;502:26111;;;24001:37;502:26111;;;;;;;;;;;;24104:12;502:26111;24104:12;;502:26111;24131:11;;;;502:26111;24157:16;;;502:26111;;24188:10;;502:26111;24213:18;24246:19;502:26111;24213:18;;;502:26111;;24246:19;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2475:4:0;;:::i;:::-;1315:72:4;;:::i;:::-;502:26111:8;;;;10219:11;502:26111;;;;;10255:66;502:26111;;10263:28;;10255:66;:::i;:::-;10340:17;;;502:26111;;;;;;;;;;;;;;;;10435:25;;;502:26111;10435:51;502:26111;;;10547:20;;502:26111;10528:15;:39;502:26111;;;;;;;;;;;;;10219:11;502:26111;;;10340:17;502:26111;;;19133:25;502:26111;;;;;;;;19133:62;;;502:26111;;;;;10219:11;502:26111;;;;;19761:18;;;;502:26111;19851:13;502:26111;19866:15;;;;;;19129:276;;10435:25;19129:276;;;10435:25;502:26111;;;10528:15;;502:26111;;;;;;10815:75;502:26111;;;10815:75;;502:26111;19883:6;502:26111;;;;;;;;;;;19910:19;19906:1024;19910:19;;;20111:20;20019:21;19761:18;;;;20019:21;:::i;:::-;502:26111;;;;;;;10340:17;502:26111;;;;20063:25;502:26111;;;19761:18;;;20063:25;:::i;:::-;502:26111;;;10340:17;502:26111;;;;20111:20;;502:26111;;;;20111:20;:::i;:::-;19888:1;502:26111;;;;;;19851:13;502:26111;;;;;;;;;;;19906:1024;20831:50;20230:14;502:26111;;20230:14;:::i;:::-;502:26111;;;;;;19761:18;502:26111;;;;;;;;;;;20437:22;;502:26111;10219:11;20513:21;19761:18;;;;20513:21;:::i;:::-;502:26111;;;;;;;;10340:17;502:26111;;;19888:1;20493:17;;502:26111;;;;;;;;;10340:17;20553;;502:26111;;;;;;;20602:16;;502:26111;;;;;20680:21;502:26111;19761:18;502:26111;;;;;;;;;19761:18;20680:21;:::i;:::-;502:26111;;;10340:17;502:26111;;;;;;;;;20720:15;502:26111;;;;;;;;20779:33;:19;;;;:33;:::i;:::-;20845:21;19761:18;;;;20845:21;:::i;:::-;502:26111;;;10340:17;502:26111;;;;;20831:13;502:26111;;;;;20831:50;:::i;:::-;20900:14;502:26111;;20900:14;:::i;:::-;502:26111;;19906:1024;;19129:276;502:26111;19280:57;19276:129;;19129:276;10435:25;19129:276;;;19276:129;502:26111;;;;10219:11;502:26111;;;;;;21267:14;502:26111;;21267:14;:::i;:::-;502:26111;;;;;;;21369:7;502:26111;;;;;;;;;;;;21434:22;;;502:26111;21369:7;21502:18;;502:26111;;;;;;;;;;;;;;;;;21482:17;;;;502:26111;;;;;;;;;;;;;;;;21734:33;502:26111;10219:11;21734:19;502:26111;;;;;;;;;;;;;;10340:17;21534;;502:26111;;;;;;;;21586:16;;502:26111;;;;;;;21659:20;;502:26111;;21637:19;;502:26111;21690:15;502:26111;;;;;;21734:19;:33;:::i;:::-;502:26111;21783:13;502:26111;;;21778:133;502:26111;;;;10435:25;502:26111;;21921:14;502:26111;;21921:14;:::i;:::-;502:26111;;19276:129;;;;21829:3;502:26111;;21798:29;;;;;21863:21;;;21829:3;21863:21;;;:::i;:::-;502:26111;;;10340:17;502:26111;;;;;21849:13;502:26111;;21849:50;502:26111;;;;21849:50;:::i;:::-;21829:3;:::i;:::-;21783:13;;;21798:29;;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3626:31;502:26111;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;1796:7:4;502:26111:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;2475:4:0;;;;;:::i;:::-;1315:72:4;;:::i;:::-;502:26111:8;;;;16098:11;502:26111;;;;;16134:66;502:26111;;16142:28;;16134:66;:::i;:::-;16219:17;;;502:26111;;;;;;;;;;;;;;;16219:17;16211:88;16219:49;;16211:88;:::i;:::-;502:26111;;16318:18;502:26111;;;;16712:30;502:26111;;;;;;16510:20;;502:26111;16712:51;16598:4;502:26111;;16570:24;16583:11;502:26111;16570:24;;:::i;:::-;502:26111;;;;16643:25;16656:12;502:26111;16643:25;;:::i;:::-;502:26111;16712:30;;;;:::i;:::-;:51;:::i;:::-;16819:13;502:26111;16854:3;502:26111;;16834:18;;;;;502:26111;16915:10;16882:44;16915:10;;;;;:::i;:::-;502:26111;;;;16882:44;:::i;:::-;502:26111;;;17019:6;;;17078:2;502:26111;;;;;;;;;;;;;;17084:3;502:26111;;17015:427;;17474:15;17470:192;;17015:427;16854:3;;;;;:::i;:::-;16819:13;;17470:192;17510:50;502:26111;;;;17536:10;502:26111;;17517:8;502:26111;;;;17536:10;;:::i;:::-;502:26111;;;;;17510:50;;;;;;502:26111;17510:50;;502:26111;17510:50;;502:26111;;;;;;;;;;;;;;;;;17510:50;;;;;;;;;;;17470:192;17615:10;;;;;:::i;:::-;502:26111;;;;;;;;;16854:3;502:26111;;;;;;;;;;;;;17584:62;502:26111;;;17584:62;;17470:192;;;17510:50;;;502:26111;17510:50;502:26111;17510:50;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;502:26111;;;;;;;;;17015:427;502:26111;17134:6;;502:26111;;17193:2;502:26111;;;;;;;;;;;;;;17199:3;502:26111;;17130:312;17015:427;;17130:312;17254:1;17249:6;;17254:1;;17308:2;502:26111;;;;;;;;;;;;;;17314:3;502:26111;;17245:197;17015:427;;17245:197;502:26111;17245:197;17015:427;;502:26111;;;;;;;;;;;;;;;;;;;;;;;16834:18;;;;;;17723:21;17719:113;;16814:859;17846:22;;17842:122;;16814:859;502:26111;;;;;;;;;;;;;;;;18050:15;502:26111;;;;17989:77;502:26111;;;17989:77;;502:26111;17842:122;17892:8;502:26111;16098:11;17911:20;;;;502:26111;;;;17885:67;;502:26111;;;;;17885:67;;502:26111;;;;;;;;;;;;;;;;-1:-1:-1;;502:26111:8;;;17885:67;;;;;;;;17842:122;;;;17885:67;;;502:26111;17885:67;502:26111;17885:67;;;;;;;:::i;:::-;;;;;17719:113;17768:8;502:26111;;;;17761:59;;17795:4;502:26111;17761:59;;502:26111;;;;;;;;;;;;;;;;;;;;;;17761:59;;;;;;;;;17719:113;17761:59;;;502:26111;17761:59;502:26111;17761:59;;;;;;;:::i;:::-;;;17719:113;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2475:4:0;;:::i;:::-;25974:38:8;25992:3;25982:13;;;25974:38;:::i;:::-;26034:21;502:26111;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;13240:13;2475:4:0;;;:::i;:::-;1315:72:4;;:::i;:::-;502:26111:8;;;;;13240:13;:::i;502:26111::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;3904:50;502:26111;;;;;;;3904:50;;;;;502:26111;3904:50;;;;:::i;502:26111::-;;;;;;;;;;;2475:4:0;;:::i;:::-;26564:8:8;502:26111;;;;26557:45;;26583:10;502:26111;26557:45;;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;26557:45;;;;;;;;;;502:26111;26557:45;;;502:26111;26557:45;;;;;;;;;:::i;502:26111::-;;;;;;;;;;;;;;;3796:40;502:26111;;;;;;;3796:40;502:26111;;3796:40;;502:26111;;;3796:40;;;;;502:26111;;3796:40;;;;;502:26111;;3796:40;502:26111;3796:40;;502:26111;3796:40;;;502:26111;3796:40;;;502:26111;3796:40;;;;502:26111;3796:40;;;;502:26111;3796:40;502:26111;3796:40;;;;;;:::i;:::-;;;502:26111;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;2475:4:0;;:::i;:::-;1796:7:4;502:26111:8;;;;2140:9:4;2136:62;;502:26111:8;;1796:7:4;502:26111:8;2674:22:4;502:26111:8;;;735:10:3;502:26111:8;;2674:22:4;502:26111:8;2136:62:4;502:26111:8;;;2172:15:4;;;;502:26111:8;;;;;;;;;;;;;;;24811:7;502:26111;;;;;;;;;24892:22;;502:26111;;;24929:17;;;;;502:26111;;24961:17;;;;;502:26111;;24993:16;502:26111;24993:16;;502:26111;25055:19;;;502:26111;25089:17;;;502:26111;25121:22;;;;502:26111;25158:22;;;;502:26111;25228:15;502:26111;25195:18;502:26111;25228:15;;;502:26111;;25195:18;;502:26111;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;3698:29;502:26111;;;;;;;;;;;;;;;;;;;;3455:23;502:26111;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;735:10:3;502:26111:8;;;5421:34:0;5417:102;;5529:37;502:26111:8;;;5529:37:0;:::i;5417:102::-;502:26111:8;;;5478:30:0;;;;502:26111:8;;;;;;;;;;;;;;1315:72:4;;;:::i;:::-;502:26111:8;;1899:1:5;502:26111:8;;2702:18:5;2698:86;;1899:1;502:26111:8;;;;;8728:11;502:26111;;;;;8764:66;502:26111;;8772:28;;8764:66;:::i;:::-;502:26111;8849:17;;;502:26111;;;;;;;;;;;;8939:25;;;502:26111;;;;8967:21;;502:26111;-1:-1:-1;502:26111:8;;;9027:18;;;502:26111;;;9027:30;:79;;;;502:26111;;;;1899:1:5;502:26111:8;;9238:19;;;502:26111;;;;;9181:77;;9211:10;9181:77;;;502:26111;;;;9231:4;502:26111;;;;;;;;9238:19;502:26111;;9238:19;;502:26111;9238:19;;502:26111;;;;;;-1:-1:-1;;502:26111:8;;;;9181:77;;;;;;;;502:26111;;9323:37;502:26111;;9269:20;;;:43;502:26111;;;9269:43;:::i;:::-;502:26111;;9323:37;502:26111;9323:37;:::i;:::-;;502:26111;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;8849:17;502:26111;9211:10;;502:26111;;;;;;;;;9464:27;502:26111;;9464:27;:::i;:::-;502:26111;;9211:10;502:26111;;9502:17;502:26111;;9502:48;502:26111;;;;9502:48;:::i;:::-;502:26111;;;;;;;;;;;;;;;;;;;;;;;9644:208;;;502:26111;;;;9644:208;;502:26111;;;9644:208;;;502:26111;;;9644:208;;;502:26111;;;;9644:208;;;502:26111;;;;9607:22;9644:208;;;502:26111;;;;9211:10;502:26111;;9607:22;502:26111;;;;;;;;;;;;;;;1899:1:5;502:26111:8;;;;8849:17;502:26111;;;;;;;;9269:20;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;9942:15;502:26111;;;;9878:80;502:26111;9211:10;9878:80;;502:26111;;;9181:77;;;;;;;;;;;;;:::i;:::-;;;;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;9027:79;9095:10;9062:44;9095:10;9062:44;;:::i;:::-;9061:45;9027:79;;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2698:86:5;502:26111:8;;;2743:30:5;;;;502:26111:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4330:25:0;502:26111:8;;;;:::i;:::-;;;;;;;;2475:4:0;502:26111:8;;;;3901:22:0;502:26111:8;2475:4:0;:::i;:::-;4330:25;:::i;502:26111:8:-;;;;;;;;;;;;4012:32;502:26111;;;;;;;;;;;;;;;;;;;3664:27;502:26111;;;;;;;;;;;;;;;;;;;;;1093:4;502:26111;;;;;;;;;;;;;;;;;;;23489:11;502:26111;;23489:33;502:26111;;;23489:33;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;502:26111:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3967:30;502:26111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3901:22:0;502:26111:8;;;;;;;;;;;;;;;;;;;;;925:31;502:26111;;;;;;;;;;;;;;;;;1004:27;502:26111;;;;;;;;;;;;;;;;;;22733:11;502:26111;;;;;;;22896:25;502:26111;22896:25;;;502:26111;;22968:19;;502:26111;23002:20;;;502:26111;23037:21;;;502:26111;23073:25;;;502:26111;23113:20;502:26111;23113:20;;502:26111;23148:18;;;;502:26111;23181:20;502:26111;22733:11;23181:20;;502:26111;;22829:15;502:26111;22859:22;502:26111;;22829:15;;502:26111;:::i;:::-;22859:22;;502:26111;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;2673:47:0;2688:32;502:26111:8;2673:47:0;;:87;;;;;502:26111:8;;;;;;;;;;2673:87:0;877:25:6;862:40;;;2673:87:0;;;502:26111:8;;;;;;;;;;;;;3592:27;502:26111;;;;;;;;;;;;;-1:-1:-1;502:26111:8;;;;;;;;;;;-1:-1:-1;502:26111:8;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;502:26111:8;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;-1:-1:-1;502:26111:8;;;;-1:-1:-1;502:26111:8;;-1:-1:-1;502:26111:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;502:26111:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;502:26111:8;;-1:-1:-1;502:26111:8;;;-1:-1:-1;502:26111:8;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;502:26111:8;;;;;;;;;;;;;;:::o;3199:103:0:-;735:10:3;2954:6:0;502:26111:8;;;;;;;;;;1004:27;;502:26111;;3519:23:0;3515:108;;3199:103;:::o;3515:108::-;502:26111:8;;;;3565:47:0;;;;735:10:3;3565:47:0;;;502:26111:8;;;;;3565:47:0;3199:103;735:10:3;2954:6:0;502:26111:8;;;;;;;;;;925:31;;502:26111;;3519:23:0;3515:108;;3199:103;:::o;:::-;735:10:3;502:26111:8;;;;;;;;;;;;;3519:23:0;3515:108;;3199:103;:::o;:::-;735:10:3;2954:6:0;502:26111:8;;;;;;;;;;835:38;;502:26111;;3519:23:0;3515:108;;3199:103;:::o;:::-;502:26111:8;2954:6:0;502:26111:8;2954:6:0;502:26111:8;;;2954:6:0;502:26111:8;735:10:3;2954:6:0;502:26111:8;;;;;2954:6:0;502:26111:8;;;3519:23:0;3515:108;;3199:103;:::o;6179:316::-;;2954:6;502:26111:8;;;;;;;;;;;;;;;;;;;;;;;;;6276:23:0;6272:217;502:26111:8;;;;;;;;;;;;;;;;;;;;6347:4:0;502:26111:8;;;;;;;6370:40:0;735:10:3;6370:40:0;;;6347:4;6424:11;:::o;6272:217::-;6466:12;;;:::o;6732:317::-;;2954:6;502:26111:8;;;;;;;;;;;;;;;;;;;;;;;;;6826:217:0;502:26111:8;;;;;;;;;;;;;;;;;;;;;;;;;;6924:40:0;735:10:3;6924:40:0;;;502:26111:8;6978:11:0;:::o;502:26111:8:-;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;1878:128:4:-;502:26111:8;1796:7:4;502:26111:8;;1939:61:4;;1878:128::o;1939:61::-;1974:15;502:26111:8;;1974:15:4;;;;502:26111:8;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;11360:1346;;;;-1:-1:-1;502:26111:8;;;;;;11555:11;502:26111;;;;;;;;11591:66;502:26111;;11599:28;;11591:66;:::i;:::-;502:26111;11676:17;;;502:26111;;;;;;;;;;11676:17;11668:88;11676:49;;11668:88;:::i;:::-;11775:41;;;;:::i;:::-;502:26111;;;11863:41;;;;:::i;:::-;502:26111;;;;;;;;;;;11951:18;;;502:26111;;;;;;;;12020:14;;;:::i;:::-;502:26111;;;;;;;;;;12122:7;502:26111;;;;;;;;;;;12187:22;;502:26111;12235:17;;;502:26111;;;;;;;;;;12273:17;11676;12273;;502:26111;;;;;;;12311:16;;;502:26111;;;;;;12362:19;;;;502:26111;11555:11;12408:15;502:26111;;;;;;12452:19;;:33;;;;:::i;:::-;502:26111;;12496:13;502:26111;;;;;;12496:36;;;;:::i;:::-;502:26111;;12496:13;502:26111;;;12543:36;;;;:::i;:::-;502:26111;;12590:14;;;:::i;:::-;502:26111;;;;;;;;;;;;;;;;;;;;;;12630:68;;502:26111;;12630:68;11360:1346::o;502:26111::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;18483:367::-;-1:-1:-1;502:26111:8;18619:11;502:26111;;;-1:-1:-1;502:26111:8;18660:13;18679:18;-1:-1:-1;18679:18:8;;502:26111;;18655:165;18675:29;;;;;;18830:12;;;;-1:-1:-1;18483:367:8;:::o;18706:3::-;18730:21;;;;:::i;:::-;502:26111;;;;;;;;;;;;18730:31;18726:83;;18706:3;;;:::i;:::-;18660:13;;18726:83;18782:11;;;;18789:4;18782:11;:::o;502:26111::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"3150600","executionCost":"infinite","totalCost":"infinite"},"external":{"DEFAULT_ADMIN_ROLE()":"988","EMERGENCY_ROLE()":"218","MATCH_REFEREE_ROLE()":"240","MAX_TOURNAMENT_DURATION()":"856","MAX_TOURNAMENT_PLAYERS()":"328","MIN_TOURNAMENT_DURATION()":"1076","MIN_TOURNAMENT_PLAYERS()":"790","TOURNAMENT_ORGANIZER_ROLE()":"1117","aiOracle()":"2525","completeMatch(uint256,address,uint256,uint256,string)":"infinite","createMatchPublic(uint256,address,address,uint256)":"infinite","createTournament(string,string,uint8,uint256,uint256,uint256,uint256)":"infinite","emergencyWithdraw(uint256)":"infinite","finishTournament(uint256,address[])":"infinite","gamingCore()":"2943","gdiToken()":"2597","getMatch(uint256)":"infinite","getPlayerStats(uint256,address)":"15888","getRoleAdmin(bytes32)":"2437","getTournament(uint256)":"infinite","getTournamentPlayers(uint256)":"infinite","grantRole(bytes32,address)":"33429","hasRole(bytes32,address)":"3277","isPlayerRegistered(uint256,address)":"infinite","matchCounter()":"2247","matches(uint256)":"infinite","organizerFee()":"2475","pause()":"30541","paused()":"2817","platformFee()":"2387","playerMatches(address,uint256)":"7205","playerTournaments(address,uint256)":"7645","registerForTournament(uint256)":"infinite","renounceRole(bytes32,address)":"29065","revokeRole(bytes32,address)":"34058","startTournament(uint256)":"infinite","supportsInterface(bytes4)":"280","totalMatches()":"2453","totalPrizePool()":"2607","totalTournaments()":"2849","tournamentCounter()":"2981","tournaments(uint256)":"infinite","unpause()":"28018","updateOrganizerFee(uint256)":"25014","updatePlatformFee(uint256)":"25366"},"internal":{"createMatch(uint256,address,address,uint256)":"infinite","generateBattleRoyaleMatch(uint256)":"infinite","generateInitialMatches(uint256)":"infinite","generateSingleEliminationMatches(uint256)":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","EMERGENCY_ROLE()":"20df4359","MATCH_REFEREE_ROLE()":"22106e34","MAX_TOURNAMENT_DURATION()":"697ea036","MAX_TOURNAMENT_PLAYERS()":"281139ef","MIN_TOURNAMENT_DURATION()":"e93e817c","MIN_TOURNAMENT_PLAYERS()":"6577b5c6","TOURNAMENT_ORGANIZER_ROLE()":"fbe7bc89","aiOracle()":"31b221cd","completeMatch(uint256,address,uint256,uint256,string)":"f0a4e5c6","createMatchPublic(uint256,address,address,uint256)":"54d82b21","createTournament(string,string,uint8,uint256,uint256,uint256,uint256)":"74642a31","emergencyWithdraw(uint256)":"5312ea8e","finishTournament(uint256,address[])":"56eafcc0","gamingCore()":"68ff1b90","gdiToken()":"38bd1bc1","getMatch(uint256)":"3d092b3d","getPlayerStats(uint256,address)":"66ccf959","getRoleAdmin(bytes32)":"248a9ca3","getTournament(uint256)":"1a5bd7fc","getTournamentPlayers(uint256)":"26f7519a","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isPlayerRegistered(uint256,address)":"5d316c49","matchCounter()":"01fd1951","matches(uint256)":"4768d4ef","organizerFee()":"2ae5a31d","pause()":"8456cb59","paused()":"5c975abb","platformFee()":"26232a2e","playerMatches(address,uint256)":"54113330","playerTournaments(address,uint256)":"e0661275","registerForTournament(uint256)":"334f7deb","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","startTournament(uint256)":"651ea943","supportsInterface(bytes4)":"01ffc9a7","totalMatches()":"2a5b1451","totalPrizePool()":"398ab9a7","totalTournaments()":"5f9f4b9c","tournamentCounter()":"73ed5c1c","tournaments(uint256)":"7503e1b7","unpause()":"3f4ba83a","updateOrganizerFee(uint256)":"56d47ecb","updatePlatformFee(uint256)":"aa0b5988"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gdiToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gamingCore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aiOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"player1Score\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"player2Score\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MatchCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduledTime\",\"type\":\"uint256\"}],\"name\":\"MatchCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PlayerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"}],\"name\":\"PrizeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum GamingTournament.TournamentType\",\"name\":\"tournamentType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPlayers\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"}],\"name\":\"TournamentCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TournamentFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPlayers\",\"type\":\"uint256\"}],\"name\":\"TournamentStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMERGENCY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MATCH_REFEREE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOURNAMENT_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOURNAMENT_PLAYERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOURNAMENT_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOURNAMENT_PLAYERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOURNAMENT_ORGANIZER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aiOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"player1Score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"player2Score\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"gameData\",\"type\":\"string\"}],\"name\":\"completeMatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scheduledTime\",\"type\":\"uint256\"}],\"name\":\"createMatchPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum GamingTournament.TournamentType\",\"name\":\"tournamentType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"name\":\"finishTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamingCore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gdiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"}],\"name\":\"getMatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"enum GamingTournament.MatchStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"player1Score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"player2Score\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"gameData\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isBye\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"losses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"draws\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEliminated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastMatchTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"}],\"name\":\"getTournament\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum GamingTournament.TournamentType\",\"name\":\"tournamentType\",\"type\":\"uint8\"},{\"internalType\":\"enum GamingTournament.TournamentStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"}],\"name\":\"getTournamentPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"isPlayerRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"enum GamingTournament.MatchStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"player1Score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"player2Score\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"gameData\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isBye\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"organizerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerMatches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerTournaments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"}],\"name\":\"registerForTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"}],\"name\":\"startTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMatches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTournaments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournamentCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tournaments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum GamingTournament.TournamentType\",\"name\":\"tournamentType\",\"type\":\"uint8\"},{\"internalType\":\"enum GamingTournament.TournamentStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateOrganizerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Advanced tournament system for GameDin L3 gaming platform Handles tournament creation, player registration, matchmaking, and prize distribution\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"completeMatch(uint256,address,uint256,uint256,string)\":{\"details\":\"Complete a match with results\",\"params\":{\"gameData\":\"Additional game data\",\"matchId\":\"Match ID\",\"player1Score\":\"Player 1 score\",\"player2Score\":\"Player 2 score\",\"winner\":\"Winner address\"}},\"createMatchPublic(uint256,address,address,uint256)\":{\"details\":\"Create a match between two players (public interface)\",\"params\":{\"player1\":\"First player address\",\"player2\":\"Second player address\",\"scheduledTime\":\"Scheduled match time\",\"tournamentId\":\"Tournament ID\"}},\"createTournament(string,string,uint8,uint256,uint256,uint256,uint256)\":{\"details\":\"Create a new tournament\",\"params\":{\"description\":\"Tournament description\",\"duration\":\"Tournament duration\",\"entryFee\":\"Entry fee in GDI tokens\",\"maxPlayers\":\"Maximum number of players\",\"name\":\"Tournament name\",\"startTime\":\"Tournament start time\",\"tournamentType\":\"Type of tournament\"}},\"emergencyWithdraw(uint256)\":{\"details\":\"Emergency withdraw tokens\",\"params\":{\"amount\":\"Amount to withdraw\"}},\"finishTournament(uint256,address[])\":{\"details\":\"Finish a tournament and distribute prizes\",\"params\":{\"tournamentId\":\"Tournament ID\",\"winners\":\"Array of winner addresses in order\"}},\"getMatch(uint256)\":{\"details\":\"Get match information\",\"params\":{\"matchId\":\"Match ID\"}},\"getPlayerStats(uint256,address)\":{\"details\":\"Get player stats for a tournament\",\"params\":{\"player\":\"Player address\",\"tournamentId\":\"Tournament ID\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTournament(uint256)\":{\"details\":\"Get tournament information\",\"params\":{\"tournamentId\":\"Tournament ID\"}},\"getTournamentPlayers(uint256)\":{\"details\":\"Get tournament players\",\"params\":{\"tournamentId\":\"Tournament ID\"},\"returns\":{\"_0\":\"players Array of player addresses\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isPlayerRegistered(uint256,address)\":{\"details\":\"Check if a player is registered for a tournament\",\"params\":{\"player\":\"Player address\",\"tournamentId\":\"Tournament ID\"},\"returns\":{\"_0\":\"True if registered\"}},\"pause()\":{\"details\":\"Pause tournament system\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"registerForTournament(uint256)\":{\"details\":\"Register for a tournament\",\"params\":{\"tournamentId\":\"Tournament ID\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"startTournament(uint256)\":{\"details\":\"Start a tournament\",\"params\":{\"tournamentId\":\"Tournament ID\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Unpause tournament system\"},\"updateOrganizerFee(uint256)\":{\"details\":\"Update organizer fee\",\"params\":{\"newFee\":\"New fee percentage (basis points)\"}},\"updatePlatformFee(uint256)\":{\"details\":\"Update platform fee\",\"params\":{\"newFee\":\"New fee percentage (basis points)\"}}},\"title\":\"GameDin Tournament Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GamingTournament.sol\":\"GamingTournament\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/GamingTournament.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title GameDin Tournament Contract\\r\\n * @dev Advanced tournament system for GameDin L3 gaming platform\\r\\n * Handles tournament creation, player registration, matchmaking, and prize distribution\\r\\n */\\r\\ncontract GamingTournament is AccessControl, ReentrancyGuard, Pausable {\\r\\n    // =============================================================================\\r\\n    // CONSTANTS & ROLES\\r\\n    // =============================================================================\\r\\n    \\r\\n    bytes32 public constant TOURNAMENT_ORGANIZER_ROLE = keccak256(\\\"TOURNAMENT_ORGANIZER_ROLE\\\");\\r\\n    bytes32 public constant MATCH_REFEREE_ROLE = keccak256(\\\"MATCH_REFEREE_ROLE\\\");\\r\\n    bytes32 public constant EMERGENCY_ROLE = keccak256(\\\"EMERGENCY_ROLE\\\");\\r\\n    \\r\\n    uint256 public constant MAX_TOURNAMENT_PLAYERS = 1024;\\r\\n    uint256 public constant MIN_TOURNAMENT_PLAYERS = 4;\\r\\n    uint256 public constant MAX_TOURNAMENT_DURATION = 7 days;\\r\\n    uint256 public constant MIN_TOURNAMENT_DURATION = 1 hours;\\r\\n    \\r\\n    // =============================================================================\\r\\n    // STRUCTS & ENUMS\\r\\n    // =============================================================================\\r\\n    \\r\\n    enum TournamentStatus {\\r\\n        CREATED,\\r\\n        REGISTRATION_OPEN,\\r\\n        REGISTRATION_CLOSED,\\r\\n        IN_PROGRESS,\\r\\n        FINISHED,\\r\\n        CANCELLED\\r\\n    }\\r\\n    \\r\\n    enum TournamentType {\\r\\n        SINGLE_ELIMINATION,\\r\\n        DOUBLE_ELIMINATION,\\r\\n        ROUND_ROBIN,\\r\\n        SWISS_SYSTEM,\\r\\n        BATTLE_ROYALE\\r\\n    }\\r\\n    \\r\\n    enum MatchStatus {\\r\\n        SCHEDULED,\\r\\n        IN_PROGRESS,\\r\\n        COMPLETED,\\r\\n        CANCELLED\\r\\n    }\\r\\n    \\r\\n    struct Tournament {\\r\\n        uint256 tournamentId;\\r\\n        string name;\\r\\n        string description;\\r\\n        TournamentType tournamentType;\\r\\n        TournamentStatus status;\\r\\n        uint256 entryFee;\\r\\n        uint256 prizePool;\\r\\n        uint256 maxPlayers;\\r\\n        uint256 currentPlayers;\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n        address organizer;\\r\\n        address[] players;\\r\\n        uint256[] matchIds;\\r\\n        mapping(address => PlayerStats) playerStats;\\r\\n        mapping(uint256 => Match) matches;\\r\\n    }\\r\\n    \\r\\n    struct PlayerStats {\\r\\n        uint256 wins;\\r\\n        uint256 losses;\\r\\n        uint256 draws;\\r\\n        uint256 totalScore;\\r\\n        uint256 rank;\\r\\n        bool isEliminated;\\r\\n        uint256 lastMatchTime;\\r\\n    }\\r\\n    \\r\\n    struct Match {\\r\\n        uint256 matchId;\\r\\n        uint256 tournamentId;\\r\\n        address player1;\\r\\n        address player2;\\r\\n        address winner;\\r\\n        MatchStatus status;\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n        uint256 player1Score;\\r\\n        uint256 player2Score;\\r\\n        string gameData;\\r\\n        bool isBye;\\r\\n    }\\r\\n    \\r\\n    struct PrizeDistribution {\\r\\n        uint256 firstPlace;\\r\\n        uint256 secondPlace;\\r\\n        uint256 thirdPlace;\\r\\n        uint256[] otherPrizes;\\r\\n    }\\r\\n    \\r\\n    // =============================================================================\\r\\n    // STATE VARIABLES\\r\\n    // =============================================================================\\r\\n    \\r\\n    address public gdiToken;\\r\\n    address public gamingCore;\\r\\n    address public aiOracle;\\r\\n    \\r\\n    uint256 public tournamentCounter;\\r\\n    uint256 public matchCounter;\\r\\n    uint256 public totalTournaments;\\r\\n    uint256 public totalMatches;\\r\\n    uint256 public totalPrizePool;\\r\\n    \\r\\n    mapping(uint256 => Tournament) public tournaments;\\r\\n    mapping(uint256 => Match) public matches;\\r\\n    mapping(address => uint256[]) public playerTournaments;\\r\\n    mapping(address => uint256[]) public playerMatches;\\r\\n    \\r\\n    uint256 public platformFee = 5; // 0.5%\\r\\n    uint256 public organizerFee = 10; // 1%\\r\\n    \\r\\n    // =============================================================================\\r\\n    // EVENTS\\r\\n    // =============================================================================\\r\\n    \\r\\n    event TournamentCreated(\\r\\n        uint256 indexed tournamentId,\\r\\n        string name,\\r\\n        TournamentType tournamentType,\\r\\n        uint256 entryFee,\\r\\n        uint256 maxPlayers,\\r\\n        address indexed organizer\\r\\n    );\\r\\n    \\r\\n    event PlayerRegistered(\\r\\n        uint256 indexed tournamentId,\\r\\n        address indexed player,\\r\\n        uint256 entryFee,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    \\r\\n    event TournamentStarted(\\r\\n        uint256 indexed tournamentId,\\r\\n        uint256 startTime,\\r\\n        uint256 totalPlayers\\r\\n    );\\r\\n    \\r\\n    event MatchCreated(\\r\\n        uint256 indexed matchId,\\r\\n        uint256 indexed tournamentId,\\r\\n        address player1,\\r\\n        address player2,\\r\\n        uint256 scheduledTime\\r\\n    );\\r\\n    \\r\\n    event MatchCompleted(\\r\\n        uint256 indexed matchId,\\r\\n        address indexed winner,\\r\\n        uint256 player1Score,\\r\\n        uint256 player2Score,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    \\r\\n    event TournamentFinished(\\r\\n        uint256 indexed tournamentId,\\r\\n        address indexed winner,\\r\\n        uint256 prizeAmount,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    \\r\\n    event PrizeDistributed(\\r\\n        uint256 indexed tournamentId,\\r\\n        address indexed player,\\r\\n        uint256 rank,\\r\\n        uint256 prizeAmount\\r\\n    );\\r\\n    \\r\\n    // =============================================================================\\r\\n    // CONSTRUCTOR\\r\\n    // =============================================================================\\r\\n    \\r\\n    constructor(\\r\\n        address _gdiToken,\\r\\n        address _gamingCore,\\r\\n        address _aiOracle\\r\\n    ) {\\r\\n        gdiToken = _gdiToken;\\r\\n        gamingCore = _gamingCore;\\r\\n        aiOracle = _aiOracle;\\r\\n        \\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _grantRole(TOURNAMENT_ORGANIZER_ROLE, msg.sender);\\r\\n        _grantRole(MATCH_REFEREE_ROLE, msg.sender);\\r\\n        _grantRole(EMERGENCY_ROLE, msg.sender);\\r\\n    }\\r\\n    \\r\\n    // =============================================================================\\r\\n    // TOURNAMENT MANAGEMENT\\r\\n    // =============================================================================\\r\\n    \\r\\n    /**\\r\\n     * @dev Create a new tournament\\r\\n     * @param name Tournament name\\r\\n     * @param description Tournament description\\r\\n     * @param tournamentType Type of tournament\\r\\n     * @param entryFee Entry fee in GDI tokens\\r\\n     * @param maxPlayers Maximum number of players\\r\\n     * @param startTime Tournament start time\\r\\n     * @param duration Tournament duration\\r\\n     */\\r\\n    function createTournament(\\r\\n        string memory name,\\r\\n        string memory description,\\r\\n        TournamentType tournamentType,\\r\\n        uint256 entryFee,\\r\\n        uint256 maxPlayers,\\r\\n        uint256 startTime,\\r\\n        uint256 duration\\r\\n    ) external onlyRole(TOURNAMENT_ORGANIZER_ROLE) whenNotPaused {\\r\\n        require(bytes(name).length > 0, \\\"Tournament name required\\\");\\r\\n        require(maxPlayers >= MIN_TOURNAMENT_PLAYERS, \\\"Too few players\\\");\\r\\n        require(maxPlayers <= MAX_TOURNAMENT_PLAYERS, \\\"Too many players\\\");\\r\\n        require(startTime > block.timestamp, \\\"Start time must be in future\\\");\\r\\n        require(duration >= MIN_TOURNAMENT_DURATION, \\\"Duration too short\\\");\\r\\n        require(duration <= MAX_TOURNAMENT_DURATION, \\\"Duration too long\\\");\\r\\n        \\r\\n        tournamentCounter++;\\r\\n        uint256 tournamentId = tournamentCounter;\\r\\n        \\r\\n        Tournament storage tournament = tournaments[tournamentId];\\r\\n        tournament.tournamentId = tournamentId;\\r\\n        tournament.name = name;\\r\\n        tournament.description = description;\\r\\n        tournament.tournamentType = tournamentType;\\r\\n        tournament.status = TournamentStatus.CREATED;\\r\\n        tournament.entryFee = entryFee;\\r\\n        tournament.prizePool = 0;\\r\\n        tournament.maxPlayers = maxPlayers;\\r\\n        tournament.currentPlayers = 0;\\r\\n        tournament.startTime = startTime;\\r\\n        tournament.endTime = startTime + duration;\\r\\n        tournament.organizer = msg.sender;\\r\\n        \\r\\n        totalTournaments++;\\r\\n        \\r\\n        emit TournamentCreated(\\r\\n            tournamentId,\\r\\n            name,\\r\\n            tournamentType,\\r\\n            entryFee,\\r\\n            maxPlayers,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Register for a tournament\\r\\n     * @param tournamentId Tournament ID\\r\\n     */\\r\\n    function registerForTournament(uint256 tournamentId) external whenNotPaused nonReentrant {\\r\\n        Tournament storage tournament = tournaments[tournamentId];\\r\\n        require(tournament.tournamentId != 0, \\\"Tournament does not exist\\\");\\r\\n        require(tournament.status == TournamentStatus.CREATED, \\\"Registration not open\\\");\\r\\n        require(tournament.currentPlayers < tournament.maxPlayers, \\\"Tournament full\\\");\\r\\n        require(tournament.players.length == 0 || !isPlayerRegistered(tournamentId, msg.sender), \\\"Already registered\\\");\\r\\n        \\r\\n        // Transfer entry fee\\r\\n        IERC20(gdiToken).transferFrom(msg.sender, address(this), tournament.entryFee);\\r\\n        tournament.prizePool += tournament.entryFee;\\r\\n        totalPrizePool += tournament.entryFee;\\r\\n        \\r\\n        // Add player to tournament\\r\\n        tournament.players.push(msg.sender);\\r\\n        tournament.currentPlayers++;\\r\\n        playerTournaments[msg.sender].push(tournamentId);\\r\\n        \\r\\n        // Initialize player stats\\r\\n        tournament.playerStats[msg.sender] = PlayerStats({\\r\\n            wins: 0,\\r\\n            losses: 0,\\r\\n            draws: 0,\\r\\n            totalScore: 0,\\r\\n            rank: 0,\\r\\n            isEliminated: false,\\r\\n            lastMatchTime: 0\\r\\n        });\\r\\n        \\r\\n        emit PlayerRegistered(tournamentId, msg.sender, tournament.entryFee, block.timestamp);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Start a tournament\\r\\n     * @param tournamentId Tournament ID\\r\\n     */\\r\\n    function startTournament(uint256 tournamentId) external onlyRole(TOURNAMENT_ORGANIZER_ROLE) whenNotPaused {\\r\\n        Tournament storage tournament = tournaments[tournamentId];\\r\\n        require(tournament.tournamentId != 0, \\\"Tournament does not exist\\\");\\r\\n        require(tournament.status == TournamentStatus.CREATED, \\\"Tournament already started\\\");\\r\\n        require(tournament.currentPlayers >= MIN_TOURNAMENT_PLAYERS, \\\"Not enough players\\\");\\r\\n        require(block.timestamp >= tournament.startTime, \\\"Tournament not ready to start\\\");\\r\\n        \\r\\n        tournament.status = TournamentStatus.IN_PROGRESS;\\r\\n        \\r\\n        // Generate initial matches based on tournament type\\r\\n        generateInitialMatches(tournamentId);\\r\\n        \\r\\n        emit TournamentStarted(tournamentId, block.timestamp, tournament.currentPlayers);\\r\\n    }\\r\\n    \\r\\n    // =============================================================================\\r\\n    // MATCH MANAGEMENT\\r\\n    // =============================================================================\\r\\n    \\r\\n    /**\\r\\n     * @dev Create a match between two players\\r\\n     * @param tournamentId Tournament ID\\r\\n     * @param player1 First player address\\r\\n     * @param player2 Second player address\\r\\n     * @param scheduledTime Scheduled match time\\r\\n     */\\r\\n    function createMatch(\\r\\n        uint256 tournamentId,\\r\\n        address player1,\\r\\n        address player2,\\r\\n        uint256 scheduledTime\\r\\n    ) internal {\\r\\n        Tournament storage tournament = tournaments[tournamentId];\\r\\n        require(tournament.tournamentId != 0, \\\"Tournament does not exist\\\");\\r\\n        require(tournament.status == TournamentStatus.IN_PROGRESS, \\\"Tournament not in progress\\\");\\r\\n        require(isPlayerRegistered(tournamentId, player1), \\\"Player 1 not registered\\\");\\r\\n        require(isPlayerRegistered(tournamentId, player2), \\\"Player 2 not registered\\\");\\r\\n        require(player1 != player2, \\\"Players must be different\\\");\\r\\n        \\r\\n        matchCounter++;\\r\\n        uint256 matchId = matchCounter;\\r\\n        \\r\\n        Match storage matchData = matches[matchId];\\r\\n        matchData.matchId = matchId;\\r\\n        matchData.tournamentId = tournamentId;\\r\\n        matchData.player1 = player1;\\r\\n        matchData.player2 = player2;\\r\\n        matchData.status = MatchStatus.SCHEDULED;\\r\\n        matchData.startTime = scheduledTime;\\r\\n        matchData.isBye = false;\\r\\n        \\r\\n        tournament.matchIds.push(matchId);\\r\\n        playerMatches[player1].push(matchId);\\r\\n        playerMatches[player2].push(matchId);\\r\\n        totalMatches++;\\r\\n        \\r\\n        emit MatchCreated(matchId, tournamentId, player1, player2, scheduledTime);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Create a match between two players (public interface)\\r\\n     * @param tournamentId Tournament ID\\r\\n     * @param player1 First player address\\r\\n     * @param player2 Second player address\\r\\n     * @param scheduledTime Scheduled match time\\r\\n     */\\r\\n    function createMatchPublic(\\r\\n        uint256 tournamentId,\\r\\n        address player1,\\r\\n        address player2,\\r\\n        uint256 scheduledTime\\r\\n    ) external onlyRole(MATCH_REFEREE_ROLE) whenNotPaused {\\r\\n        createMatch(tournamentId, player1, player2, scheduledTime);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Complete a match with results\\r\\n     * @param matchId Match ID\\r\\n     * @param winner Winner address\\r\\n     * @param player1Score Player 1 score\\r\\n     * @param player2Score Player 2 score\\r\\n     * @param gameData Additional game data\\r\\n     */\\r\\n    function completeMatch(\\r\\n        uint256 matchId,\\r\\n        address winner,\\r\\n        uint256 player1Score,\\r\\n        uint256 player2Score,\\r\\n        string memory gameData\\r\\n    ) external onlyRole(MATCH_REFEREE_ROLE) whenNotPaused {\\r\\n        Match storage matchData = matches[matchId];\\r\\n        require(matchData.matchId != 0, \\\"Match does not exist\\\");\\r\\n        require(matchData.status == MatchStatus.SCHEDULED || matchData.status == MatchStatus.IN_PROGRESS, \\\"Match not active\\\");\\r\\n        require(winner == matchData.player1 || winner == matchData.player2 || winner == address(0), \\\"Invalid winner\\\");\\r\\n        \\r\\n        matchData.status = MatchStatus.COMPLETED;\\r\\n        matchData.winner = winner;\\r\\n        matchData.player1Score = player1Score;\\r\\n        matchData.player2Score = player2Score;\\r\\n        matchData.gameData = gameData;\\r\\n        matchData.endTime = block.timestamp;\\r\\n        \\r\\n        // Update player stats\\r\\n        Tournament storage tournament = tournaments[matchData.tournamentId];\\r\\n        if (winner == matchData.player1) {\\r\\n            tournament.playerStats[matchData.player1].wins++;\\r\\n            tournament.playerStats[matchData.player2].losses++;\\r\\n        } else if (winner == matchData.player2) {\\r\\n            tournament.playerStats[matchData.player2].wins++;\\r\\n            tournament.playerStats[matchData.player1].losses++;\\r\\n        } else {\\r\\n            // Draw\\r\\n            tournament.playerStats[matchData.player1].draws++;\\r\\n            tournament.playerStats[matchData.player2].draws++;\\r\\n        }\\r\\n        \\r\\n        tournament.playerStats[matchData.player1].totalScore += player1Score;\\r\\n        tournament.playerStats[matchData.player2].totalScore += player2Score;\\r\\n        tournament.playerStats[matchData.player1].lastMatchTime = block.timestamp;\\r\\n        tournament.playerStats[matchData.player2].lastMatchTime = block.timestamp;\\r\\n        \\r\\n        emit MatchCompleted(matchId, winner, player1Score, player2Score, block.timestamp);\\r\\n    }\\r\\n    \\r\\n    // =============================================================================\\r\\n    // TOURNAMENT COMPLETION\\r\\n    // =============================================================================\\r\\n    \\r\\n    /**\\r\\n     * @dev Finish a tournament and distribute prizes\\r\\n     * @param tournamentId Tournament ID\\r\\n     * @param winners Array of winner addresses in order\\r\\n     */\\r\\n    function finishTournament(\\r\\n        uint256 tournamentId,\\r\\n        address[] memory winners\\r\\n    ) external onlyRole(TOURNAMENT_ORGANIZER_ROLE) whenNotPaused {\\r\\n        Tournament storage tournament = tournaments[tournamentId];\\r\\n        require(tournament.tournamentId != 0, \\\"Tournament does not exist\\\");\\r\\n        require(tournament.status == TournamentStatus.IN_PROGRESS, \\\"Tournament not in progress\\\");\\r\\n        require(winners.length > 0, \\\"No winners specified\\\");\\r\\n        \\r\\n        tournament.status = TournamentStatus.FINISHED;\\r\\n        \\r\\n        // Calculate prize distribution\\r\\n        uint256 totalPrize = tournament.prizePool;\\r\\n        uint256 platformFeeAmount = (totalPrize * platformFee) / 1000;\\r\\n        uint256 organizerFeeAmount = (totalPrize * organizerFee) / 1000;\\r\\n        uint256 remainingPrize = totalPrize - platformFeeAmount - organizerFeeAmount;\\r\\n        \\r\\n        // Distribute prizes\\r\\n        for (uint256 i = 0; i < winners.length; i++) {\\r\\n            require(isPlayerRegistered(tournamentId, winners[i]), \\\"Winner not registered\\\");\\r\\n            \\r\\n            uint256 prizeAmount;\\r\\n            if (i == 0) {\\r\\n                prizeAmount = (remainingPrize * 50) / 100; // 50% for 1st place\\r\\n            } else if (i == 1) {\\r\\n                prizeAmount = (remainingPrize * 30) / 100; // 30% for 2nd place\\r\\n            } else if (i == 2) {\\r\\n                prizeAmount = (remainingPrize * 20) / 100; // 20% for 3rd place\\r\\n            } else {\\r\\n                prizeAmount = 0; // No prize for other positions\\r\\n            }\\r\\n            \\r\\n            if (prizeAmount > 0) {\\r\\n                IERC20(gdiToken).transfer(winners[i], prizeAmount);\\r\\n                emit PrizeDistributed(tournamentId, winners[i], i + 1, prizeAmount);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // Transfer fees\\r\\n        if (platformFeeAmount > 0) {\\r\\n            IERC20(gdiToken).transfer(address(this), platformFeeAmount);\\r\\n        }\\r\\n        if (organizerFeeAmount > 0) {\\r\\n            IERC20(gdiToken).transfer(tournament.organizer, organizerFeeAmount);\\r\\n        }\\r\\n        \\r\\n        emit TournamentFinished(tournamentId, winners[0], remainingPrize, block.timestamp);\\r\\n    }\\r\\n    \\r\\n    // =============================================================================\\r\\n    // HELPER FUNCTIONS\\r\\n    // =============================================================================\\r\\n    \\r\\n    /**\\r\\n     * @dev Check if a player is registered for a tournament\\r\\n     * @param tournamentId Tournament ID\\r\\n     * @param player Player address\\r\\n     * @return True if registered\\r\\n     */\\r\\n    function isPlayerRegistered(uint256 tournamentId, address player) public view returns (bool) {\\r\\n        Tournament storage tournament = tournaments[tournamentId];\\r\\n        for (uint256 i = 0; i < tournament.players.length; i++) {\\r\\n            if (tournament.players[i] == player) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Generate initial matches for a tournament\\r\\n     * @param tournamentId Tournament ID\\r\\n     */\\r\\n    function generateInitialMatches(uint256 tournamentId) internal {\\r\\n        Tournament storage tournament = tournaments[tournamentId];\\r\\n        \\r\\n        if (tournament.tournamentType == TournamentType.SINGLE_ELIMINATION) {\\r\\n            generateSingleEliminationMatches(tournamentId);\\r\\n        } else if (tournament.tournamentType == TournamentType.BATTLE_ROYALE) {\\r\\n            generateBattleRoyaleMatch(tournamentId);\\r\\n        }\\r\\n        // Add other tournament type implementations\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Generate single elimination matches\\r\\n     * @param tournamentId Tournament ID\\r\\n     */\\r\\n    function generateSingleEliminationMatches(uint256 tournamentId) internal {\\r\\n        Tournament storage tournament = tournaments[tournamentId];\\r\\n        uint256 playerCount = tournament.players.length;\\r\\n        \\r\\n        // Create first round matches\\r\\n        for (uint256 i = 0; i < playerCount; i += 2) {\\r\\n            if (i + 1 < playerCount) {\\r\\n                createMatch(\\r\\n                    tournamentId,\\r\\n                    tournament.players[i],\\r\\n                    tournament.players[i + 1],\\r\\n                    tournament.startTime\\r\\n                );\\r\\n            } else {\\r\\n                // Bye for odd player\\r\\n                matchCounter++;\\r\\n                uint256 matchId = matchCounter;\\r\\n                \\r\\n                Match storage matchData = matches[matchId];\\r\\n                matchData.matchId = matchId;\\r\\n                matchData.tournamentId = tournamentId;\\r\\n                matchData.player1 = tournament.players[i];\\r\\n                matchData.player2 = address(0);\\r\\n                matchData.status = MatchStatus.COMPLETED;\\r\\n                matchData.winner = tournament.players[i];\\r\\n                matchData.isBye = true;\\r\\n                \\r\\n                tournament.matchIds.push(matchId);\\r\\n                playerMatches[tournament.players[i]].push(matchId);\\r\\n                totalMatches++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Generate battle royale match\\r\\n     * @param tournamentId Tournament ID\\r\\n     */\\r\\n    function generateBattleRoyaleMatch(uint256 tournamentId) internal {\\r\\n        Tournament storage tournament = tournaments[tournamentId];\\r\\n        \\r\\n        // Create one big match with all players\\r\\n        matchCounter++;\\r\\n        uint256 matchId = matchCounter;\\r\\n        \\r\\n        Match storage matchData = matches[matchId];\\r\\n        matchData.matchId = matchId;\\r\\n        matchData.tournamentId = tournamentId;\\r\\n        matchData.player1 = tournament.players[0];\\r\\n        matchData.player2 = tournament.players[1];\\r\\n        matchData.status = MatchStatus.SCHEDULED;\\r\\n        matchData.startTime = tournament.startTime;\\r\\n        matchData.isBye = false;\\r\\n        \\r\\n        tournament.matchIds.push(matchId);\\r\\n        for (uint256 i = 0; i < tournament.players.length; i++) {\\r\\n            playerMatches[tournament.players[i]].push(matchId);\\r\\n        }\\r\\n        totalMatches++;\\r\\n    }\\r\\n    \\r\\n    // =============================================================================\\r\\n    // VIEW FUNCTIONS\\r\\n    // =============================================================================\\r\\n    \\r\\n    /**\\r\\n     * @dev Get tournament information\\r\\n     * @param tournamentId Tournament ID\\r\\n     */\\r\\n    function getTournament(uint256 tournamentId) external view returns (\\r\\n        uint256 id,\\r\\n        string memory name,\\r\\n        string memory description,\\r\\n        TournamentType tournamentType,\\r\\n        TournamentStatus status,\\r\\n        uint256 entryFee,\\r\\n        uint256 prizePool,\\r\\n        uint256 maxPlayers,\\r\\n        uint256 currentPlayers,\\r\\n        uint256 startTime,\\r\\n        uint256 endTime,\\r\\n        address organizer\\r\\n    ) {\\r\\n        Tournament storage tournament = tournaments[tournamentId];\\r\\n        return (\\r\\n            tournament.tournamentId,\\r\\n            tournament.name,\\r\\n            tournament.description,\\r\\n            tournament.tournamentType,\\r\\n            tournament.status,\\r\\n            tournament.entryFee,\\r\\n            tournament.prizePool,\\r\\n            tournament.maxPlayers,\\r\\n            tournament.currentPlayers,\\r\\n            tournament.startTime,\\r\\n            tournament.endTime,\\r\\n            tournament.organizer\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get tournament players\\r\\n     * @param tournamentId Tournament ID\\r\\n     * @return players Array of player addresses\\r\\n     */\\r\\n    function getTournamentPlayers(uint256 tournamentId) external view returns (address[] memory) {\\r\\n        return tournaments[tournamentId].players;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get player stats for a tournament\\r\\n     * @param tournamentId Tournament ID\\r\\n     * @param player Player address\\r\\n     */\\r\\n    function getPlayerStats(uint256 tournamentId, address player) external view returns (\\r\\n        uint256 wins,\\r\\n        uint256 losses,\\r\\n        uint256 draws,\\r\\n        uint256 totalScore,\\r\\n        uint256 rank,\\r\\n        bool isEliminated,\\r\\n        uint256 lastMatchTime\\r\\n    ) {\\r\\n        PlayerStats storage stats = tournaments[tournamentId].playerStats[player];\\r\\n        return (\\r\\n            stats.wins,\\r\\n            stats.losses,\\r\\n            stats.draws,\\r\\n            stats.totalScore,\\r\\n            stats.rank,\\r\\n            stats.isEliminated,\\r\\n            stats.lastMatchTime\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get match information\\r\\n     * @param matchId Match ID\\r\\n     */\\r\\n    function getMatch(uint256 matchId) external view returns (\\r\\n        uint256 id,\\r\\n        uint256 tournamentId,\\r\\n        address player1,\\r\\n        address player2,\\r\\n        address winner,\\r\\n        MatchStatus status,\\r\\n        uint256 startTime,\\r\\n        uint256 endTime,\\r\\n        uint256 player1Score,\\r\\n        uint256 player2Score,\\r\\n        string memory gameData,\\r\\n        bool isBye\\r\\n    ) {\\r\\n        Match storage matchData = matches[matchId];\\r\\n        return (\\r\\n            matchData.matchId,\\r\\n            matchData.tournamentId,\\r\\n            matchData.player1,\\r\\n            matchData.player2,\\r\\n            matchData.winner,\\r\\n            matchData.status,\\r\\n            matchData.startTime,\\r\\n            matchData.endTime,\\r\\n            matchData.player1Score,\\r\\n            matchData.player2Score,\\r\\n            matchData.gameData,\\r\\n            matchData.isBye\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    // =============================================================================\\r\\n    // ADMIN FUNCTIONS\\r\\n    // =============================================================================\\r\\n    \\r\\n    /**\\r\\n     * @dev Update platform fee\\r\\n     * @param newFee New fee percentage (basis points)\\r\\n     */\\r\\n    function updatePlatformFee(uint256 newFee) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(newFee <= 50, \\\"Fee too high\\\"); // Max 5%\\r\\n        platformFee = newFee;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update organizer fee\\r\\n     * @param newFee New fee percentage (basis points)\\r\\n     */\\r\\n    function updateOrganizerFee(uint256 newFee) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(newFee <= 100, \\\"Fee too high\\\"); // Max 10%\\r\\n        organizerFee = newFee;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Pause tournament system\\r\\n     */\\r\\n    function pause() external onlyRole(EMERGENCY_ROLE) {\\r\\n        _pause();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Unpause tournament system\\r\\n     */\\r\\n    function unpause() external onlyRole(EMERGENCY_ROLE) {\\r\\n        _unpause();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Emergency withdraw tokens\\r\\n     * @param amount Amount to withdraw\\r\\n     */\\r\\n    function emergencyWithdraw(uint256 amount) external onlyRole(EMERGENCY_ROLE) {\\r\\n        IERC20(gdiToken).transfer(msg.sender, amount);\\r\\n    }\\r\\n} \",\"keccak256\":\"0x30291dd8bd4fcab0ddaa8ed1aa2fe1663eaf4607a7bcb2d3f3cb95aa55e0e69d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":26,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)21_storage)"},{"astId":605,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":495,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"_paused","offset":0,"slot":"2","type":"t_bool"},{"astId":853,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"gdiToken","offset":1,"slot":"2","type":"t_address"},{"astId":855,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"gamingCore","offset":0,"slot":"3","type":"t_address"},{"astId":857,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"aiOracle","offset":0,"slot":"4","type":"t_address"},{"astId":859,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"tournamentCounter","offset":0,"slot":"5","type":"t_uint256"},{"astId":861,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"matchCounter","offset":0,"slot":"6","type":"t_uint256"},{"astId":863,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"totalTournaments","offset":0,"slot":"7","type":"t_uint256"},{"astId":865,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"totalMatches","offset":0,"slot":"8","type":"t_uint256"},{"astId":867,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"totalPrizePool","offset":0,"slot":"9","type":"t_uint256"},{"astId":872,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"tournaments","offset":0,"slot":"10","type":"t_mapping(t_uint256,t_struct(Tournament)800_storage)"},{"astId":877,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"matches","offset":0,"slot":"11","type":"t_mapping(t_uint256,t_struct(Match)841_storage)"},{"astId":882,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"playerTournaments","offset":0,"slot":"12","type":"t_mapping(t_address,t_array(t_uint256)dyn_storage)"},{"astId":887,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"playerMatches","offset":0,"slot":"13","type":"t_mapping(t_address,t_array(t_uint256)dyn_storage)"},{"astId":890,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"platformFee","offset":0,"slot":"14","type":"t_uint256"},{"astId":893,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"organizerFee","offset":0,"slot":"15","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_enum(MatchStatus)757":{"encoding":"inplace","label":"enum GamingTournament.MatchStatus","numberOfBytes":"1"},"t_enum(TournamentStatus)746":{"encoding":"inplace","label":"enum GamingTournament.TournamentStatus","numberOfBytes":"1"},"t_enum(TournamentType)752":{"encoding":"inplace","label":"enum GamingTournament.TournamentType","numberOfBytes":"1"},"t_mapping(t_address,t_array(t_uint256)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256[])","numberOfBytes":"32","value":"t_array(t_uint256)dyn_storage"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_struct(PlayerStats)815_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct GamingTournament.PlayerStats)","numberOfBytes":"32","value":"t_struct(PlayerStats)815_storage"},"t_mapping(t_bytes32,t_struct(RoleData)21_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)21_storage"},"t_mapping(t_uint256,t_struct(Match)841_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct GamingTournament.Match)","numberOfBytes":"32","value":"t_struct(Match)841_storage"},"t_mapping(t_uint256,t_struct(Tournament)800_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct GamingTournament.Tournament)","numberOfBytes":"32","value":"t_struct(Tournament)800_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Match)841_storage":{"encoding":"inplace","label":"struct GamingTournament.Match","members":[{"astId":817,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"matchId","offset":0,"slot":"0","type":"t_uint256"},{"astId":819,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"tournamentId","offset":0,"slot":"1","type":"t_uint256"},{"astId":821,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"player1","offset":0,"slot":"2","type":"t_address"},{"astId":823,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"player2","offset":0,"slot":"3","type":"t_address"},{"astId":825,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"winner","offset":0,"slot":"4","type":"t_address"},{"astId":828,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"status","offset":20,"slot":"4","type":"t_enum(MatchStatus)757"},{"astId":830,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"startTime","offset":0,"slot":"5","type":"t_uint256"},{"astId":832,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"endTime","offset":0,"slot":"6","type":"t_uint256"},{"astId":834,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"player1Score","offset":0,"slot":"7","type":"t_uint256"},{"astId":836,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"player2Score","offset":0,"slot":"8","type":"t_uint256"},{"astId":838,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"gameData","offset":0,"slot":"9","type":"t_string_storage"},{"astId":840,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"isBye","offset":0,"slot":"10","type":"t_bool"}],"numberOfBytes":"352"},"t_struct(PlayerStats)815_storage":{"encoding":"inplace","label":"struct GamingTournament.PlayerStats","members":[{"astId":802,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"wins","offset":0,"slot":"0","type":"t_uint256"},{"astId":804,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"losses","offset":0,"slot":"1","type":"t_uint256"},{"astId":806,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"draws","offset":0,"slot":"2","type":"t_uint256"},{"astId":808,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"totalScore","offset":0,"slot":"3","type":"t_uint256"},{"astId":810,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"rank","offset":0,"slot":"4","type":"t_uint256"},{"astId":812,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"isEliminated","offset":0,"slot":"5","type":"t_bool"},{"astId":814,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"lastMatchTime","offset":0,"slot":"6","type":"t_uint256"}],"numberOfBytes":"224"},"t_struct(RoleData)21_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":18,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"hasRole","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":20,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Tournament)800_storage":{"encoding":"inplace","label":"struct GamingTournament.Tournament","members":[{"astId":759,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"tournamentId","offset":0,"slot":"0","type":"t_uint256"},{"astId":761,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"name","offset":0,"slot":"1","type":"t_string_storage"},{"astId":763,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"description","offset":0,"slot":"2","type":"t_string_storage"},{"astId":766,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"tournamentType","offset":0,"slot":"3","type":"t_enum(TournamentType)752"},{"astId":769,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"status","offset":1,"slot":"3","type":"t_enum(TournamentStatus)746"},{"astId":771,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"entryFee","offset":0,"slot":"4","type":"t_uint256"},{"astId":773,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"prizePool","offset":0,"slot":"5","type":"t_uint256"},{"astId":775,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"maxPlayers","offset":0,"slot":"6","type":"t_uint256"},{"astId":777,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"currentPlayers","offset":0,"slot":"7","type":"t_uint256"},{"astId":779,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"startTime","offset":0,"slot":"8","type":"t_uint256"},{"astId":781,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"endTime","offset":0,"slot":"9","type":"t_uint256"},{"astId":783,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"organizer","offset":0,"slot":"10","type":"t_address"},{"astId":786,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"players","offset":0,"slot":"11","type":"t_array(t_address)dyn_storage"},{"astId":789,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"matchIds","offset":0,"slot":"12","type":"t_array(t_uint256)dyn_storage"},{"astId":794,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"playerStats","offset":0,"slot":"13","type":"t_mapping(t_address,t_struct(PlayerStats)815_storage)"},{"astId":799,"contract":"contracts/GamingTournament.sol:GamingTournament","label":"matches","offset":0,"slot":"14","type":"t_mapping(t_uint256,t_struct(Match)841_storage)"}],"numberOfBytes":"480"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}