{
  "0xf0920ad3d02a43257671a6b5ac677f586143db96f23af4f6c0c7247b3a993bab": {
    "name": "GameDinSettlement",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "GameDinSettlement",
      "sourceName": "contracts/GameDinSettlement.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "initialOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "initialSupply",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "AccessControlBadConfirmation",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "neededRole",
              "type": "bytes32"
            }
          ],
          "name": "AccessControlUnauthorizedAccount",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "needed",
              "type": "uint256"
            }
          ],
          "name": "ERC20InsufficientAllowance",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "needed",
              "type": "uint256"
            }
          ],
          "name": "ERC20InsufficientBalance",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "approver",
              "type": "address"
            }
          ],
          "name": "ERC20InvalidApprover",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "name": "ERC20InvalidReceiver",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "ERC20InvalidSender",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "name": "ERC20InvalidSpender",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "EnforcedPause",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "ExpectedPause",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "ReentrancyGuardReentrantCall",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "bridgeAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "minConfirmations",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "maxAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "name": "BridgeConfigUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldFee",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newFee",
              "type": "uint256"
            }
          ],
          "name": "DisputeFeeUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "settlementId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "resolver",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "resolution",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "name": "DisputeResolved",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Paused",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "previousAdminRole",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "newAdminRole",
              "type": "bytes32"
            }
          ],
          "name": "RoleAdminChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "RoleGranted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "RoleRevoked",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "settlementId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "confirmer",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "name": "SettlementConfirmed",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "settlementId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "l3TransactionHash",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "name": "SettlementCreated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "settlementId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "initiator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "enum GameDinSettlement.DisputeReason",
              "name": "reason",
              "type": "uint8"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "details",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "name": "SettlementDisputed",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldFee",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newFee",
              "type": "uint256"
            }
          ],
          "name": "SettlementFeeUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Unpaused",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "BRIDGE_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "DEFAULT_ADMIN_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "DISPUTE_RESOLVER_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "DISPUTE_WINDOW",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "EMERGENCY_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MAX_SETTLEMENT_AMOUNT",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "SETTLEMENT_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "SETTLEMENT_TIMEOUT",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "bridgeConfigs",
          "outputs": [
            {
              "internalType": "address",
              "name": "bridgeAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "minConfirmations",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bridgeAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "minConfirmations",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "name": "configureBridge",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "settlementId",
              "type": "uint256"
            }
          ],
          "name": "confirmSettlement",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "l3TransactionHash",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            }
          ],
          "name": "createSettlement",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "disputeFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "disputes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "settlementId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "initiator",
              "type": "address"
            },
            {
              "internalType": "enum GameDinSettlement.DisputeReason",
              "name": "reason",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "details",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "resolved",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "resolution",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "emergencyWithdrawETH",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "emergencyWithdrawTokens",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bridgeAddress",
              "type": "address"
            }
          ],
          "name": "getBridgeConfig",
          "outputs": [
            {
              "internalType": "address",
              "name": "bridge",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "minConfirmations",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "settlementId",
              "type": "uint256"
            }
          ],
          "name": "getDispute",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "initiator",
              "type": "address"
            },
            {
              "internalType": "enum GameDinSettlement.DisputeReason",
              "name": "reason",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "details",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "resolved",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "resolution",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "name": "getRoleAdmin",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "settlementId",
              "type": "uint256"
            }
          ],
          "name": "getSettlement",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum GameDinSettlement.SettlementStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "l3TransactionHash",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "disputeDeadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "disputeInitiator",
              "type": "address"
            },
            {
              "internalType": "enum GameDinSettlement.DisputeReason",
              "name": "disputeReason",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "disputeDetails",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "name": "getUserSettlements",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "grantRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "hasRole",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "settlementId",
              "type": "uint256"
            },
            {
              "internalType": "enum GameDinSettlement.DisputeReason",
              "name": "reason",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "details",
              "type": "string"
            }
          ],
          "name": "initiateDispute",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "pause",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "paused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bridgeAddress",
              "type": "address"
            }
          ],
          "name": "processBridgeTransaction",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "name": "processedL3Transactions",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "callerConfirmation",
              "type": "address"
            }
          ],
          "name": "renounceRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "settlementId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "resolution",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "approveSettlement",
              "type": "bool"
            }
          ],
          "name": "resolveDispute",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "revokeRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "settlementCounter",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "settlementFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "settlements",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "settlementId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum GameDinSettlement.SettlementStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "l3TransactionHash",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "disputeDeadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "disputeInitiator",
              "type": "address"
            },
            {
              "internalType": "enum GameDinSettlement.DisputeReason",
              "name": "disputeReason",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "disputeDetails",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalDisputes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSettlements",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "unpause",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newFee",
              "type": "uint256"
            }
          ],
          "name": "updateDisputeFee",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newFee",
              "type": "uint256"
            }
          ],
          "name": "updateSettlementFee",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "userSettlements",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "bytecode": "0x608034620004585762003e1d90601f19906001600160401b03601f388590038181018516840190838211858310176200045d5780859160409889948552833981010312620004585782516001600160a01b03811694908581036200045857602080950151936200006e62000473565b90601882527f47616d6544696e20536574746c656d656e7420546f6b656e000000000000000087830152620000a262000473565b93600495868652634744495360e01b898701528351918383116200034f576003928354956001968781811c911680156200044d575b8d8210146200043857908c8286859411620003df575b50508c90858311600114620003705760009262000364575b505060001982861b1c191690861b1783555b86519384116200034f5787548581811c9116801562000344575b8b8210146200032f57828111620002e4575b5089918411600114620002725750908291620001c39660009362000266575b505082841b92600019911b1c19161784555b60075566038d7ea4c68000600b55662386f26fc10000600c55620001988162000493565b50620001a48162000514565b50620001b081620005b7565b50620001bc8162000655565b50620006f3565b5083156200024f57620001d562000791565b620001df62000791565b600254908282018092116200023a575060025560008381528083528481208054830190558451918252917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a35161364c9081620007b18239f35b601190634e487b7160e01b6000525260246000fd5b602490600086519163ec442f0560e01b8352820152fd5b01519150388062000162565b8394959693169287600052896000209360005b8b828210620002cf575050918593918796620001c39998969410620002b4575b50505050811b01845562000174565b01519060f884600019921b161c1916905538808080620002a5565b83850151875595880195938401930162000285565b886000528a6000208380870160051c8201928d881062000325575b0160051c019086905b8281106200031857505062000143565b6000815501869062000308565b92508192620002ff565b602289634e487b7160e01b6000525260246000fd5b90607f169062000131565b604188634e487b7160e01b6000525260246000fd5b01519050388062000105565b908d91858a95168860005283600020936000905b828210620003bd5750508411620003a4575b505050811b01835562000117565b015160001983881b60f8161c1916905538808062000396565b91929395968291958786015181550195019301908f918b969594939262000384565b909192508660005285826000209181860160051c83019386106200042e575b918a91869594930160051c01915b8281106200041e57508e9150620000ed565b600081558594508a91016200040c565b92508192620003fe565b60228b634e487b7160e01b6000525260246000fd5b90607f1690620000d7565b600080fd5b634e487b7160e01b600052604160045260246000fd5b60408051919082016001600160401b038111838210176200045d57604052565b6001600160a01b031660008181527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8602052604081205490919060ff16620005105781805260066020526040822081835260205260408220600160ff19825416179055339160008051602062003dfd8339815191528180a4600190565b5090565b6001600160a01b031660008181527f44017833178cb959064128715f4ace9a64bbfc45712d4670fcace3e0c4a1693b60205260408120549091907f300f9ae985dc711960f7a4d1dd013f9c19ecf40bff149522ab7523b2187a38469060ff16620005b25780835260066020526040832082845260205260408320600160ff1982541617905560008051602062003dfd833981519152339380a4600190565b505090565b6001600160a01b031660008181527f866532df3c7b8a8304a854a94071efe99d9f2c853d9869138b5fbc8a8598b93760205260408120549091907f52ba824bfabc2bcfcdf7f0edbb486ebb05e1836c90e78047efeb949990f72e5f9060ff16620005b25780835260066020526040832082845260205260408320600160ff1982541617905560008051602062003dfd833981519152339380a4600190565b6001600160a01b031660008181527fc05ecb62b3da283f41a58bfabb0641c07f50e632bc46342d8a4c0cc10b5006ff60205260408120549091907f7b8bb8356a3f32f5c111ff23f050d97f08988e0883529ea7bff3b918887a6e0e9060ff16620005b25780835260066020526040832082845260205260408320600160ff1982541617905560008051602062003dfd833981519152339380a4600190565b6001600160a01b031660008181527f7aca5d7f7c0d5c6c775e2a7e40239a4d6963361b3df3b07df46432786460eb5760205260408120549091907fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b269060ff16620005b25780835260066020526040832082845260205260408320600160ff1982541617905560008051602062003dfd833981519152339380a4600190565b60ff600554166200079e57565b60405163d93c066560e01b8152600490fdfe608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c90816301ffc9a714612b6657508063068d04d014612a0957806306fdde031461294557806308df7dc81461289f578063095ea7b3146127ee57806318160ddd146127b257806320df43591461275957806323b872dd146125d4578063248a9ca314612587578063267f2098146120e85780632f2ff15d1461208b578063313ce5671461205157806336568abe14611fc75780633c0a6e3814611f8b5780633f4ba83a14611ecd578063427ac0ca1461114c57806343b255ac14611d5a5780634c58238014611c9a578063564a565d14611c2c5780635c975abb14611beb57806370a0823114611b8657806376e8a88b14611b055780637d1d7fb814611ac95780638453601714611a715780638456cb59146119db57806384b971a51461199f57806388dae6a814611963578063899c45da146118f1578063917bb9981461181057806391d1485414611797578063933367a81461175457806395d89b41146116365780639de2e9d7146115c45780639e924eb5146114ba578063a217fddf14611480578063a9059cbb14611431578063b5bfddea146113d8578063b9ce896b1461139c578063ba9cf01d14611343578063bfcb704014611264578063bfe42a371461120b578063c4fc45a81461114c578063c5e4ccc414611110578063d0b1149c14610b4a578063d1d50fe614610464578063d547741f14610407578063dd62ed3e1461038a578063e3a96cbd146102e0578063f585dc57146102a45763fc1e29b614610250573861000f565b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576004356000526010602052602060ff604060002054166040519015158152f35b600080fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760206040516203f4808152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57600435600052600e6020526040600020805461038660018301549160038401549060048501549061034e600561034760028901612d62565b9701612d62565b9260405196879673ffffffffffffffffffffffffffffffffffffffff9360ff858760081c1696169460ff8360a01c1692169089612f6d565b0390f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576103c1612c22565b6103c9612c45565b9073ffffffffffffffffffffffffffffffffffffffff8091166000526001602052604060002091166000526020526020604060002054604051908152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5761001b600435610444612c45565b9080600052600660205261045f60016040600020015461316f565b613241565b3461029f5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5761049b612c22565b60449067ffffffffffffffff823581811161029f576104be903690600401612ef8565b926104c7613113565b6104cf613462565b600260075414610b2057600260075573ffffffffffffffffffffffffffffffffffffffff831615610ac25760243515610a645769d3c21bcecceda100000060243511610a06578351156109a857604051602081019061054660208288516105398187858d01612c68565b8101038084520182612d21565b519020600052601060205260ff6040600020541661094a575061056a600854613435565b908160085581600052600d602052604060002090828255600182017fffffffffffffffffffffffff0000000000000000000000000000000000000000903382825416179055600283019073ffffffffffffffffffffffffffffffffffffffff8616908254161790556024356003830155426004830155600582017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00815416905584519081116107d3576106206006830154612cce565b601f8111610903575b50806020601f821160011461083c57600091610831575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161760068201555b60643560078201556203f480420190814211610802576008015573ffffffffffffffffffffffffffffffffffffffff8216600052600f60205260406000208054680100000000000000008110156107d3576106d491600182018155612fda565b81549060031b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84831b921b1916179055604051602081019061072360208287516105398187858c01612c68565b5190206000526010602052604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055610767600954613435565b6009557f4c38254f7b8b72b1565c14ad4825e3be334f5cdf32b2bdb7560016407004f05173ffffffffffffffffffffffffffffffffffffffff6107bd604051956024358752606060208801526060870190612c8b565b9342604087015216938033940390a46001600755005b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b905085015186610640565b91506006830160005260206000206000925b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0831684106108eb5760019350827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08116106108b4575b5050811b016006820155610674565b8701517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c1916905586806108a5565b8781015182556020938401936001909201910161084e565b600683016000526020600020601f830160051c810160208410610943575b601f830160051c82018110610937575050610629565b60008155600101610921565b5080610921565b6064907f4c33207472616e73616374696f6e20616c72656164792070726f636573736564604051917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260206024840152820152fd5b6064907f496e76616c6964204c33207472616e73616374696f6e20686173680000000000604051917f08c379a000000000000000000000000000000000000000000000000000000000835260206004840152601b6024840152820152fd5b6064907f416d6f756e742065786365656473206d6178696d756d00000000000000000000604051917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260166024840152820152fd5b6064907f416d6f756e74206d7573742062652067726561746572207468616e2030000000604051917f08c379a000000000000000000000000000000000000000000000000000000000835260206004840152601d6024840152820152fd5b6064907f496e76616c696420726563697069656e74000000000000000000000000000000604051917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260116024840152820152fd5b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b60607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602435600435600582101561029f5767ffffffffffffffff60443581811161029f57610ba4903690600401612ef8565b90610bad613462565b600c5434106110b25782600052602090600d8252604060002090610bd382541515613498565b600582018054610bef60ff8216610be981612e27565b156134fd565b610bff6008850154421115613562565b73ffffffffffffffffffffffffffffffffffffffff60028501541633148015611070575b15611012577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060029116179055600a6009830192610c8a887fffffffffffffffffffffffff00000000000000000000000000000000000000009533878254161781556135c7565b01908451918183116107d357610ca08154612cce565b92601f93848111610fcf575b508086858211600114610f3157600091610f26575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161790555b610cfd600a54613435565b600a5585600052600e8452604060002092868455610d29886001928387019033908254161781556135c7565b600284019286519283116107d357610d418454612cce565b818111610ee0575b5085908311600114610e185792827fc5a6bd89289814765f8743687ea51d3bb3deb2c8f1cff09b1a479fb94166652c97959281610dde9895606097600092610ded575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91921b9260031b1c19161790555b60034291015560405196610dcf81612e27565b87528601526060850190612c8b565b924260408201528033940390a3005b89015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610d8c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0839293169084600052866000209160005b818110610ecb57509260609592610dde989592827fc5a6bd89289814765f8743687ea51d3bb3deb2c8f1cff09b1a479fb94166652c9b999610610e94575b5050811b019055610dbc565b8801517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690558b80610e88565b89830151845592850192918801918801610e4a565b84600052866000208280860160051c820192898710610f1d575b0160051c019083905b828110610f11575050610d49565b60008155018390610f03565b92508192610efa565b90508701518a610cc1565b6000848152888120927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016905b898b838310610fba575050509083600194939210610f83575b5050811b019055610cf2565b8901517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690558a80610f77565b84015185556001909401939283019201610f5e565b82600052866000208580840160051c820192898510611009575b0160051c01905b818110610ffd5750610cac565b60008155600101610ff0565b92508192610fe9565b606485604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601960248201527f4e6f7420617574686f72697a656420746f2064697370757465000000000000006044820152fd5b507f7b8bb8356a3f32f5c111ff23f050d97f08988e0883529ea7bff3b918887a6e0e60005260068552604060002033600052855260ff60406000205416610c23565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e73756666696369656e7420646973707574652066656500000000000000006044820152fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600a54604051908152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5773ffffffffffffffffffffffffffffffffffffffff80611199612c22565b166000526011602052604060002090610386825492600181015490600360028201549101549160405195869560ff8260a01c169116869192608093969594919673ffffffffffffffffffffffffffffffffffffffff60a085019816845215156020840152604083015260608201520152565b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760206040517f7b8bb8356a3f32f5c111ff23f050d97f08988e0883529ea7bff3b918887a6e0e8152f35b3461029f576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5773ffffffffffffffffffffffffffffffffffffffff6112b1612c22565b16600052600f8152604060002060405190818382549182815201908192600052846000209060005b8682821061132f5786866112ef82880383612d21565b604051928392818401908285525180915260408401929160005b82811061131857505050500390f35b835185528695509381019392810192600101611309565b8354855290930192600192830192016112d9565b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760206040517f300f9ae985dc711960f7a4d1dd013f9c19ecf40bff149522ab7523b2187a38468152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600c54604051908152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760206040517f52ba824bfabc2bcfcdf7f0edbb486ebb05e1836c90e78047efeb949990f72e5f8152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5761147561146b612c22565b60243590336132e4565b602060405160018152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602060405160008152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576004356114f4613113565b6114fc613462565b80600052600d602052611595604060002061151981541515613498565b6005810160017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825461155260ff8216610be981612e27565b6115626008860154421115613562565b1617905573ffffffffffffffffffffffffffffffffffffffff9060038260018301541692600283015416910154916132e4565b604051904282527f1a87470a87e2fff176d778a6e7f91d53b96b4cbb4d856f40abc582586d51850a60203393a3005b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f577fe8fc23e21608aa8e92faee11af5686b6aa7531796f68f2f943bb0d893c4312c960406004356116216130d9565b600c549080600c5582519182526020820152a1005b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57604051600060045461167681612cce565b8084529060019081811690811561170f57506001146116b4575b610386846116a081860382612d21565b604051918291602083526020830190612c8b565b6004600090815292507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106116f75750505081016020016116a082611690565b805460208587018101919091529093019281016116df565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660208087019190915292151560051b850190920192506116a09150839050611690565b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602060405169d3c21bcecceda10000008152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576117ce612c45565b600435600052600660205273ffffffffffffffffffffffffffffffffffffffff60406000209116600052602052602060ff604060002054166040519015158152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576000602073ffffffffffffffffffffffffffffffffffffffff6044611862612c22565b61186a61307d565b60405194859384927fa9059cbb0000000000000000000000000000000000000000000000000000000084523360048501526024356024850152165af180156118e5576118b257005b6020813d82116118dd575b816118ca60209383612d21565b8101031261029f57518015150361029f57005b3d91506118bd565b6040513d6000823e3d90fd5b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f577f9351be7c0f6091e3a280467d38e8ecfd5a4529968cdfaee0e0dbcceaee6765c7604060043561194e6130d9565b600b549080600b5582519182526020820152a1005b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600954604051908152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600854604051908152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611a1261307d565b611a1a613462565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060055416176005557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611aa861307d565b600080808047818115611ac0575b3390f1156118e557005b506108fc611ab6565b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600b54604051908152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611b3c612c22565b73ffffffffffffffffffffffffffffffffffffffff6024359116600052600f6020526040600020805482101561029f57602091611b7891612fda565b90546040519160031b1c8152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5773ffffffffffffffffffffffffffffffffffffffff611bd2612c22565b1660005260006020526020604060002054604051908152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602060ff600554166040519015158152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57600435600052600e60205260406000208054610386600183015491611c8260028501612d62565b9360038101549161034e600560048401549301612d62565b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57600435600052600d6020526040600020805461038673ffffffffffffffffffffffffffffffffffffffff918260018501541693836002820154169160038201549160048101549060ff60058201541690600781015491600882015493600983015496611d43600a611d3c60068701612d62565b9501612d62565b986040519c8d9c60ff8b60a01c169a16988d612e60565b3461029f5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611d91612c22565b60243580151580910361029f576044356064359173ffffffffffffffffffffffffffffffffffffffff60843594611dc6613021565b16938415611e6f577f762b38f99548d8913199a63ae95b09259e584b25129ca98ee5317f088d487bf593608093866000526011602052826003604060002080548a7fffffffffffffffffffffff00000000000000000000000000000000000000000074ff00000000000000000000000000000000000000008a60a01b169216171781558360018201558460028201550155604051938452602084015260408301526060820152a2005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c6964206272696467652061646472657373000000000000000000006044820152fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611f0461307d565b60055460ff811615611f61577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166005557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60046040517f8dfc202b000000000000000000000000000000000000000000000000000000008152fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602060405162093a808152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611ffe612c45565b3373ffffffffffffffffffffffffffffffffffffffff8216036120275761001b90600435613241565b60046040517f6697b232000000000000000000000000000000000000000000000000000000008152fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602060405160128152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5761001b6004356120c8612c45565b908060005260066020526120e360016040600020015461316f565b613195565b3461029f5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760043567ffffffffffffffff60243581811161029f5761213b903690600401612ef8565b9160443592831515840361029f573360009081527fc05ecb62b3da283f41a58bfabb0641c07f50e632bc46342d8a4c0cc10b5006ff60209081526040909120549094907f7b8bb8356a3f32f5c111ff23f050d97f08988e0883529ea7bff3b918887a6e0e9060ff161561255057506121b1613462565b82600052600d85526040600020600e86526040600020906121d481541515613498565b6005810192600260ff8554166121e981612e27565b036124f257600483019283549360ff85166124945790600591600180967fffffffffffffffffffffff00000000000000000000000000000000000000000074ffffffffffffffffffffffffffffffffffffffff003360081b169116171790550185519788116107d35761225c8154612cce565b601f811161244b575b5088601f891160011461238c5797807faf22c8b9970a1e934469d4910ba635081d805cf60a06f96c00d501bd873796639899600091612381575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82871b9260031b1c19161790555b15612351578260037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0061232e955416179055600373ffffffffffffffffffffffffffffffffffffffff80938301541692600283015416910154916132e4565b61234360405191604083526040830190612c8b565b9342908201528033940390a3005b505060047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905561232e565b90508701518b61229f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0891690826000528a6000209160005b8c828210612437575050918a917faf22c8b9970a1e934469d4910ba635081d805cf60a06f96c00d501bd873796639a9b889410612400575b5050811b0190556122cf565b8901517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690558b806123f4565b8a84015185559388019392830192016123bc565b8160005289600020601f8a0160051c8101918b8b1061248a575b601f0160051c019085905b82811061247e575050612265565b60008155018590612470565b9091508190612465565b60648a604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601860248201527f4469737075746520616c7265616479207265736f6c76656400000000000000006044820152fd5b606488604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601760248201527f536574746c656d656e74206e6f742064697370757465640000000000000000006044820152fd5b604490604051907fe2517d3f0000000000000000000000000000000000000000000000000000000082523360048301526024820152fd5b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760043560005260066020526020600160406000200154604051908152f35b3461029f5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5761260b612c22565b612613612c45565b6044359073ffffffffffffffffffffffffffffffffffffffff831692836000526001602052604060002033600052602052604060002054937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff851061267e575b5061147593506132e4565b83851061271a5780156126e95733156126b85761147594849160005260016020526040600020336000526020520360406000205584612673565b60246040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152fd5b60246040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b6040517ffb8f41b20000000000000000000000000000000000000000000000000000000081523360048201526024810186905260448101859052606490fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760206040517fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b268152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600254604051908152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57612825612c22565b6024359033156126e95773ffffffffffffffffffffffffffffffffffffffff169081156126b857336000526001602052604060002082600052602052806040600020556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57600435600052600d6020526040600020805461038673ffffffffffffffffffffffffffffffffffffffff91826001850154169383600282015416916003820154600483015460ff60058501541661292760068601612d62565b90600786015492600887015494611d43600a60098a01549901612d62565b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57604051600060035461298581612cce565b8084529060019081811690811561170f57506001146129ae57610386846116a081860382612d21565b6003600090815292507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106129f15750505081016020016116a082611690565b805460208587018101919091529093019281016129d9565b3461029f5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57612a40612c22565b612a48612c45565b6044359060643573ffffffffffffffffffffffffffffffffffffffff811680910361029f57612a75613021565b612a7d613462565b6000526011602052604060002060ff815460a01c1615612b0857600201548211612aaa5761001b926132e4565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416d6f756e74206578636565647320627269646765206c696d697400000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f427269646765206e6f74206163746976650000000000000000000000000000006044820152fd5b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57600435907fffffffff00000000000000000000000000000000000000000000000000000000821680920361029f57817f7965db0b0000000000000000000000000000000000000000000000000000000060209314908115612bf8575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483612bf1565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361029f57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361029f57565b60005b838110612c7b5750506000910152565b8181015183820152602001612c6b565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093612cc781518092818752878088019101612c68565b0116010190565b90600182811c92168015612d17575b6020831014612ce857565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691612cdd565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176107d357604052565b9060405191826000825492612d7684612cce565b908184526001948581169081600014612de55750600114612da2575b5050612da092500383612d21565b565b9093915060005260209081600020936000915b818310612dcd575050612da093508201013880612d92565b85548884018501529485019487945091830191612db5565b9050612da09550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013880612d92565b60051115612e3157565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b98949093612ef59c9a9692612ec5959c999c9894988b5273ffffffffffffffffffffffffffffffffffffffff988980921660208d01521660408b015260608a01526080890152612eaf81612e27565b60a08801526101808060c0890152870190612c8b565b9660e086015261010085015216610120830152612ee181612e27565b610140820152610160818403910152612c8b565b90565b81601f8201121561029f5780359067ffffffffffffffff82116107d35760405192612f4b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160185612d21565b8284526020838301011161029f57816000926020809301838601378301015290565b94969293612ef598969294612fba92875273ffffffffffffffffffffffffffffffffffffffff8096166020880152612fa481612e27565b6040870152610100806060880152860190612c8b565b956080850152151560a08401521660c082015260e0818403910152612c8b565b8054821015612ff25760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b3360009081527f866532df3c7b8a8304a854a94071efe99d9f2c853d9869138b5fbc8a8598b93760205260409020547f52ba824bfabc2bcfcdf7f0edbb486ebb05e1836c90e78047efeb949990f72e5f9060ff16156125505750565b3360009081527f7aca5d7f7c0d5c6c775e2a7e40239a4d6963361b3df3b07df46432786460eb5760205260409020547fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b269060ff16156125505750565b3360009081527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8602052604081205460ff16156125505750565b3360009081527f44017833178cb959064128715f4ace9a64bbfc45712d4670fcace3e0c4a1693b60205260409020547f300f9ae985dc711960f7a4d1dd013f9c19ecf40bff149522ab7523b2187a38469060ff16156125505750565b80600052600660205260406000203360005260205260ff60406000205416156125505750565b90600091808352600660205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff6040842054161560001461323c578083526006602052604083208284526020526040832060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b90600091808352600660205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff60408420541660001461323c57808352600660205260408320828452602052604083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b9173ffffffffffffffffffffffffffffffffffffffff80841692831561340457169283156133d357613314613462565b61331c613462565b6000908382528160205260408220549083821061337b575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b6040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602481019190915260448101839052606490fd5b60246040517fec442f0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b60246040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260006004820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108025760010190565b60ff6005541661346e57565b60046040517fd93c0665000000000000000000000000000000000000000000000000000000008152fd5b1561349f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f536574746c656d656e7420646f6573206e6f74206578697374000000000000006044820152fd5b1561350457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f536574746c656d656e74206e6f742070656e64696e67000000000000000000006044820152fd5b1561356957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f446973707574652077696e646f772065787069726564000000000000000000006044820152fd5b906135d181612e27565b7fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff000000000000000000000000000000000000000083549260a01b16911617905556fea264697066735822122080a9d5acbdcb97f17e01b55938d3184bd8cf0c16b651b924694bb61f0b7f48b564736f6c634300081400332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
      "deployedBytecode": "",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "details": "L2 settlement layer for GameDin L3 gaming blockchain Handles cross-chain asset transfers, dispute resolution, and final settlement",
        "errors": {
          "AccessControlBadConfirmation()": [
            {
              "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
            }
          ],
          "AccessControlUnauthorizedAccount(address,bytes32)": [
            {
              "details": "The `account` is missing a role."
            }
          ],
          "ERC20InsufficientAllowance(address,uint256,uint256)": [
            {
              "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
              "params": {
                "allowance": "Amount of tokens a `spender` is allowed to operate with.",
                "needed": "Minimum amount required to perform a transfer.",
                "spender": "Address that may be allowed to operate on tokens without being their owner."
              }
            }
          ],
          "ERC20InsufficientBalance(address,uint256,uint256)": [
            {
              "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
              "params": {
                "balance": "Current balance for the interacting account.",
                "needed": "Minimum amount required to perform a transfer.",
                "sender": "Address whose tokens are being transferred."
              }
            }
          ],
          "ERC20InvalidApprover(address)": [
            {
              "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
              "params": {
                "approver": "Address initiating an approval operation."
              }
            }
          ],
          "ERC20InvalidReceiver(address)": [
            {
              "details": "Indicates a failure with the token `receiver`. Used in transfers.",
              "params": {
                "receiver": "Address to which tokens are being transferred."
              }
            }
          ],
          "ERC20InvalidSender(address)": [
            {
              "details": "Indicates a failure with the token `sender`. Used in transfers.",
              "params": {
                "sender": "Address whose tokens are being transferred."
              }
            }
          ],
          "ERC20InvalidSpender(address)": [
            {
              "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
              "params": {
                "spender": "Address that may be allowed to operate on tokens without being their owner."
              }
            }
          ],
          "EnforcedPause()": [
            {
              "details": "The operation failed because the contract is paused."
            }
          ],
          "ExpectedPause()": [
            {
              "details": "The operation failed because the contract is not paused."
            }
          ],
          "ReentrancyGuardReentrantCall()": [
            {
              "details": "Unauthorized reentrant call."
            }
          ]
        },
        "events": {
          "Approval(address,address,uint256)": {
            "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
          },
          "Paused(address)": {
            "details": "Emitted when the pause is triggered by `account`."
          },
          "RoleAdminChanged(bytes32,bytes32,bytes32)": {
            "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
          },
          "RoleGranted(bytes32,address,address)": {
            "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
          },
          "RoleRevoked(bytes32,address,address)": {
            "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
          },
          "Transfer(address,address,uint256)": {
            "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
          },
          "Unpaused(address)": {
            "details": "Emitted when the pause is lifted by `account`."
          }
        },
        "kind": "dev",
        "methods": {
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "configureBridge(address,bool,uint256,uint256,uint256)": {
            "details": "Configure a bridge",
            "params": {
              "bridgeAddress": "Bridge contract address",
              "fee": "Bridge fee",
              "isActive": "Whether bridge is active",
              "maxAmount": "Maximum amount per transaction",
              "minConfirmations": "Minimum confirmations required"
            }
          },
          "confirmSettlement(uint256)": {
            "details": "Confirm a settlement",
            "params": {
              "settlementId": "Settlement ID"
            }
          },
          "createSettlement(address,uint256,string,bytes32)": {
            "details": "Create a new settlement",
            "params": {
              "amount": "Settlement amount",
              "l3TransactionHash": "L3 transaction hash",
              "merkleRoot": "Merkle root for verification",
              "to": "Recipient address"
            }
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "emergencyWithdrawETH()": {
            "details": "Emergency withdraw ETH"
          },
          "emergencyWithdrawTokens(address,uint256)": {
            "details": "Emergency withdraw tokens",
            "params": {
              "amount": "Amount to withdraw",
              "token": "Token address"
            }
          },
          "getBridgeConfig(address)": {
            "details": "Get bridge configuration",
            "params": {
              "bridgeAddress": "Bridge address"
            },
            "returns": {
              "bridge": "Bridge address",
              "fee": "Bridge fee",
              "isActive": "Whether active",
              "maxAmount": "Maximum amount",
              "minConfirmations": "Minimum confirmations"
            }
          },
          "getDispute(uint256)": {
            "details": "Get dispute details",
            "params": {
              "settlementId": "Settlement ID"
            },
            "returns": {
              "details": "Dispute details",
              "id": "Settlement ID",
              "initiator": "Dispute initiator",
              "reason": "Dispute reason",
              "resolution": "Resolution details",
              "resolved": "Whether resolved",
              "resolver": "Resolver address",
              "timestamp": "Timestamp"
            }
          },
          "getRoleAdmin(bytes32)": {
            "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
          },
          "getSettlement(uint256)": {
            "details": "Get settlement details",
            "params": {
              "settlementId": "Settlement ID"
            },
            "returns": {
              "amount": "Amount",
              "disputeDeadline": "Dispute deadline",
              "disputeDetails": "Dispute details",
              "disputeInitiator": "Dispute initiator",
              "disputeReason": "Dispute reason",
              "from": "Sender address",
              "id": "Settlement ID",
              "l3TransactionHash": "L3 transaction hash",
              "merkleRoot": "Merkle root",
              "status": "Settlement status",
              "timestamp": "Timestamp",
              "to": "Recipient address"
            }
          },
          "getUserSettlements(address)": {
            "details": "Get user settlements",
            "params": {
              "user": "User address"
            },
            "returns": {
              "_0": "settlementIds Array of settlement IDs"
            }
          },
          "grantRole(bytes32,address)": {
            "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
          },
          "hasRole(bytes32,address)": {
            "details": "Returns `true` if `account` has been granted `role`."
          },
          "initiateDispute(uint256,uint8,string)": {
            "details": "Initiate a dispute for a settlement",
            "params": {
              "details": "Dispute details",
              "reason": "Dispute reason",
              "settlementId": "Settlement ID"
            }
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "pause()": {
            "details": "Pause contract"
          },
          "paused()": {
            "details": "Returns true if the contract is paused, and false otherwise."
          },
          "processBridgeTransaction(address,address,uint256,address)": {
            "details": "Process bridge transaction",
            "params": {
              "amount": "Amount to transfer",
              "bridgeAddress": "Bridge address",
              "from": "Source address",
              "to": "Destination address"
            }
          },
          "renounceRole(bytes32,address)": {
            "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
          },
          "resolveDispute(uint256,string,bool)": {
            "details": "Resolve a dispute",
            "params": {
              "approveSettlement": "Whether to approve the settlement",
              "resolution": "Resolution details",
              "settlementId": "Settlement ID"
            }
          },
          "revokeRole(bytes32,address)": {
            "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
          },
          "supportsInterface(bytes4)": {
            "details": "See {IERC165-supportsInterface}."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
          },
          "unpause()": {
            "details": "Unpause contract"
          },
          "updateDisputeFee(uint256)": {
            "details": "Update dispute fee",
            "params": {
              "newFee": "New fee amount"
            }
          },
          "updateSettlementFee(uint256)": {
            "details": "Update settlement fee",
            "params": {
              "newFee": "New fee amount"
            }
          }
        },
        "title": "GameDin Settlement Contract",
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "allocate_memory": {
              "entryPoint": 1139,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "fun_grantRole": {
              "entryPoint": 1621,
              "id": 302,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_grantRole_9132": {
              "entryPoint": 1171,
              "id": 302,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_grantRole_9133": {
              "entryPoint": 1300,
              "id": 302,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_grantRole_9134": {
              "entryPoint": 1463,
              "id": 302,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_grantRole_9136": {
              "entryPoint": 1779,
              "id": 302,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_requireNotPaused": {
              "entryPoint": 1937,
              "id": 1617,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [],
          "linkReferences": {},
          "object": "608034620004585762003e1d90601f19906001600160401b03601f388590038181018516840190838211858310176200045d5780859160409889948552833981010312620004585782516001600160a01b03811694908581036200045857602080950151936200006e62000473565b90601882527f47616d6544696e20536574746c656d656e7420546f6b656e000000000000000087830152620000a262000473565b93600495868652634744495360e01b898701528351918383116200034f576003928354956001968781811c911680156200044d575b8d8210146200043857908c8286859411620003df575b50508c90858311600114620003705760009262000364575b505060001982861b1c191690861b1783555b86519384116200034f5787548581811c9116801562000344575b8b8210146200032f57828111620002e4575b5089918411600114620002725750908291620001c39660009362000266575b505082841b92600019911b1c19161784555b60075566038d7ea4c68000600b55662386f26fc10000600c55620001988162000493565b50620001a48162000514565b50620001b081620005b7565b50620001bc8162000655565b50620006f3565b5083156200024f57620001d562000791565b620001df62000791565b600254908282018092116200023a575060025560008381528083528481208054830190558451918252917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a35161364c9081620007b18239f35b601190634e487b7160e01b6000525260246000fd5b602490600086519163ec442f0560e01b8352820152fd5b01519150388062000162565b8394959693169287600052896000209360005b8b828210620002cf575050918593918796620001c39998969410620002b4575b50505050811b01845562000174565b01519060f884600019921b161c1916905538808080620002a5565b83850151875595880195938401930162000285565b886000528a6000208380870160051c8201928d881062000325575b0160051c019086905b8281106200031857505062000143565b6000815501869062000308565b92508192620002ff565b602289634e487b7160e01b6000525260246000fd5b90607f169062000131565b604188634e487b7160e01b6000525260246000fd5b01519050388062000105565b908d91858a95168860005283600020936000905b828210620003bd5750508411620003a4575b505050811b01835562000117565b015160001983881b60f8161c1916905538808062000396565b91929395968291958786015181550195019301908f918b969594939262000384565b909192508660005285826000209181860160051c83019386106200042e575b918a91869594930160051c01915b8281106200041e57508e9150620000ed565b600081558594508a91016200040c565b92508192620003fe565b60228b634e487b7160e01b6000525260246000fd5b90607f1690620000d7565b600080fd5b634e487b7160e01b600052604160045260246000fd5b60408051919082016001600160401b038111838210176200045d57604052565b6001600160a01b031660008181527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8602052604081205490919060ff16620005105781805260066020526040822081835260205260408220600160ff19825416179055339160008051602062003dfd8339815191528180a4600190565b5090565b6001600160a01b031660008181527f44017833178cb959064128715f4ace9a64bbfc45712d4670fcace3e0c4a1693b60205260408120549091907f300f9ae985dc711960f7a4d1dd013f9c19ecf40bff149522ab7523b2187a38469060ff16620005b25780835260066020526040832082845260205260408320600160ff1982541617905560008051602062003dfd833981519152339380a4600190565b505090565b6001600160a01b031660008181527f866532df3c7b8a8304a854a94071efe99d9f2c853d9869138b5fbc8a8598b93760205260408120549091907f52ba824bfabc2bcfcdf7f0edbb486ebb05e1836c90e78047efeb949990f72e5f9060ff16620005b25780835260066020526040832082845260205260408320600160ff1982541617905560008051602062003dfd833981519152339380a4600190565b6001600160a01b031660008181527fc05ecb62b3da283f41a58bfabb0641c07f50e632bc46342d8a4c0cc10b5006ff60205260408120549091907f7b8bb8356a3f32f5c111ff23f050d97f08988e0883529ea7bff3b918887a6e0e9060ff16620005b25780835260066020526040832082845260205260408320600160ff1982541617905560008051602062003dfd833981519152339380a4600190565b6001600160a01b031660008181527f7aca5d7f7c0d5c6c775e2a7e40239a4d6963361b3df3b07df46432786460eb5760205260408120549091907fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b269060ff16620005b25780835260066020526040832082845260205260408320600160ff1982541617905560008051602062003dfd833981519152339380a4600190565b60ff600554166200079e57565b60405163d93c066560e01b8152600490fdfe608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c90816301ffc9a714612b6657508063068d04d014612a0957806306fdde031461294557806308df7dc81461289f578063095ea7b3146127ee57806318160ddd146127b257806320df43591461275957806323b872dd146125d4578063248a9ca314612587578063267f2098146120e85780632f2ff15d1461208b578063313ce5671461205157806336568abe14611fc75780633c0a6e3814611f8b5780633f4ba83a14611ecd578063427ac0ca1461114c57806343b255ac14611d5a5780634c58238014611c9a578063564a565d14611c2c5780635c975abb14611beb57806370a0823114611b8657806376e8a88b14611b055780637d1d7fb814611ac95780638453601714611a715780638456cb59146119db57806384b971a51461199f57806388dae6a814611963578063899c45da146118f1578063917bb9981461181057806391d1485414611797578063933367a81461175457806395d89b41146116365780639de2e9d7146115c45780639e924eb5146114ba578063a217fddf14611480578063a9059cbb14611431578063b5bfddea146113d8578063b9ce896b1461139c578063ba9cf01d14611343578063bfcb704014611264578063bfe42a371461120b578063c4fc45a81461114c578063c5e4ccc414611110578063d0b1149c14610b4a578063d1d50fe614610464578063d547741f14610407578063dd62ed3e1461038a578063e3a96cbd146102e0578063f585dc57146102a45763fc1e29b614610250573861000f565b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576004356000526010602052602060ff604060002054166040519015158152f35b600080fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760206040516203f4808152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57600435600052600e6020526040600020805461038660018301549160038401549060048501549061034e600561034760028901612d62565b9701612d62565b9260405196879673ffffffffffffffffffffffffffffffffffffffff9360ff858760081c1696169460ff8360a01c1692169089612f6d565b0390f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576103c1612c22565b6103c9612c45565b9073ffffffffffffffffffffffffffffffffffffffff8091166000526001602052604060002091166000526020526020604060002054604051908152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5761001b600435610444612c45565b9080600052600660205261045f60016040600020015461316f565b613241565b3461029f5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5761049b612c22565b60449067ffffffffffffffff823581811161029f576104be903690600401612ef8565b926104c7613113565b6104cf613462565b600260075414610b2057600260075573ffffffffffffffffffffffffffffffffffffffff831615610ac25760243515610a645769d3c21bcecceda100000060243511610a06578351156109a857604051602081019061054660208288516105398187858d01612c68565b8101038084520182612d21565b519020600052601060205260ff6040600020541661094a575061056a600854613435565b908160085581600052600d602052604060002090828255600182017fffffffffffffffffffffffff0000000000000000000000000000000000000000903382825416179055600283019073ffffffffffffffffffffffffffffffffffffffff8616908254161790556024356003830155426004830155600582017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00815416905584519081116107d3576106206006830154612cce565b601f8111610903575b50806020601f821160011461083c57600091610831575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161760068201555b60643560078201556203f480420190814211610802576008015573ffffffffffffffffffffffffffffffffffffffff8216600052600f60205260406000208054680100000000000000008110156107d3576106d491600182018155612fda565b81549060031b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84831b921b1916179055604051602081019061072360208287516105398187858c01612c68565b5190206000526010602052604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055610767600954613435565b6009557f4c38254f7b8b72b1565c14ad4825e3be334f5cdf32b2bdb7560016407004f05173ffffffffffffffffffffffffffffffffffffffff6107bd604051956024358752606060208801526060870190612c8b565b9342604087015216938033940390a46001600755005b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b905085015186610640565b91506006830160005260206000206000925b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0831684106108eb5760019350827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08116106108b4575b5050811b016006820155610674565b8701517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c1916905586806108a5565b8781015182556020938401936001909201910161084e565b600683016000526020600020601f830160051c810160208410610943575b601f830160051c82018110610937575050610629565b60008155600101610921565b5080610921565b6064907f4c33207472616e73616374696f6e20616c72656164792070726f636573736564604051917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260206024840152820152fd5b6064907f496e76616c6964204c33207472616e73616374696f6e20686173680000000000604051917f08c379a000000000000000000000000000000000000000000000000000000000835260206004840152601b6024840152820152fd5b6064907f416d6f756e742065786365656473206d6178696d756d00000000000000000000604051917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260166024840152820152fd5b6064907f416d6f756e74206d7573742062652067726561746572207468616e2030000000604051917f08c379a000000000000000000000000000000000000000000000000000000000835260206004840152601d6024840152820152fd5b6064907f496e76616c696420726563697069656e74000000000000000000000000000000604051917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260116024840152820152fd5b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b60607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602435600435600582101561029f5767ffffffffffffffff60443581811161029f57610ba4903690600401612ef8565b90610bad613462565b600c5434106110b25782600052602090600d8252604060002090610bd382541515613498565b600582018054610bef60ff8216610be981612e27565b156134fd565b610bff6008850154421115613562565b73ffffffffffffffffffffffffffffffffffffffff60028501541633148015611070575b15611012577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060029116179055600a6009830192610c8a887fffffffffffffffffffffffff00000000000000000000000000000000000000009533878254161781556135c7565b01908451918183116107d357610ca08154612cce565b92601f93848111610fcf575b508086858211600114610f3157600091610f26575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161790555b610cfd600a54613435565b600a5585600052600e8452604060002092868455610d29886001928387019033908254161781556135c7565b600284019286519283116107d357610d418454612cce565b818111610ee0575b5085908311600114610e185792827fc5a6bd89289814765f8743687ea51d3bb3deb2c8f1cff09b1a479fb94166652c97959281610dde9895606097600092610ded575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91921b9260031b1c19161790555b60034291015560405196610dcf81612e27565b87528601526060850190612c8b565b924260408201528033940390a3005b89015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610d8c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0839293169084600052866000209160005b818110610ecb57509260609592610dde989592827fc5a6bd89289814765f8743687ea51d3bb3deb2c8f1cff09b1a479fb94166652c9b999610610e94575b5050811b019055610dbc565b8801517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690558b80610e88565b89830151845592850192918801918801610e4a565b84600052866000208280860160051c820192898710610f1d575b0160051c019083905b828110610f11575050610d49565b60008155018390610f03565b92508192610efa565b90508701518a610cc1565b6000848152888120927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016905b898b838310610fba575050509083600194939210610f83575b5050811b019055610cf2565b8901517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690558a80610f77565b84015185556001909401939283019201610f5e565b82600052866000208580840160051c820192898510611009575b0160051c01905b818110610ffd5750610cac565b60008155600101610ff0565b92508192610fe9565b606485604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601960248201527f4e6f7420617574686f72697a656420746f2064697370757465000000000000006044820152fd5b507f7b8bb8356a3f32f5c111ff23f050d97f08988e0883529ea7bff3b918887a6e0e60005260068552604060002033600052855260ff60406000205416610c23565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e73756666696369656e7420646973707574652066656500000000000000006044820152fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600a54604051908152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5773ffffffffffffffffffffffffffffffffffffffff80611199612c22565b166000526011602052604060002090610386825492600181015490600360028201549101549160405195869560ff8260a01c169116869192608093969594919673ffffffffffffffffffffffffffffffffffffffff60a085019816845215156020840152604083015260608201520152565b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760206040517f7b8bb8356a3f32f5c111ff23f050d97f08988e0883529ea7bff3b918887a6e0e8152f35b3461029f576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5773ffffffffffffffffffffffffffffffffffffffff6112b1612c22565b16600052600f8152604060002060405190818382549182815201908192600052846000209060005b8682821061132f5786866112ef82880383612d21565b604051928392818401908285525180915260408401929160005b82811061131857505050500390f35b835185528695509381019392810192600101611309565b8354855290930192600192830192016112d9565b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760206040517f300f9ae985dc711960f7a4d1dd013f9c19ecf40bff149522ab7523b2187a38468152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600c54604051908152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760206040517f52ba824bfabc2bcfcdf7f0edbb486ebb05e1836c90e78047efeb949990f72e5f8152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5761147561146b612c22565b60243590336132e4565b602060405160018152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602060405160008152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576004356114f4613113565b6114fc613462565b80600052600d602052611595604060002061151981541515613498565b6005810160017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825461155260ff8216610be981612e27565b6115626008860154421115613562565b1617905573ffffffffffffffffffffffffffffffffffffffff9060038260018301541692600283015416910154916132e4565b604051904282527f1a87470a87e2fff176d778a6e7f91d53b96b4cbb4d856f40abc582586d51850a60203393a3005b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f577fe8fc23e21608aa8e92faee11af5686b6aa7531796f68f2f943bb0d893c4312c960406004356116216130d9565b600c549080600c5582519182526020820152a1005b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57604051600060045461167681612cce565b8084529060019081811690811561170f57506001146116b4575b610386846116a081860382612d21565b604051918291602083526020830190612c8b565b6004600090815292507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106116f75750505081016020016116a082611690565b805460208587018101919091529093019281016116df565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660208087019190915292151560051b850190920192506116a09150839050611690565b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602060405169d3c21bcecceda10000008152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576117ce612c45565b600435600052600660205273ffffffffffffffffffffffffffffffffffffffff60406000209116600052602052602060ff604060002054166040519015158152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576000602073ffffffffffffffffffffffffffffffffffffffff6044611862612c22565b61186a61307d565b60405194859384927fa9059cbb0000000000000000000000000000000000000000000000000000000084523360048501526024356024850152165af180156118e5576118b257005b6020813d82116118dd575b816118ca60209383612d21565b8101031261029f57518015150361029f57005b3d91506118bd565b6040513d6000823e3d90fd5b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f577f9351be7c0f6091e3a280467d38e8ecfd5a4529968cdfaee0e0dbcceaee6765c7604060043561194e6130d9565b600b549080600b5582519182526020820152a1005b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600954604051908152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600854604051908152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611a1261307d565b611a1a613462565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060055416176005557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611aa861307d565b600080808047818115611ac0575b3390f1156118e557005b506108fc611ab6565b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600b54604051908152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611b3c612c22565b73ffffffffffffffffffffffffffffffffffffffff6024359116600052600f6020526040600020805482101561029f57602091611b7891612fda565b90546040519160031b1c8152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5773ffffffffffffffffffffffffffffffffffffffff611bd2612c22565b1660005260006020526020604060002054604051908152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602060ff600554166040519015158152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57600435600052600e60205260406000208054610386600183015491611c8260028501612d62565b9360038101549161034e600560048401549301612d62565b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57600435600052600d6020526040600020805461038673ffffffffffffffffffffffffffffffffffffffff918260018501541693836002820154169160038201549160048101549060ff60058201541690600781015491600882015493600983015496611d43600a611d3c60068701612d62565b9501612d62565b986040519c8d9c60ff8b60a01c169a16988d612e60565b3461029f5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611d91612c22565b60243580151580910361029f576044356064359173ffffffffffffffffffffffffffffffffffffffff60843594611dc6613021565b16938415611e6f577f762b38f99548d8913199a63ae95b09259e584b25129ca98ee5317f088d487bf593608093866000526011602052826003604060002080548a7fffffffffffffffffffffff00000000000000000000000000000000000000000074ff00000000000000000000000000000000000000008a60a01b169216171781558360018201558460028201550155604051938452602084015260408301526060820152a2005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c6964206272696467652061646472657373000000000000000000006044820152fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611f0461307d565b60055460ff811615611f61577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166005557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60046040517f8dfc202b000000000000000000000000000000000000000000000000000000008152fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602060405162093a808152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611ffe612c45565b3373ffffffffffffffffffffffffffffffffffffffff8216036120275761001b90600435613241565b60046040517f6697b232000000000000000000000000000000000000000000000000000000008152fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602060405160128152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5761001b6004356120c8612c45565b908060005260066020526120e360016040600020015461316f565b613195565b3461029f5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760043567ffffffffffffffff60243581811161029f5761213b903690600401612ef8565b9160443592831515840361029f573360009081527fc05ecb62b3da283f41a58bfabb0641c07f50e632bc46342d8a4c0cc10b5006ff60209081526040909120549094907f7b8bb8356a3f32f5c111ff23f050d97f08988e0883529ea7bff3b918887a6e0e9060ff161561255057506121b1613462565b82600052600d85526040600020600e86526040600020906121d481541515613498565b6005810192600260ff8554166121e981612e27565b036124f257600483019283549360ff85166124945790600591600180967fffffffffffffffffffffff00000000000000000000000000000000000000000074ffffffffffffffffffffffffffffffffffffffff003360081b169116171790550185519788116107d35761225c8154612cce565b601f811161244b575b5088601f891160011461238c5797807faf22c8b9970a1e934469d4910ba635081d805cf60a06f96c00d501bd873796639899600091612381575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82871b9260031b1c19161790555b15612351578260037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0061232e955416179055600373ffffffffffffffffffffffffffffffffffffffff80938301541692600283015416910154916132e4565b61234360405191604083526040830190612c8b565b9342908201528033940390a3005b505060047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905561232e565b90508701518b61229f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0891690826000528a6000209160005b8c828210612437575050918a917faf22c8b9970a1e934469d4910ba635081d805cf60a06f96c00d501bd873796639a9b889410612400575b5050811b0190556122cf565b8901517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690558b806123f4565b8a84015185559388019392830192016123bc565b8160005289600020601f8a0160051c8101918b8b1061248a575b601f0160051c019085905b82811061247e575050612265565b60008155018590612470565b9091508190612465565b60648a604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601860248201527f4469737075746520616c7265616479207265736f6c76656400000000000000006044820152fd5b606488604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601760248201527f536574746c656d656e74206e6f742064697370757465640000000000000000006044820152fd5b604490604051907fe2517d3f0000000000000000000000000000000000000000000000000000000082523360048301526024820152fd5b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760043560005260066020526020600160406000200154604051908152f35b3461029f5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5761260b612c22565b612613612c45565b6044359073ffffffffffffffffffffffffffffffffffffffff831692836000526001602052604060002033600052602052604060002054937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff851061267e575b5061147593506132e4565b83851061271a5780156126e95733156126b85761147594849160005260016020526040600020336000526020520360406000205584612673565b60246040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152fd5b60246040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b6040517ffb8f41b20000000000000000000000000000000000000000000000000000000081523360048201526024810186905260448101859052606490fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760206040517fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b268152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600254604051908152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57612825612c22565b6024359033156126e95773ffffffffffffffffffffffffffffffffffffffff169081156126b857336000526001602052604060002082600052602052806040600020556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57600435600052600d6020526040600020805461038673ffffffffffffffffffffffffffffffffffffffff91826001850154169383600282015416916003820154600483015460ff60058501541661292760068601612d62565b90600786015492600887015494611d43600a60098a01549901612d62565b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57604051600060035461298581612cce565b8084529060019081811690811561170f57506001146129ae57610386846116a081860382612d21565b6003600090815292507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106129f15750505081016020016116a082611690565b805460208587018101919091529093019281016129d9565b3461029f5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57612a40612c22565b612a48612c45565b6044359060643573ffffffffffffffffffffffffffffffffffffffff811680910361029f57612a75613021565b612a7d613462565b6000526011602052604060002060ff815460a01c1615612b0857600201548211612aaa5761001b926132e4565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416d6f756e74206578636565647320627269646765206c696d697400000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f427269646765206e6f74206163746976650000000000000000000000000000006044820152fd5b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57600435907fffffffff00000000000000000000000000000000000000000000000000000000821680920361029f57817f7965db0b0000000000000000000000000000000000000000000000000000000060209314908115612bf8575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483612bf1565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361029f57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361029f57565b60005b838110612c7b5750506000910152565b8181015183820152602001612c6b565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093612cc781518092818752878088019101612c68565b0116010190565b90600182811c92168015612d17575b6020831014612ce857565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691612cdd565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176107d357604052565b9060405191826000825492612d7684612cce565b908184526001948581169081600014612de55750600114612da2575b5050612da092500383612d21565b565b9093915060005260209081600020936000915b818310612dcd575050612da093508201013880612d92565b85548884018501529485019487945091830191612db5565b9050612da09550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013880612d92565b60051115612e3157565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b98949093612ef59c9a9692612ec5959c999c9894988b5273ffffffffffffffffffffffffffffffffffffffff988980921660208d01521660408b015260608a01526080890152612eaf81612e27565b60a08801526101808060c0890152870190612c8b565b9660e086015261010085015216610120830152612ee181612e27565b610140820152610160818403910152612c8b565b90565b81601f8201121561029f5780359067ffffffffffffffff82116107d35760405192612f4b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160185612d21565b8284526020838301011161029f57816000926020809301838601378301015290565b94969293612ef598969294612fba92875273ffffffffffffffffffffffffffffffffffffffff8096166020880152612fa481612e27565b6040870152610100806060880152860190612c8b565b956080850152151560a08401521660c082015260e0818403910152612c8b565b8054821015612ff25760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b3360009081527f866532df3c7b8a8304a854a94071efe99d9f2c853d9869138b5fbc8a8598b93760205260409020547f52ba824bfabc2bcfcdf7f0edbb486ebb05e1836c90e78047efeb949990f72e5f9060ff16156125505750565b3360009081527f7aca5d7f7c0d5c6c775e2a7e40239a4d6963361b3df3b07df46432786460eb5760205260409020547fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b269060ff16156125505750565b3360009081527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8602052604081205460ff16156125505750565b3360009081527f44017833178cb959064128715f4ace9a64bbfc45712d4670fcace3e0c4a1693b60205260409020547f300f9ae985dc711960f7a4d1dd013f9c19ecf40bff149522ab7523b2187a38469060ff16156125505750565b80600052600660205260406000203360005260205260ff60406000205416156125505750565b90600091808352600660205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff6040842054161560001461323c578083526006602052604083208284526020526040832060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b90600091808352600660205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff60408420541660001461323c57808352600660205260408320828452602052604083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b9173ffffffffffffffffffffffffffffffffffffffff80841692831561340457169283156133d357613314613462565b61331c613462565b6000908382528160205260408220549083821061337b575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b6040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602481019190915260448101839052606490fd5b60246040517fec442f0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b60246040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260006004820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108025760010190565b60ff6005541661346e57565b60046040517fd93c0665000000000000000000000000000000000000000000000000000000008152fd5b1561349f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f536574746c656d656e7420646f6573206e6f74206578697374000000000000006044820152fd5b1561350457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f536574746c656d656e74206e6f742070656e64696e67000000000000000000006044820152fd5b1561356957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f446973707574652077696e646f772065787069726564000000000000000000006044820152fd5b906135d181612e27565b7fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff000000000000000000000000000000000000000083549260a01b16911617905556fea264697066735822122080a9d5acbdcb97f17e01b55938d3184bd8cf0c16b651b924694bb61f0b7f48b564736f6c634300081400332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "opcodes": "PUSH1 0x80 CALLVALUE PUSH3 0x458 JUMPI PUSH3 0x3E1D SWAP1 PUSH1 0x1F NOT SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x1F CODESIZE DUP6 SWAP1 SUB DUP2 DUP2 ADD DUP6 AND DUP5 ADD SWAP1 DUP4 DUP3 GT DUP6 DUP4 LT OR PUSH3 0x45D JUMPI DUP1 DUP6 SWAP2 PUSH1 0x40 SWAP9 DUP10 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0x458 JUMPI DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP5 SWAP1 DUP6 DUP2 SUB PUSH3 0x458 JUMPI PUSH1 0x20 DUP1 SWAP6 ADD MLOAD SWAP4 PUSH3 0x6E PUSH3 0x473 JUMP JUMPDEST SWAP1 PUSH1 0x18 DUP3 MSTORE PUSH32 0x47616D6544696E20536574746C656D656E7420546F6B656E0000000000000000 DUP8 DUP4 ADD MSTORE PUSH3 0xA2 PUSH3 0x473 JUMP JUMPDEST SWAP4 PUSH1 0x4 SWAP6 DUP7 DUP7 MSTORE PUSH4 0x47444953 PUSH1 0xE0 SHL DUP10 DUP8 ADD MSTORE DUP4 MLOAD SWAP2 DUP4 DUP4 GT PUSH3 0x34F JUMPI PUSH1 0x3 SWAP3 DUP4 SLOAD SWAP6 PUSH1 0x1 SWAP7 DUP8 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x44D JUMPI JUMPDEST DUP14 DUP3 LT EQ PUSH3 0x438 JUMPI SWAP1 DUP13 DUP3 DUP7 DUP6 SWAP5 GT PUSH3 0x3DF JUMPI JUMPDEST POP POP DUP13 SWAP1 DUP6 DUP4 GT PUSH1 0x1 EQ PUSH3 0x370 JUMPI PUSH1 0x0 SWAP3 PUSH3 0x364 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP7 SHL SHR NOT AND SWAP1 DUP7 SHL OR DUP4 SSTORE JUMPDEST DUP7 MLOAD SWAP4 DUP5 GT PUSH3 0x34F JUMPI DUP8 SLOAD DUP6 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x344 JUMPI JUMPDEST DUP12 DUP3 LT EQ PUSH3 0x32F JUMPI DUP3 DUP2 GT PUSH3 0x2E4 JUMPI JUMPDEST POP DUP10 SWAP2 DUP5 GT PUSH1 0x1 EQ PUSH3 0x272 JUMPI POP SWAP1 DUP3 SWAP2 PUSH3 0x1C3 SWAP7 PUSH1 0x0 SWAP4 PUSH3 0x266 JUMPI JUMPDEST POP POP DUP3 DUP5 SHL SWAP3 PUSH1 0x0 NOT SWAP2 SHL SHR NOT AND OR DUP5 SSTORE JUMPDEST PUSH1 0x7 SSTORE PUSH7 0x38D7EA4C68000 PUSH1 0xB SSTORE PUSH7 0x2386F26FC10000 PUSH1 0xC SSTORE PUSH3 0x198 DUP2 PUSH3 0x493 JUMP JUMPDEST POP PUSH3 0x1A4 DUP2 PUSH3 0x514 JUMP JUMPDEST POP PUSH3 0x1B0 DUP2 PUSH3 0x5B7 JUMP JUMPDEST POP PUSH3 0x1BC DUP2 PUSH3 0x655 JUMP JUMPDEST POP PUSH3 0x6F3 JUMP JUMPDEST POP DUP4 ISZERO PUSH3 0x24F JUMPI PUSH3 0x1D5 PUSH3 0x791 JUMP JUMPDEST PUSH3 0x1DF PUSH3 0x791 JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 DUP3 DUP3 ADD DUP1 SWAP3 GT PUSH3 0x23A JUMPI POP PUSH1 0x2 SSTORE PUSH1 0x0 DUP4 DUP2 MSTORE DUP1 DUP4 MSTORE DUP5 DUP2 KECCAK256 DUP1 SLOAD DUP4 ADD SWAP1 SSTORE DUP5 MLOAD SWAP2 DUP3 MSTORE SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG3 MLOAD PUSH2 0x364C SWAP1 DUP2 PUSH3 0x7B1 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x11 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x0 DUP7 MLOAD SWAP2 PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP4 MSTORE DUP3 ADD MSTORE REVERT JUMPDEST ADD MLOAD SWAP2 POP CODESIZE DUP1 PUSH3 0x162 JUMP JUMPDEST DUP4 SWAP5 SWAP6 SWAP7 SWAP4 AND SWAP3 DUP8 PUSH1 0x0 MSTORE DUP10 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 JUMPDEST DUP12 DUP3 DUP3 LT PUSH3 0x2CF JUMPI POP POP SWAP2 DUP6 SWAP4 SWAP2 DUP8 SWAP7 PUSH3 0x1C3 SWAP10 SWAP9 SWAP7 SWAP5 LT PUSH3 0x2B4 JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD DUP5 SSTORE PUSH3 0x174 JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH1 0x0 NOT SWAP3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 DUP1 PUSH3 0x2A5 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP8 SSTORE SWAP6 DUP9 ADD SWAP6 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x285 JUMP JUMPDEST DUP9 PUSH1 0x0 MSTORE DUP11 PUSH1 0x0 KECCAK256 DUP4 DUP1 DUP8 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP14 DUP9 LT PUSH3 0x325 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 DUP7 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH3 0x318 JUMPI POP POP PUSH3 0x143 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP7 SWAP1 PUSH3 0x308 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x2FF JUMP JUMPDEST PUSH1 0x22 DUP10 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x131 JUMP JUMPDEST PUSH1 0x41 DUP9 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x105 JUMP JUMPDEST SWAP1 DUP14 SWAP2 DUP6 DUP11 SWAP6 AND DUP9 PUSH1 0x0 MSTORE DUP4 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH3 0x3BD JUMPI POP POP DUP5 GT PUSH3 0x3A4 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP4 SSTORE PUSH3 0x117 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP9 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x396 JUMP JUMPDEST SWAP2 SWAP3 SWAP4 SWAP6 SWAP7 DUP3 SWAP2 SWAP6 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 DUP16 SWAP2 DUP12 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 PUSH3 0x384 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 POP DUP7 PUSH1 0x0 MSTORE DUP6 DUP3 PUSH1 0x0 KECCAK256 SWAP2 DUP2 DUP7 ADD PUSH1 0x5 SHR DUP4 ADD SWAP4 DUP7 LT PUSH3 0x42E JUMPI JUMPDEST SWAP2 DUP11 SWAP2 DUP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x41E JUMPI POP DUP15 SWAP2 POP PUSH3 0xED JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP6 SWAP5 POP DUP11 SWAP2 ADD PUSH3 0x40C JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x3FE JUMP JUMPDEST PUSH1 0x22 DUP12 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0xD7 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x45D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x54CDD369E4E8A8515E52CA72EC816C2101831AD1F18BF44102ED171459C9B4F8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND PUSH3 0x510 JUMPI DUP2 DUP1 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP2 DUP4 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE CALLER SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x3DFD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x44017833178CB959064128715F4ACE9A64BBFC45712D4670FCACE3E0C4A1693B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH32 0x300F9AE985DC711960F7A4D1DD013F9C19ECF40BFF149522AB7523B2187A3846 SWAP1 PUSH1 0xFF AND PUSH3 0x5B2 JUMPI DUP1 DUP4 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x3DFD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x866532DF3C7B8A8304A854A94071EFE99D9F2C853D9869138B5FBC8A8598B937 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH32 0x52BA824BFABC2BCFCDF7F0EDBB486EBB05E1836C90E78047EFEB949990F72E5F SWAP1 PUSH1 0xFF AND PUSH3 0x5B2 JUMPI DUP1 DUP4 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x3DFD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0xC05ECB62B3DA283F41A58BFABB0641C07F50E632BC46342D8A4C0CC10B5006FF PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH32 0x7B8BB8356A3F32F5C111FF23F050D97F08988E0883529EA7BFF3B918887A6E0E SWAP1 PUSH1 0xFF AND PUSH3 0x5B2 JUMPI DUP1 DUP4 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x3DFD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x7ACA5D7F7C0D5C6C775E2A7E40239A4D6963361B3DF3B07DF46432786460EB57 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH32 0xBF233DD2AAFEB4D50879C4AA5C81E96D92F6E6945C906A58F9F2D1C1631B4B26 SWAP1 PUSH1 0xFF AND PUSH3 0x5B2 JUMPI DUP1 DUP4 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x3DFD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x5 SLOAD AND PUSH3 0x79E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1D JUMPI JUMPDEST POP CALLDATASIZE ISZERO PUSH2 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1FFC9A7 EQ PUSH2 0x2B66 JUMPI POP DUP1 PUSH4 0x68D04D0 EQ PUSH2 0x2A09 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2945 JUMPI DUP1 PUSH4 0x8DF7DC8 EQ PUSH2 0x289F JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x27EE JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x27B2 JUMPI DUP1 PUSH4 0x20DF4359 EQ PUSH2 0x2759 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x25D4 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2587 JUMPI DUP1 PUSH4 0x267F2098 EQ PUSH2 0x20E8 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x208B JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2051 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1FC7 JUMPI DUP1 PUSH4 0x3C0A6E38 EQ PUSH2 0x1F8B JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1ECD JUMPI DUP1 PUSH4 0x427AC0CA EQ PUSH2 0x114C JUMPI DUP1 PUSH4 0x43B255AC EQ PUSH2 0x1D5A JUMPI DUP1 PUSH4 0x4C582380 EQ PUSH2 0x1C9A JUMPI DUP1 PUSH4 0x564A565D EQ PUSH2 0x1C2C JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x1BEB JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1B86 JUMPI DUP1 PUSH4 0x76E8A88B EQ PUSH2 0x1B05 JUMPI DUP1 PUSH4 0x7D1D7FB8 EQ PUSH2 0x1AC9 JUMPI DUP1 PUSH4 0x84536017 EQ PUSH2 0x1A71 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x19DB JUMPI DUP1 PUSH4 0x84B971A5 EQ PUSH2 0x199F JUMPI DUP1 PUSH4 0x88DAE6A8 EQ PUSH2 0x1963 JUMPI DUP1 PUSH4 0x899C45DA EQ PUSH2 0x18F1 JUMPI DUP1 PUSH4 0x917BB998 EQ PUSH2 0x1810 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x1797 JUMPI DUP1 PUSH4 0x933367A8 EQ PUSH2 0x1754 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1636 JUMPI DUP1 PUSH4 0x9DE2E9D7 EQ PUSH2 0x15C4 JUMPI DUP1 PUSH4 0x9E924EB5 EQ PUSH2 0x14BA JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1480 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1431 JUMPI DUP1 PUSH4 0xB5BFDDEA EQ PUSH2 0x13D8 JUMPI DUP1 PUSH4 0xB9CE896B EQ PUSH2 0x139C JUMPI DUP1 PUSH4 0xBA9CF01D EQ PUSH2 0x1343 JUMPI DUP1 PUSH4 0xBFCB7040 EQ PUSH2 0x1264 JUMPI DUP1 PUSH4 0xBFE42A37 EQ PUSH2 0x120B JUMPI DUP1 PUSH4 0xC4FC45A8 EQ PUSH2 0x114C JUMPI DUP1 PUSH4 0xC5E4CCC4 EQ PUSH2 0x1110 JUMPI DUP1 PUSH4 0xD0B1149C EQ PUSH2 0xB4A JUMPI DUP1 PUSH4 0xD1D50FE6 EQ PUSH2 0x464 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x407 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xE3A96CBD EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0xF585DC57 EQ PUSH2 0x2A4 JUMPI PUSH4 0xFC1E29B6 EQ PUSH2 0x250 JUMPI CODESIZE PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH3 0x3F480 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x386 PUSH1 0x1 DUP4 ADD SLOAD SWAP2 PUSH1 0x3 DUP5 ADD SLOAD SWAP1 PUSH1 0x4 DUP6 ADD SLOAD SWAP1 PUSH2 0x34E PUSH1 0x5 PUSH2 0x347 PUSH1 0x2 DUP10 ADD PUSH2 0x2D62 JUMP JUMPDEST SWAP8 ADD PUSH2 0x2D62 JUMP JUMPDEST SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 PUSH1 0xFF DUP6 DUP8 PUSH1 0x8 SHR AND SWAP7 AND SWAP5 PUSH1 0xFF DUP4 PUSH1 0xA0 SHR AND SWAP3 AND SWAP1 DUP10 PUSH2 0x2F6D JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x3C1 PUSH2 0x2C22 JUMP JUMPDEST PUSH2 0x3C9 PUSH2 0x2C45 JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1B PUSH1 0x4 CALLDATALOAD PUSH2 0x444 PUSH2 0x2C45 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH2 0x45F PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x316F JUMP JUMPDEST PUSH2 0x3241 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x80 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x49B PUSH2 0x2C22 JUMP JUMPDEST PUSH1 0x44 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x29F JUMPI PUSH2 0x4BE SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2EF8 JUMP JUMPDEST SWAP3 PUSH2 0x4C7 PUSH2 0x3113 JUMP JUMPDEST PUSH2 0x4CF PUSH2 0x3462 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x7 SLOAD EQ PUSH2 0xB20 JUMPI PUSH1 0x2 PUSH1 0x7 SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO PUSH2 0xAC2 JUMPI PUSH1 0x24 CALLDATALOAD ISZERO PUSH2 0xA64 JUMPI PUSH10 0xD3C21BCECCEDA1000000 PUSH1 0x24 CALLDATALOAD GT PUSH2 0xA06 JUMPI DUP4 MLOAD ISZERO PUSH2 0x9A8 JUMPI PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x546 PUSH1 0x20 DUP3 DUP9 MLOAD PUSH2 0x539 DUP2 DUP8 DUP6 DUP14 ADD PUSH2 0x2C68 JUMP JUMPDEST DUP2 ADD SUB DUP1 DUP5 MSTORE ADD DUP3 PUSH2 0x2D21 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x94A JUMPI POP PUSH2 0x56A PUSH1 0x8 SLOAD PUSH2 0x3435 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x8 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP3 DUP3 SSTORE PUSH1 0x1 DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 CALLER DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x2 DUP4 ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x3 DUP4 ADD SSTORE TIMESTAMP PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0x5 DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP2 SLOAD AND SWAP1 SSTORE DUP5 MLOAD SWAP1 DUP2 GT PUSH2 0x7D3 JUMPI PUSH2 0x620 PUSH1 0x6 DUP4 ADD SLOAD PUSH2 0x2CCE JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x903 JUMPI JUMPDEST POP DUP1 PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x83C JUMPI PUSH1 0x0 SWAP2 PUSH2 0x831 JUMPI JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x6 DUP3 ADD SSTORE JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH1 0x7 DUP3 ADD SSTORE PUSH3 0x3F480 TIMESTAMP ADD SWAP1 DUP2 TIMESTAMP GT PUSH2 0x802 JUMPI PUSH1 0x8 ADD SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x7D3 JUMPI PUSH2 0x6D4 SWAP2 PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x2FDA JUMP JUMPDEST DUP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP4 SHL SWAP3 SHL NOT AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x723 PUSH1 0x20 DUP3 DUP8 MLOAD PUSH2 0x539 DUP2 DUP8 DUP6 DUP13 ADD PUSH2 0x2C68 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x767 PUSH1 0x9 SLOAD PUSH2 0x3435 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH32 0x4C38254F7B8B72B1565C14AD4825E3BE334F5CDF32B2BDB7560016407004F051 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x7BD PUSH1 0x40 MLOAD SWAP6 PUSH1 0x24 CALLDATALOAD DUP8 MSTORE PUSH1 0x60 PUSH1 0x20 DUP9 ADD MSTORE PUSH1 0x60 DUP8 ADD SWAP1 PUSH2 0x2C8B JUMP JUMPDEST SWAP4 TIMESTAMP PUSH1 0x40 DUP8 ADD MSTORE AND SWAP4 DUP1 CALLER SWAP5 SUB SWAP1 LOG4 PUSH1 0x1 PUSH1 0x7 SSTORE STOP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP DUP6 ADD MLOAD DUP7 PUSH2 0x640 JUMP JUMPDEST SWAP2 POP PUSH1 0x6 DUP4 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP3 JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 AND DUP5 LT PUSH2 0x8EB JUMPI PUSH1 0x1 SWAP4 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 AND LT PUSH2 0x8B4 JUMPI JUMPDEST POP POP DUP2 SHL ADD PUSH1 0x6 DUP3 ADD SSTORE PUSH2 0x674 JUMP JUMPDEST DUP8 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP7 DUP1 PUSH2 0x8A5 JUMP JUMPDEST DUP8 DUP2 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x84E JUMP JUMPDEST PUSH1 0x6 DUP4 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP5 LT PUSH2 0x943 JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x937 JUMPI POP POP PUSH2 0x629 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x921 JUMP JUMPDEST POP DUP1 PUSH2 0x921 JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH32 0x4C33207472616E73616374696F6E20616C72656164792070726F636573736564 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH32 0x496E76616C6964204C33207472616E73616374696F6E20686173680000000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH32 0x416D6F756E742065786365656473206D6178696D756D00000000000000000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH32 0x416D6F756E74206D7573742062652067726561746572207468616E2030000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH32 0x496E76616C696420726563697069656E74000000000000000000000000000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x29F JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x44 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x29F JUMPI PUSH2 0xBA4 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2EF8 JUMP JUMPDEST SWAP1 PUSH2 0xBAD PUSH2 0x3462 JUMP JUMPDEST PUSH1 0xC SLOAD CALLVALUE LT PUSH2 0x10B2 JUMPI DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 PUSH1 0xD DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH2 0xBD3 DUP3 SLOAD ISZERO ISZERO PUSH2 0x3498 JUMP JUMPDEST PUSH1 0x5 DUP3 ADD DUP1 SLOAD PUSH2 0xBEF PUSH1 0xFF DUP3 AND PUSH2 0xBE9 DUP2 PUSH2 0x2E27 JUMP JUMPDEST ISZERO PUSH2 0x34FD JUMP JUMPDEST PUSH2 0xBFF PUSH1 0x8 DUP6 ADD SLOAD TIMESTAMP GT ISZERO PUSH2 0x3562 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x2 DUP6 ADD SLOAD AND CALLER EQ DUP1 ISZERO PUSH2 0x1070 JUMPI JUMPDEST ISZERO PUSH2 0x1012 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x2 SWAP2 AND OR SWAP1 SSTORE PUSH1 0xA PUSH1 0x9 DUP4 ADD SWAP3 PUSH2 0xC8A DUP9 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP6 CALLER DUP8 DUP3 SLOAD AND OR DUP2 SSTORE PUSH2 0x35C7 JUMP JUMPDEST ADD SWAP1 DUP5 MLOAD SWAP2 DUP2 DUP4 GT PUSH2 0x7D3 JUMPI PUSH2 0xCA0 DUP2 SLOAD PUSH2 0x2CCE JUMP JUMPDEST SWAP3 PUSH1 0x1F SWAP4 DUP5 DUP2 GT PUSH2 0xFCF JUMPI JUMPDEST POP DUP1 DUP7 DUP6 DUP3 GT PUSH1 0x1 EQ PUSH2 0xF31 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xF26 JUMPI JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST PUSH2 0xCFD PUSH1 0xA SLOAD PUSH2 0x3435 JUMP JUMPDEST PUSH1 0xA SSTORE DUP6 PUSH1 0x0 MSTORE PUSH1 0xE DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP3 DUP7 DUP5 SSTORE PUSH2 0xD29 DUP9 PUSH1 0x1 SWAP3 DUP4 DUP8 ADD SWAP1 CALLER SWAP1 DUP3 SLOAD AND OR DUP2 SSTORE PUSH2 0x35C7 JUMP JUMPDEST PUSH1 0x2 DUP5 ADD SWAP3 DUP7 MLOAD SWAP3 DUP4 GT PUSH2 0x7D3 JUMPI PUSH2 0xD41 DUP5 SLOAD PUSH2 0x2CCE JUMP JUMPDEST DUP2 DUP2 GT PUSH2 0xEE0 JUMPI JUMPDEST POP DUP6 SWAP1 DUP4 GT PUSH1 0x1 EQ PUSH2 0xE18 JUMPI SWAP3 DUP3 PUSH32 0xC5A6BD89289814765F8743687EA51D3BB3DEB2C8F1CFF09B1A479FB94166652C SWAP8 SWAP6 SWAP3 DUP2 PUSH2 0xDDE SWAP9 SWAP6 PUSH1 0x60 SWAP8 PUSH1 0x0 SWAP3 PUSH2 0xDED JUMPI JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP3 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x3 TIMESTAMP SWAP2 ADD SSTORE PUSH1 0x40 MLOAD SWAP7 PUSH2 0xDCF DUP2 PUSH2 0x2E27 JUMP JUMPDEST DUP8 MSTORE DUP7 ADD MSTORE PUSH1 0x60 DUP6 ADD SWAP1 PUSH2 0x2C8B JUMP JUMPDEST SWAP3 TIMESTAMP PUSH1 0x40 DUP3 ADD MSTORE DUP1 CALLER SWAP5 SUB SWAP1 LOG3 STOP JUMPDEST DUP10 ADD MLOAD SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0xD8C JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 SWAP3 SWAP4 AND SWAP1 DUP5 PUSH1 0x0 MSTORE DUP7 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xECB JUMPI POP SWAP3 PUSH1 0x60 SWAP6 SWAP3 PUSH2 0xDDE SWAP9 SWAP6 SWAP3 DUP3 PUSH32 0xC5A6BD89289814765F8743687EA51D3BB3DEB2C8F1CFF09B1A479FB94166652C SWAP12 SWAP10 SWAP7 LT PUSH2 0xE94 JUMPI JUMPDEST POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0xDBC JUMP JUMPDEST DUP9 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP12 DUP1 PUSH2 0xE88 JUMP JUMPDEST DUP10 DUP4 ADD MLOAD DUP5 SSTORE SWAP3 DUP6 ADD SWAP3 SWAP2 DUP9 ADD SWAP2 DUP9 ADD PUSH2 0xE4A JUMP JUMPDEST DUP5 PUSH1 0x0 MSTORE DUP7 PUSH1 0x0 KECCAK256 DUP3 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP10 DUP8 LT PUSH2 0xF1D JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 DUP4 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH2 0xF11 JUMPI POP POP PUSH2 0xD49 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP4 SWAP1 PUSH2 0xF03 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0xEFA JUMP JUMPDEST SWAP1 POP DUP8 ADD MLOAD DUP11 PUSH2 0xCC1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE DUP9 DUP2 KECCAK256 SWAP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 JUMPDEST DUP10 DUP12 DUP4 DUP4 LT PUSH2 0xFBA JUMPI POP POP POP SWAP1 DUP4 PUSH1 0x1 SWAP5 SWAP4 SWAP3 LT PUSH2 0xF83 JUMPI JUMPDEST POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0xCF2 JUMP JUMPDEST DUP10 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP11 DUP1 PUSH2 0xF77 JUMP JUMPDEST DUP5 ADD MLOAD DUP6 SSTORE PUSH1 0x1 SWAP1 SWAP5 ADD SWAP4 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0xF5E JUMP JUMPDEST DUP3 PUSH1 0x0 MSTORE DUP7 PUSH1 0x0 KECCAK256 DUP6 DUP1 DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP10 DUP6 LT PUSH2 0x1009 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0xFFD JUMPI POP PUSH2 0xCAC JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xFF0 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0xFE9 JUMP JUMPDEST PUSH1 0x64 DUP6 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617574686F72697A656420746F206469737075746500000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH32 0x7B8BB8356A3F32F5C111FF23F050D97F08988E0883529EA7BFF3B918887A6E0E PUSH1 0x0 MSTORE PUSH1 0x6 DUP6 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP6 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0xC23 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742064697370757465206665650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0xA SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 PUSH2 0x1199 PUSH2 0x2C22 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH2 0x386 DUP3 SLOAD SWAP3 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 PUSH1 0x3 PUSH1 0x2 DUP3 ADD SLOAD SWAP2 ADD SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP6 PUSH1 0xFF DUP3 PUSH1 0xA0 SHR AND SWAP2 AND DUP7 SWAP2 SWAP3 PUSH1 0x80 SWAP4 SWAP7 SWAP6 SWAP5 SWAP2 SWAP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 DUP6 ADD SWAP9 AND DUP5 MSTORE ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x7B8BB8356A3F32F5C111FF23F050D97F08988E0883529EA7BFF3B918887A6E0E DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x12B1 PUSH2 0x2C22 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0xF DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP1 DUP2 DUP4 DUP3 SLOAD SWAP2 DUP3 DUP2 MSTORE ADD SWAP1 DUP2 SWAP3 PUSH1 0x0 MSTORE DUP5 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 JUMPDEST DUP7 DUP3 DUP3 LT PUSH2 0x132F JUMPI DUP7 DUP7 PUSH2 0x12EF DUP3 DUP9 SUB DUP4 PUSH2 0x2D21 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP2 DUP5 ADD SWAP1 DUP3 DUP6 MSTORE MLOAD DUP1 SWAP2 MSTORE PUSH1 0x40 DUP5 ADD SWAP3 SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x1318 JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x1309 JUMP JUMPDEST DUP4 SLOAD DUP6 MSTORE SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x12D9 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x300F9AE985DC711960F7A4D1DD013F9C19ECF40BFF149522AB7523B2187A3846 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0xC SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x52BA824BFABC2BCFCDF7F0EDBB486EBB05E1836C90E78047EFEB949990F72E5F DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1475 PUSH2 0x146B PUSH2 0x2C22 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x32E4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x14F4 PUSH2 0x3113 JUMP JUMPDEST PUSH2 0x14FC PUSH2 0x3462 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH2 0x1595 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1519 DUP2 SLOAD ISZERO ISZERO PUSH2 0x3498 JUMP JUMPDEST PUSH1 0x5 DUP2 ADD PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 SLOAD PUSH2 0x1552 PUSH1 0xFF DUP3 AND PUSH2 0xBE9 DUP2 PUSH2 0x2E27 JUMP JUMPDEST PUSH2 0x1562 PUSH1 0x8 DUP7 ADD SLOAD TIMESTAMP GT ISZERO PUSH2 0x3562 JUMP JUMPDEST AND OR SWAP1 SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 PUSH1 0x3 DUP3 PUSH1 0x1 DUP4 ADD SLOAD AND SWAP3 PUSH1 0x2 DUP4 ADD SLOAD AND SWAP2 ADD SLOAD SWAP2 PUSH2 0x32E4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 TIMESTAMP DUP3 MSTORE PUSH32 0x1A87470A87E2FFF176D778A6E7F91D53B96B4CBB4D856F40ABC582586D51850A PUSH1 0x20 CALLER SWAP4 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH32 0xE8FC23E21608AA8E92FAEE11AF5686B6AA7531796F68F2F943BB0D893C4312C9 PUSH1 0x40 PUSH1 0x4 CALLDATALOAD PUSH2 0x1621 PUSH2 0x30D9 JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 DUP1 PUSH1 0xC SSTORE DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x4 SLOAD PUSH2 0x1676 DUP2 PUSH2 0x2CCE JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x170F JUMPI POP PUSH1 0x1 EQ PUSH2 0x16B4 JUMPI JUMPDEST PUSH2 0x386 DUP5 PUSH2 0x16A0 DUP2 DUP7 SUB DUP3 PUSH2 0x2D21 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x2C8B JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP3 POP PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP5 LT PUSH2 0x16F7 JUMPI POP POP POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x16A0 DUP3 PUSH2 0x1690 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x16DF JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x20 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 ISZERO ISZERO PUSH1 0x5 SHL DUP6 ADD SWAP1 SWAP3 ADD SWAP3 POP PUSH2 0x16A0 SWAP2 POP DUP4 SWAP1 POP PUSH2 0x1690 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH10 0xD3C21BCECCEDA1000000 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x17CE PUSH2 0x2C45 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x0 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x44 PUSH2 0x1862 PUSH2 0x2C22 JUMP JUMPDEST PUSH2 0x186A PUSH2 0x307D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP5 MSTORE CALLER PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x24 DUP6 ADD MSTORE AND GAS CALL DUP1 ISZERO PUSH2 0x18E5 JUMPI PUSH2 0x18B2 JUMPI STOP JUMPDEST PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x18DD JUMPI JUMPDEST DUP2 PUSH2 0x18CA PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2D21 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x29F JUMPI MLOAD DUP1 ISZERO ISZERO SUB PUSH2 0x29F JUMPI STOP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x18BD JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH32 0x9351BE7C0F6091E3A280467D38E8ECFD5A4529968CDFAEE0E0DBCCEAEE6765C7 PUSH1 0x40 PUSH1 0x4 CALLDATALOAD PUSH2 0x194E PUSH2 0x30D9 JUMP JUMPDEST PUSH1 0xB SLOAD SWAP1 DUP1 PUSH1 0xB SSTORE DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1A12 PUSH2 0x307D JUMP JUMPDEST PUSH2 0x1A1A PUSH2 0x3462 JUMP JUMPDEST PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x5 SLOAD AND OR PUSH1 0x5 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1AA8 PUSH2 0x307D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 SELFBALANCE DUP2 DUP2 ISZERO PUSH2 0x1AC0 JUMPI JUMPDEST CALLER SWAP1 CALL ISZERO PUSH2 0x18E5 JUMPI STOP JUMPDEST POP PUSH2 0x8FC PUSH2 0x1AB6 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0xB SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1B3C PUSH2 0x2C22 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x29F JUMPI PUSH1 0x20 SWAP2 PUSH2 0x1B78 SWAP2 PUSH2 0x2FDA JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH1 0x3 SHL SHR DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x1BD2 PUSH2 0x2C22 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x5 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x386 PUSH1 0x1 DUP4 ADD SLOAD SWAP2 PUSH2 0x1C82 PUSH1 0x2 DUP6 ADD PUSH2 0x2D62 JUMP JUMPDEST SWAP4 PUSH1 0x3 DUP2 ADD SLOAD SWAP2 PUSH2 0x34E PUSH1 0x5 PUSH1 0x4 DUP5 ADD SLOAD SWAP4 ADD PUSH2 0x2D62 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x386 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 PUSH1 0x1 DUP6 ADD SLOAD AND SWAP4 DUP4 PUSH1 0x2 DUP3 ADD SLOAD AND SWAP2 PUSH1 0x3 DUP3 ADD SLOAD SWAP2 PUSH1 0x4 DUP2 ADD SLOAD SWAP1 PUSH1 0xFF PUSH1 0x5 DUP3 ADD SLOAD AND SWAP1 PUSH1 0x7 DUP2 ADD SLOAD SWAP2 PUSH1 0x8 DUP3 ADD SLOAD SWAP4 PUSH1 0x9 DUP4 ADD SLOAD SWAP7 PUSH2 0x1D43 PUSH1 0xA PUSH2 0x1D3C PUSH1 0x6 DUP8 ADD PUSH2 0x2D62 JUMP JUMPDEST SWAP6 ADD PUSH2 0x2D62 JUMP JUMPDEST SWAP9 PUSH1 0x40 MLOAD SWAP13 DUP14 SWAP13 PUSH1 0xFF DUP12 PUSH1 0xA0 SHR AND SWAP11 AND SWAP9 DUP14 PUSH2 0x2E60 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0xA0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1D91 PUSH2 0x2C22 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0x29F JUMPI PUSH1 0x44 CALLDATALOAD PUSH1 0x64 CALLDATALOAD SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x84 CALLDATALOAD SWAP5 PUSH2 0x1DC6 PUSH2 0x3021 JUMP JUMPDEST AND SWAP4 DUP5 ISZERO PUSH2 0x1E6F JUMPI PUSH32 0x762B38F99548D8913199A63AE95B09259E584B25129CA98EE5317F088D487BF5 SWAP4 PUSH1 0x80 SWAP4 DUP7 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE DUP3 PUSH1 0x3 PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP11 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000 PUSH21 0xFF0000000000000000000000000000000000000000 DUP11 PUSH1 0xA0 SHL AND SWAP3 AND OR OR DUP2 SSTORE DUP4 PUSH1 0x1 DUP3 ADD SSTORE DUP5 PUSH1 0x2 DUP3 ADD SSTORE ADD SSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE LOG2 STOP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420627269646765206164647265737300000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1F04 PUSH2 0x307D JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH2 0x1F61 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x5 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x8DFC202B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH3 0x93A80 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1FFE PUSH2 0x2C45 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SUB PUSH2 0x2027 JUMPI PUSH2 0x1B SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x3241 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x6697B23200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1B PUSH1 0x4 CALLDATALOAD PUSH2 0x20C8 PUSH2 0x2C45 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH2 0x20E3 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x316F JUMP JUMPDEST PUSH2 0x3195 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x29F JUMPI PUSH2 0x213B SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2EF8 JUMP JUMPDEST SWAP2 PUSH1 0x44 CALLDATALOAD SWAP3 DUP4 ISZERO ISZERO DUP5 SUB PUSH2 0x29F JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xC05ECB62B3DA283F41A58BFABB0641C07F50E632BC46342D8A4C0CC10B5006FF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP5 SWAP1 PUSH32 0x7B8BB8356A3F32F5C111FF23F050D97F08988E0883529EA7BFF3B918887A6E0E SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x2550 JUMPI POP PUSH2 0x21B1 PUSH2 0x3462 JUMP JUMPDEST DUP3 PUSH1 0x0 MSTORE PUSH1 0xD DUP6 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xE DUP7 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH2 0x21D4 DUP2 SLOAD ISZERO ISZERO PUSH2 0x3498 JUMP JUMPDEST PUSH1 0x5 DUP2 ADD SWAP3 PUSH1 0x2 PUSH1 0xFF DUP6 SLOAD AND PUSH2 0x21E9 DUP2 PUSH2 0x2E27 JUMP JUMPDEST SUB PUSH2 0x24F2 JUMPI PUSH1 0x4 DUP4 ADD SWAP3 DUP4 SLOAD SWAP4 PUSH1 0xFF DUP6 AND PUSH2 0x2494 JUMPI SWAP1 PUSH1 0x5 SWAP2 PUSH1 0x1 DUP1 SWAP7 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000 PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 CALLER PUSH1 0x8 SHL AND SWAP2 AND OR OR SWAP1 SSTORE ADD DUP6 MLOAD SWAP8 DUP9 GT PUSH2 0x7D3 JUMPI PUSH2 0x225C DUP2 SLOAD PUSH2 0x2CCE JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x244B JUMPI JUMPDEST POP DUP9 PUSH1 0x1F DUP10 GT PUSH1 0x1 EQ PUSH2 0x238C JUMPI SWAP8 DUP1 PUSH32 0xAF22C8B9970A1E934469D4910BA635081D805CF60A06F96C00D501BD87379663 SWAP9 SWAP10 PUSH1 0x0 SWAP2 PUSH2 0x2381 JUMPI JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP8 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST ISZERO PUSH2 0x2351 JUMPI DUP3 PUSH1 0x3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH2 0x232E SWAP6 SLOAD AND OR SWAP1 SSTORE PUSH1 0x3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP4 DUP4 ADD SLOAD AND SWAP3 PUSH1 0x2 DUP4 ADD SLOAD AND SWAP2 ADD SLOAD SWAP2 PUSH2 0x32E4 JUMP JUMPDEST PUSH2 0x2343 PUSH1 0x40 MLOAD SWAP2 PUSH1 0x40 DUP4 MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x2C8B JUMP JUMPDEST SWAP4 TIMESTAMP SWAP1 DUP3 ADD MSTORE DUP1 CALLER SWAP5 SUB SWAP1 LOG3 STOP JUMPDEST POP POP PUSH1 0x4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x232E JUMP JUMPDEST SWAP1 POP DUP8 ADD MLOAD DUP12 PUSH2 0x229F JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP10 AND SWAP1 DUP3 PUSH1 0x0 MSTORE DUP11 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST DUP13 DUP3 DUP3 LT PUSH2 0x2437 JUMPI POP POP SWAP2 DUP11 SWAP2 PUSH32 0xAF22C8B9970A1E934469D4910BA635081D805CF60A06F96C00D501BD87379663 SWAP11 SWAP12 DUP9 SWAP5 LT PUSH2 0x2400 JUMPI JUMPDEST POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x22CF JUMP JUMPDEST DUP10 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP12 DUP1 PUSH2 0x23F4 JUMP JUMPDEST DUP11 DUP5 ADD MLOAD DUP6 SSTORE SWAP4 DUP9 ADD SWAP4 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x23BC JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE DUP10 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP11 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP12 DUP12 LT PUSH2 0x248A JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 DUP6 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH2 0x247E JUMPI POP POP PUSH2 0x2265 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP6 SWAP1 PUSH2 0x2470 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x64 DUP11 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4469737075746520616C7265616479207265736F6C7665640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP9 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536574746C656D656E74206E6F74206469737075746564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x44 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH32 0xE2517D3F00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x260B PUSH2 0x2C22 JUMP JUMPDEST PUSH2 0x2613 PUSH2 0x2C45 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP3 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 LT PUSH2 0x267E JUMPI JUMPDEST POP PUSH2 0x1475 SWAP4 POP PUSH2 0x32E4 JUMP JUMPDEST DUP4 DUP6 LT PUSH2 0x271A JUMPI DUP1 ISZERO PUSH2 0x26E9 JUMPI CALLER ISZERO PUSH2 0x26B8 JUMPI PUSH2 0x1475 SWAP5 DUP5 SWAP2 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE DUP5 PUSH2 0x2673 JUMP JUMPDEST PUSH1 0x24 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x24 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0xBF233DD2AAFEB4D50879C4AA5C81E96D92F6E6945C906A58F9F2D1C1631B4B26 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x2825 PUSH2 0x2C22 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER ISZERO PUSH2 0x26E9 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 ISZERO PUSH2 0x26B8 JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x20 CALLER SWAP3 LOG3 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x386 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 PUSH1 0x1 DUP6 ADD SLOAD AND SWAP4 DUP4 PUSH1 0x2 DUP3 ADD SLOAD AND SWAP2 PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0xFF PUSH1 0x5 DUP6 ADD SLOAD AND PUSH2 0x2927 PUSH1 0x6 DUP7 ADD PUSH2 0x2D62 JUMP JUMPDEST SWAP1 PUSH1 0x7 DUP7 ADD SLOAD SWAP3 PUSH1 0x8 DUP8 ADD SLOAD SWAP5 PUSH2 0x1D43 PUSH1 0xA PUSH1 0x9 DUP11 ADD SLOAD SWAP10 ADD PUSH2 0x2D62 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x3 SLOAD PUSH2 0x2985 DUP2 PUSH2 0x2CCE JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x170F JUMPI POP PUSH1 0x1 EQ PUSH2 0x29AE JUMPI PUSH2 0x386 DUP5 PUSH2 0x16A0 DUP2 DUP7 SUB DUP3 PUSH2 0x2D21 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP3 POP PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP5 LT PUSH2 0x29F1 JUMPI POP POP POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x16A0 DUP3 PUSH2 0x1690 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x29D9 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x80 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x2A40 PUSH2 0x2C22 JUMP JUMPDEST PUSH2 0x2A48 PUSH2 0x2C45 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x64 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP1 SWAP2 SUB PUSH2 0x29F JUMPI PUSH2 0x2A75 PUSH2 0x3021 JUMP JUMPDEST PUSH2 0x2A7D PUSH2 0x3462 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF DUP2 SLOAD PUSH1 0xA0 SHR AND ISZERO PUSH2 0x2B08 JUMPI PUSH1 0x2 ADD SLOAD DUP3 GT PUSH2 0x2AAA JUMPI PUSH2 0x1B SWAP3 PUSH2 0x32E4 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416D6F756E74206578636565647320627269646765206C696D69740000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x427269646765206E6F7420616374697665000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND DUP1 SWAP3 SUB PUSH2 0x29F JUMPI DUP2 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 SWAP4 EQ SWAP1 DUP2 ISZERO PUSH2 0x2BF8 JUMPI JUMPDEST POP ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 SWAP2 POP EQ DUP4 PUSH2 0x2BF1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x29F JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x29F JUMPI JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x2C7B JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2C6B JUMP JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F PUSH1 0x20 SWAP4 PUSH2 0x2CC7 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP8 MSTORE DUP8 DUP1 DUP9 ADD SWAP2 ADD PUSH2 0x2C68 JUMP JUMPDEST ADD AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x2D17 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x2CE8 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x2CDD JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x7D3 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x2D76 DUP5 PUSH2 0x2CCE JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x2DE5 JUMPI POP PUSH1 0x1 EQ PUSH2 0x2DA2 JUMPI JUMPDEST POP POP PUSH2 0x2DA0 SWAP3 POP SUB DUP4 PUSH2 0x2D21 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x2DCD JUMPI POP POP PUSH2 0x2DA0 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x2D92 JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x2DB5 JUMP JUMPDEST SWAP1 POP PUSH2 0x2DA0 SWAP6 POP PUSH1 0x20 SWAP4 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 SWAP2 POP AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x2D92 JUMP JUMPDEST PUSH1 0x5 GT ISZERO PUSH2 0x2E31 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP9 SWAP5 SWAP1 SWAP4 PUSH2 0x2EF5 SWAP13 SWAP11 SWAP7 SWAP3 PUSH2 0x2EC5 SWAP6 SWAP13 SWAP10 SWAP13 SWAP9 SWAP5 SWAP9 DUP12 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP9 DUP10 DUP1 SWAP3 AND PUSH1 0x20 DUP14 ADD MSTORE AND PUSH1 0x40 DUP12 ADD MSTORE PUSH1 0x60 DUP11 ADD MSTORE PUSH1 0x80 DUP10 ADD MSTORE PUSH2 0x2EAF DUP2 PUSH2 0x2E27 JUMP JUMPDEST PUSH1 0xA0 DUP9 ADD MSTORE PUSH2 0x180 DUP1 PUSH1 0xC0 DUP10 ADD MSTORE DUP8 ADD SWAP1 PUSH2 0x2C8B JUMP JUMPDEST SWAP7 PUSH1 0xE0 DUP7 ADD MSTORE PUSH2 0x100 DUP6 ADD MSTORE AND PUSH2 0x120 DUP4 ADD MSTORE PUSH2 0x2EE1 DUP2 PUSH2 0x2E27 JUMP JUMPDEST PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x2C8B JUMP JUMPDEST SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x29F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x7D3 JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x2F4B PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND ADD DUP6 PUSH2 0x2D21 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x29F JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST SWAP5 SWAP7 SWAP3 SWAP4 PUSH2 0x2EF5 SWAP9 SWAP7 SWAP3 SWAP5 PUSH2 0x2FBA SWAP3 DUP8 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP7 AND PUSH1 0x20 DUP9 ADD MSTORE PUSH2 0x2FA4 DUP2 PUSH2 0x2E27 JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MSTORE PUSH2 0x100 DUP1 PUSH1 0x60 DUP9 ADD MSTORE DUP7 ADD SWAP1 PUSH2 0x2C8B JUMP JUMPDEST SWAP6 PUSH1 0x80 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0xA0 DUP5 ADD MSTORE AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x2C8B JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x2FF2 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x866532DF3C7B8A8304A854A94071EFE99D9F2C853D9869138B5FBC8A8598B937 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH32 0x52BA824BFABC2BCFCDF7F0EDBB486EBB05E1836C90E78047EFEB949990F72E5F SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x2550 JUMPI POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x7ACA5D7F7C0D5C6C775E2A7E40239A4D6963361B3DF3B07DF46432786460EB57 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH32 0xBF233DD2AAFEB4D50879C4AA5C81E96D92F6E6945C906A58F9F2D1C1631B4B26 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x2550 JUMPI POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x54CDD369E4E8A8515E52CA72EC816C2101831AD1F18BF44102ED171459C9B4F8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2550 JUMPI POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x44017833178CB959064128715F4ACE9A64BBFC45712D4670FCACE3E0C4A1693B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH32 0x300F9AE985DC711960F7A4D1DD013F9C19ECF40BFF149522AB7523B2187A3846 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x2550 JUMPI POP JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2550 JUMPI POP JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP5 KECCAK256 SWAP3 AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND ISZERO PUSH1 0x0 EQ PUSH2 0x323C JUMPI DUP1 DUP4 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP5 KECCAK256 SWAP3 AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH1 0x0 EQ PUSH2 0x323C JUMPI DUP1 DUP4 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND SWAP3 DUP4 ISZERO PUSH2 0x3404 JUMPI AND SWAP3 DUP4 ISZERO PUSH2 0x33D3 JUMPI PUSH2 0x3314 PUSH2 0x3462 JUMP JUMPDEST PUSH2 0x331C PUSH2 0x3462 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP4 DUP3 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD SWAP1 DUP4 DUP3 LT PUSH2 0x337B JUMPI POP SWAP2 PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x24 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x24 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x802 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x5 SLOAD AND PUSH2 0x346E JUMPI JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0xD93C066500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST ISZERO PUSH2 0x349F JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536574746C656D656E7420646F6573206E6F7420657869737400000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x3504 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536574746C656D656E74206E6F742070656E64696E6700000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x3569 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x446973707574652077696E646F77206578706972656400000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH2 0x35D1 DUP2 PUSH2 0x2E27 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH21 0xFF0000000000000000000000000000000000000000 DUP4 SLOAD SWAP3 PUSH1 0xA0 SHL AND SWAP2 AND OR SWAP1 SSTORE JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP1 0xA9 0xD5 0xAC 0xBD 0xCB SWAP8 CALL PUSH31 0x1B55938D3184BD8CF0C16B651B924694BB61F0B7F48B564736F6C63430008 EQ STOP CALLER 0x2F DUP8 DUP9 GT PUSH31 0x7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D00000000 ",
          "sourceMap": "550:17894:20:-:0;;;;;;-1:-1:-1;;550:17894:20;-1:-1:-1;;;;;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;550:17894:20;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;550:17894:20;;;;;;;;;;;;1648:13:5;550:17894:20;;;;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;;;;;;;;;;-1:-1:-1;550:17894:20;;;;-1:-1:-1;;;;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5127:40;550:17894;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;;;;;;;;2061:21:13;550:17894:20;2976:14;;550:17894;3040:13;;550:17894;4918:44;;;:::i;:::-;;4972:41;;;:::i;:::-;;5023:37;;;:::i;:::-;;5070:47;;;:::i;:::-;;5127:40;:::i;:::-;;7509:21:5;;7505:91;;1315:72:12;;:::i;:::-;;;:::i;:::-;6214:21:5;550:17894:20;;;;;;;;;;-1:-1:-1;6214:21:5;550:17894:20;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7064:25:5;;;550:17894:20;;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;;-1:-1:-1;550:17894:20;7505:91:5;550:17894:20;;-1:-1:-1;550:17894:20;;7553:32:5;;;;;;;;550:17894:20;7553:32:5;550:17894:20;;;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;-1:-1:-1;550:17894:20;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;;5127:40;550:17894;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;;-1:-1:-1;550:17894:20;;;;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;-1:-1:-1;550:17894:20;;-1:-1:-1;550:17894:20;;;;;;;;;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;;;-1:-1:-1;;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;;-1:-1:-1;550:17894:20;;;;;;;;;-1:-1:-1;550:17894:20;;;;;;-1:-1:-1;550:17894:20;;;;;-1:-1:-1;550:17894:20;;;;;;;;;-1:-1:-1;;;;;550:17894:20;;;;;;;;;;:::o;6179:316:1:-;-1:-1:-1;;;;;550:17894:20;;;;;;;;;;;;;;;;;;;;;;2954:6:1;550:17894:20;;;;;;;;;;;;;;;;;;;;;;735:10:11;6370:40:1;-1:-1:-1;;;;;;;;;;;6370:40:1;;;550:17894:20;6424:11:1;:::o;6272:217::-;6466:12;;:::o;6179:316::-;-1:-1:-1;;;;;550:17894:20;-1:-1:-1;550:17894:20;;;;;;;;;;-1:-1:-1;;550:17894:20;881:28;;550:17894;;;;;;;2954:6:1;550:17894:20;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;735:10:11;6370:40:1;;;550:17894:20;6424:11:1;:::o;6272:217::-;6466:12;;;:::o;6179:316::-;-1:-1:-1;;;;;550:17894:20;-1:-1:-1;550:17894:20;;;;;;;;;;-1:-1:-1;;550:17894:20;953:24;;550:17894;;;;;;;2954:6:1;550:17894:20;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;735:10:11;6370:40:1;;;550:17894:20;6424:11:1;:::o;6179:316::-;-1:-1:-1;;;;;550:17894:20;-1:-1:-1;550:17894:20;;;;;;;;;;-1:-1:-1;;550:17894:20;1031:34;;550:17894;;;;;;;2954:6:1;550:17894:20;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;735:10:11;6370:40:1;;;550:17894:20;6424:11:1;:::o;6179:316::-;-1:-1:-1;;;;;550:17894:20;-1:-1:-1;550:17894:20;;;;;;;;;;-1:-1:-1;;550:17894:20;1112:27;;550:17894;;;;;;;2954:6:1;550:17894:20;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;735:10:11;6370:40:1;;;550:17894:20;6424:11:1;:::o;1878:128:12:-;550:17894:20;1796:7:12;550:17894:20;;1939:61:12;;1878:128::o;1939:61::-;550:17894:20;;-1:-1:-1;;;1974:15:12;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "abi_decode_address": {
              "entryPoint": 11298,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "abi_decode_address_33605": {
              "entryPoint": 11333,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "abi_decode_string": {
              "entryPoint": 12024,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_address_bool_uint256_uint256_uint256": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_address_uint256_uint256": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_string": {
              "entryPoint": 11403,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_uint256_address_address_uint256_uint256_enum_SettlementStatus_string_bytes32_uint256_address_enum_DisputeReason_string": {
              "entryPoint": 11872,
              "id": null,
              "parameterSlots": 13,
              "returnSlots": 1
            },
            "abi_encode_uint256_address_enum_DisputeReason_string_uint256_bool_address_string": {
              "entryPoint": 12141,
              "id": null,
              "parameterSlots": 9,
              "returnSlots": 1
            },
            "copy_array_from_storage_to_memory_string": {
              "entryPoint": 11618,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 11368,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 11470,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "finalize_allocation": {
              "entryPoint": 11553,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "fun_checkRole": {
              "entryPoint": 12655,
              "id": 139,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "fun_checkRole_33607": {
              "entryPoint": 12321,
              "id": 139,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "fun_checkRole_33622": {
              "entryPoint": 12413,
              "id": 139,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "fun_checkRole_33631": {
              "entryPoint": 12505,
              "id": 139,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "fun_checkRole_33637": {
              "entryPoint": 12563,
              "id": 139,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "fun_grantRole": {
              "entryPoint": 12693,
              "id": 302,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "fun_requireNotPaused": {
              "entryPoint": 13410,
              "id": 1617,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "fun_revokeRole": {
              "entryPoint": 12865,
              "id": 340,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "fun_transfer": {
              "entryPoint": 13028,
              "id": 954,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "increment_uint256": {
              "entryPoint": 13365,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "require_helper_stringliteral": {
              "entryPoint": 13666,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "require_helper_stringliteral_5553": {
              "entryPoint": 13464,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "require_helper_stringliteral_a132": {
              "entryPoint": 13565,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "storage_array_index_access_uint256_dyn": {
              "entryPoint": 12250,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "update_storage_value_offsett_enum_DisputeReason_to_enum_DisputeReason": {
              "entryPoint": 13767,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "validator_assert_enum_SettlementStatus": {
              "entryPoint": 11815,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c90816301ffc9a714612b6657508063068d04d014612a0957806306fdde031461294557806308df7dc81461289f578063095ea7b3146127ee57806318160ddd146127b257806320df43591461275957806323b872dd146125d4578063248a9ca314612587578063267f2098146120e85780632f2ff15d1461208b578063313ce5671461205157806336568abe14611fc75780633c0a6e3814611f8b5780633f4ba83a14611ecd578063427ac0ca1461114c57806343b255ac14611d5a5780634c58238014611c9a578063564a565d14611c2c5780635c975abb14611beb57806370a0823114611b8657806376e8a88b14611b055780637d1d7fb814611ac95780638453601714611a715780638456cb59146119db57806384b971a51461199f57806388dae6a814611963578063899c45da146118f1578063917bb9981461181057806391d1485414611797578063933367a81461175457806395d89b41146116365780639de2e9d7146115c45780639e924eb5146114ba578063a217fddf14611480578063a9059cbb14611431578063b5bfddea146113d8578063b9ce896b1461139c578063ba9cf01d14611343578063bfcb704014611264578063bfe42a371461120b578063c4fc45a81461114c578063c5e4ccc414611110578063d0b1149c14610b4a578063d1d50fe614610464578063d547741f14610407578063dd62ed3e1461038a578063e3a96cbd146102e0578063f585dc57146102a45763fc1e29b614610250573861000f565b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576004356000526010602052602060ff604060002054166040519015158152f35b600080fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760206040516203f4808152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57600435600052600e6020526040600020805461038660018301549160038401549060048501549061034e600561034760028901612d62565b9701612d62565b9260405196879673ffffffffffffffffffffffffffffffffffffffff9360ff858760081c1696169460ff8360a01c1692169089612f6d565b0390f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576103c1612c22565b6103c9612c45565b9073ffffffffffffffffffffffffffffffffffffffff8091166000526001602052604060002091166000526020526020604060002054604051908152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5761001b600435610444612c45565b9080600052600660205261045f60016040600020015461316f565b613241565b3461029f5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5761049b612c22565b60449067ffffffffffffffff823581811161029f576104be903690600401612ef8565b926104c7613113565b6104cf613462565b600260075414610b2057600260075573ffffffffffffffffffffffffffffffffffffffff831615610ac25760243515610a645769d3c21bcecceda100000060243511610a06578351156109a857604051602081019061054660208288516105398187858d01612c68565b8101038084520182612d21565b519020600052601060205260ff6040600020541661094a575061056a600854613435565b908160085581600052600d602052604060002090828255600182017fffffffffffffffffffffffff0000000000000000000000000000000000000000903382825416179055600283019073ffffffffffffffffffffffffffffffffffffffff8616908254161790556024356003830155426004830155600582017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00815416905584519081116107d3576106206006830154612cce565b601f8111610903575b50806020601f821160011461083c57600091610831575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161760068201555b60643560078201556203f480420190814211610802576008015573ffffffffffffffffffffffffffffffffffffffff8216600052600f60205260406000208054680100000000000000008110156107d3576106d491600182018155612fda565b81549060031b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84831b921b1916179055604051602081019061072360208287516105398187858c01612c68565b5190206000526010602052604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055610767600954613435565b6009557f4c38254f7b8b72b1565c14ad4825e3be334f5cdf32b2bdb7560016407004f05173ffffffffffffffffffffffffffffffffffffffff6107bd604051956024358752606060208801526060870190612c8b565b9342604087015216938033940390a46001600755005b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b905085015186610640565b91506006830160005260206000206000925b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0831684106108eb5760019350827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08116106108b4575b5050811b016006820155610674565b8701517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c1916905586806108a5565b8781015182556020938401936001909201910161084e565b600683016000526020600020601f830160051c810160208410610943575b601f830160051c82018110610937575050610629565b60008155600101610921565b5080610921565b6064907f4c33207472616e73616374696f6e20616c72656164792070726f636573736564604051917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260206024840152820152fd5b6064907f496e76616c6964204c33207472616e73616374696f6e20686173680000000000604051917f08c379a000000000000000000000000000000000000000000000000000000000835260206004840152601b6024840152820152fd5b6064907f416d6f756e742065786365656473206d6178696d756d00000000000000000000604051917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260166024840152820152fd5b6064907f416d6f756e74206d7573742062652067726561746572207468616e2030000000604051917f08c379a000000000000000000000000000000000000000000000000000000000835260206004840152601d6024840152820152fd5b6064907f496e76616c696420726563697069656e74000000000000000000000000000000604051917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260116024840152820152fd5b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b60607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602435600435600582101561029f5767ffffffffffffffff60443581811161029f57610ba4903690600401612ef8565b90610bad613462565b600c5434106110b25782600052602090600d8252604060002090610bd382541515613498565b600582018054610bef60ff8216610be981612e27565b156134fd565b610bff6008850154421115613562565b73ffffffffffffffffffffffffffffffffffffffff60028501541633148015611070575b15611012577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060029116179055600a6009830192610c8a887fffffffffffffffffffffffff00000000000000000000000000000000000000009533878254161781556135c7565b01908451918183116107d357610ca08154612cce565b92601f93848111610fcf575b508086858211600114610f3157600091610f26575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161790555b610cfd600a54613435565b600a5585600052600e8452604060002092868455610d29886001928387019033908254161781556135c7565b600284019286519283116107d357610d418454612cce565b818111610ee0575b5085908311600114610e185792827fc5a6bd89289814765f8743687ea51d3bb3deb2c8f1cff09b1a479fb94166652c97959281610dde9895606097600092610ded575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91921b9260031b1c19161790555b60034291015560405196610dcf81612e27565b87528601526060850190612c8b565b924260408201528033940390a3005b89015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610d8c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0839293169084600052866000209160005b818110610ecb57509260609592610dde989592827fc5a6bd89289814765f8743687ea51d3bb3deb2c8f1cff09b1a479fb94166652c9b999610610e94575b5050811b019055610dbc565b8801517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690558b80610e88565b89830151845592850192918801918801610e4a565b84600052866000208280860160051c820192898710610f1d575b0160051c019083905b828110610f11575050610d49565b60008155018390610f03565b92508192610efa565b90508701518a610cc1565b6000848152888120927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016905b898b838310610fba575050509083600194939210610f83575b5050811b019055610cf2565b8901517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690558a80610f77565b84015185556001909401939283019201610f5e565b82600052866000208580840160051c820192898510611009575b0160051c01905b818110610ffd5750610cac565b60008155600101610ff0565b92508192610fe9565b606485604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601960248201527f4e6f7420617574686f72697a656420746f2064697370757465000000000000006044820152fd5b507f7b8bb8356a3f32f5c111ff23f050d97f08988e0883529ea7bff3b918887a6e0e60005260068552604060002033600052855260ff60406000205416610c23565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e73756666696369656e7420646973707574652066656500000000000000006044820152fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600a54604051908152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5773ffffffffffffffffffffffffffffffffffffffff80611199612c22565b166000526011602052604060002090610386825492600181015490600360028201549101549160405195869560ff8260a01c169116869192608093969594919673ffffffffffffffffffffffffffffffffffffffff60a085019816845215156020840152604083015260608201520152565b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760206040517f7b8bb8356a3f32f5c111ff23f050d97f08988e0883529ea7bff3b918887a6e0e8152f35b3461029f576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5773ffffffffffffffffffffffffffffffffffffffff6112b1612c22565b16600052600f8152604060002060405190818382549182815201908192600052846000209060005b8682821061132f5786866112ef82880383612d21565b604051928392818401908285525180915260408401929160005b82811061131857505050500390f35b835185528695509381019392810192600101611309565b8354855290930192600192830192016112d9565b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760206040517f300f9ae985dc711960f7a4d1dd013f9c19ecf40bff149522ab7523b2187a38468152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600c54604051908152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760206040517f52ba824bfabc2bcfcdf7f0edbb486ebb05e1836c90e78047efeb949990f72e5f8152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5761147561146b612c22565b60243590336132e4565b602060405160018152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602060405160008152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576004356114f4613113565b6114fc613462565b80600052600d602052611595604060002061151981541515613498565b6005810160017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825461155260ff8216610be981612e27565b6115626008860154421115613562565b1617905573ffffffffffffffffffffffffffffffffffffffff9060038260018301541692600283015416910154916132e4565b604051904282527f1a87470a87e2fff176d778a6e7f91d53b96b4cbb4d856f40abc582586d51850a60203393a3005b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f577fe8fc23e21608aa8e92faee11af5686b6aa7531796f68f2f943bb0d893c4312c960406004356116216130d9565b600c549080600c5582519182526020820152a1005b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57604051600060045461167681612cce565b8084529060019081811690811561170f57506001146116b4575b610386846116a081860382612d21565b604051918291602083526020830190612c8b565b6004600090815292507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106116f75750505081016020016116a082611690565b805460208587018101919091529093019281016116df565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660208087019190915292151560051b850190920192506116a09150839050611690565b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602060405169d3c21bcecceda10000008152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576117ce612c45565b600435600052600660205273ffffffffffffffffffffffffffffffffffffffff60406000209116600052602052602060ff604060002054166040519015158152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576000602073ffffffffffffffffffffffffffffffffffffffff6044611862612c22565b61186a61307d565b60405194859384927fa9059cbb0000000000000000000000000000000000000000000000000000000084523360048501526024356024850152165af180156118e5576118b257005b6020813d82116118dd575b816118ca60209383612d21565b8101031261029f57518015150361029f57005b3d91506118bd565b6040513d6000823e3d90fd5b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f577f9351be7c0f6091e3a280467d38e8ecfd5a4529968cdfaee0e0dbcceaee6765c7604060043561194e6130d9565b600b549080600b5582519182526020820152a1005b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600954604051908152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600854604051908152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611a1261307d565b611a1a613462565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060055416176005557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611aa861307d565b600080808047818115611ac0575b3390f1156118e557005b506108fc611ab6565b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600b54604051908152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611b3c612c22565b73ffffffffffffffffffffffffffffffffffffffff6024359116600052600f6020526040600020805482101561029f57602091611b7891612fda565b90546040519160031b1c8152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5773ffffffffffffffffffffffffffffffffffffffff611bd2612c22565b1660005260006020526020604060002054604051908152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602060ff600554166040519015158152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57600435600052600e60205260406000208054610386600183015491611c8260028501612d62565b9360038101549161034e600560048401549301612d62565b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57600435600052600d6020526040600020805461038673ffffffffffffffffffffffffffffffffffffffff918260018501541693836002820154169160038201549160048101549060ff60058201541690600781015491600882015493600983015496611d43600a611d3c60068701612d62565b9501612d62565b986040519c8d9c60ff8b60a01c169a16988d612e60565b3461029f5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611d91612c22565b60243580151580910361029f576044356064359173ffffffffffffffffffffffffffffffffffffffff60843594611dc6613021565b16938415611e6f577f762b38f99548d8913199a63ae95b09259e584b25129ca98ee5317f088d487bf593608093866000526011602052826003604060002080548a7fffffffffffffffffffffff00000000000000000000000000000000000000000074ff00000000000000000000000000000000000000008a60a01b169216171781558360018201558460028201550155604051938452602084015260408301526060820152a2005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c6964206272696467652061646472657373000000000000000000006044820152fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611f0461307d565b60055460ff811615611f61577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166005557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60046040517f8dfc202b000000000000000000000000000000000000000000000000000000008152fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602060405162093a808152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57611ffe612c45565b3373ffffffffffffffffffffffffffffffffffffffff8216036120275761001b90600435613241565b60046040517f6697b232000000000000000000000000000000000000000000000000000000008152fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57602060405160128152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5761001b6004356120c8612c45565b908060005260066020526120e360016040600020015461316f565b613195565b3461029f5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760043567ffffffffffffffff60243581811161029f5761213b903690600401612ef8565b9160443592831515840361029f573360009081527fc05ecb62b3da283f41a58bfabb0641c07f50e632bc46342d8a4c0cc10b5006ff60209081526040909120549094907f7b8bb8356a3f32f5c111ff23f050d97f08988e0883529ea7bff3b918887a6e0e9060ff161561255057506121b1613462565b82600052600d85526040600020600e86526040600020906121d481541515613498565b6005810192600260ff8554166121e981612e27565b036124f257600483019283549360ff85166124945790600591600180967fffffffffffffffffffffff00000000000000000000000000000000000000000074ffffffffffffffffffffffffffffffffffffffff003360081b169116171790550185519788116107d35761225c8154612cce565b601f811161244b575b5088601f891160011461238c5797807faf22c8b9970a1e934469d4910ba635081d805cf60a06f96c00d501bd873796639899600091612381575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82871b9260031b1c19161790555b15612351578260037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0061232e955416179055600373ffffffffffffffffffffffffffffffffffffffff80938301541692600283015416910154916132e4565b61234360405191604083526040830190612c8b565b9342908201528033940390a3005b505060047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905561232e565b90508701518b61229f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0891690826000528a6000209160005b8c828210612437575050918a917faf22c8b9970a1e934469d4910ba635081d805cf60a06f96c00d501bd873796639a9b889410612400575b5050811b0190556122cf565b8901517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690558b806123f4565b8a84015185559388019392830192016123bc565b8160005289600020601f8a0160051c8101918b8b1061248a575b601f0160051c019085905b82811061247e575050612265565b60008155018590612470565b9091508190612465565b60648a604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601860248201527f4469737075746520616c7265616479207265736f6c76656400000000000000006044820152fd5b606488604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601760248201527f536574746c656d656e74206e6f742064697370757465640000000000000000006044820152fd5b604490604051907fe2517d3f0000000000000000000000000000000000000000000000000000000082523360048301526024820152fd5b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760043560005260066020526020600160406000200154604051908152f35b3461029f5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5761260b612c22565b612613612c45565b6044359073ffffffffffffffffffffffffffffffffffffffff831692836000526001602052604060002033600052602052604060002054937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff851061267e575b5061147593506132e4565b83851061271a5780156126e95733156126b85761147594849160005260016020526040600020336000526020520360406000205584612673565b60246040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152fd5b60246040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b6040517ffb8f41b20000000000000000000000000000000000000000000000000000000081523360048201526024810186905260448101859052606490fd5b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f5760206040517fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b268152f35b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f576020600254604051908152f35b3461029f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57612825612c22565b6024359033156126e95773ffffffffffffffffffffffffffffffffffffffff169081156126b857336000526001602052604060002082600052602052806040600020556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57600435600052600d6020526040600020805461038673ffffffffffffffffffffffffffffffffffffffff91826001850154169383600282015416916003820154600483015460ff60058501541661292760068601612d62565b90600786015492600887015494611d43600a60098a01549901612d62565b3461029f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57604051600060035461298581612cce565b8084529060019081811690811561170f57506001146129ae57610386846116a081860382612d21565b6003600090815292507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106129f15750505081016020016116a082611690565b805460208587018101919091529093019281016129d9565b3461029f5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57612a40612c22565b612a48612c45565b6044359060643573ffffffffffffffffffffffffffffffffffffffff811680910361029f57612a75613021565b612a7d613462565b6000526011602052604060002060ff815460a01c1615612b0857600201548211612aaa5761001b926132e4565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416d6f756e74206578636565647320627269646765206c696d697400000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f427269646765206e6f74206163746976650000000000000000000000000000006044820152fd5b3461029f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029f57600435907fffffffff00000000000000000000000000000000000000000000000000000000821680920361029f57817f7965db0b0000000000000000000000000000000000000000000000000000000060209314908115612bf8575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483612bf1565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361029f57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361029f57565b60005b838110612c7b5750506000910152565b8181015183820152602001612c6b565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093612cc781518092818752878088019101612c68565b0116010190565b90600182811c92168015612d17575b6020831014612ce857565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691612cdd565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176107d357604052565b9060405191826000825492612d7684612cce565b908184526001948581169081600014612de55750600114612da2575b5050612da092500383612d21565b565b9093915060005260209081600020936000915b818310612dcd575050612da093508201013880612d92565b85548884018501529485019487945091830191612db5565b9050612da09550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013880612d92565b60051115612e3157565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b98949093612ef59c9a9692612ec5959c999c9894988b5273ffffffffffffffffffffffffffffffffffffffff988980921660208d01521660408b015260608a01526080890152612eaf81612e27565b60a08801526101808060c0890152870190612c8b565b9660e086015261010085015216610120830152612ee181612e27565b610140820152610160818403910152612c8b565b90565b81601f8201121561029f5780359067ffffffffffffffff82116107d35760405192612f4b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160185612d21565b8284526020838301011161029f57816000926020809301838601378301015290565b94969293612ef598969294612fba92875273ffffffffffffffffffffffffffffffffffffffff8096166020880152612fa481612e27565b6040870152610100806060880152860190612c8b565b956080850152151560a08401521660c082015260e0818403910152612c8b565b8054821015612ff25760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b3360009081527f866532df3c7b8a8304a854a94071efe99d9f2c853d9869138b5fbc8a8598b93760205260409020547f52ba824bfabc2bcfcdf7f0edbb486ebb05e1836c90e78047efeb949990f72e5f9060ff16156125505750565b3360009081527f7aca5d7f7c0d5c6c775e2a7e40239a4d6963361b3df3b07df46432786460eb5760205260409020547fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b269060ff16156125505750565b3360009081527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8602052604081205460ff16156125505750565b3360009081527f44017833178cb959064128715f4ace9a64bbfc45712d4670fcace3e0c4a1693b60205260409020547f300f9ae985dc711960f7a4d1dd013f9c19ecf40bff149522ab7523b2187a38469060ff16156125505750565b80600052600660205260406000203360005260205260ff60406000205416156125505750565b90600091808352600660205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff6040842054161560001461323c578083526006602052604083208284526020526040832060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b90600091808352600660205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff60408420541660001461323c57808352600660205260408320828452602052604083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b9173ffffffffffffffffffffffffffffffffffffffff80841692831561340457169283156133d357613314613462565b61331c613462565b6000908382528160205260408220549083821061337b575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b6040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602481019190915260448101839052606490fd5b60246040517fec442f0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b60246040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260006004820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108025760010190565b60ff6005541661346e57565b60046040517fd93c0665000000000000000000000000000000000000000000000000000000008152fd5b1561349f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f536574746c656d656e7420646f6573206e6f74206578697374000000000000006044820152fd5b1561350457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f536574746c656d656e74206e6f742070656e64696e67000000000000000000006044820152fd5b1561356957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f446973707574652077696e646f772065787069726564000000000000000000006044820152fd5b906135d181612e27565b7fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff000000000000000000000000000000000000000083549260a01b16911617905556fea264697066735822122080a9d5acbdcb97f17e01b55938d3184bd8cf0c16b651b924694bb61f0b7f48b564736f6c63430008140033",
          "opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1D JUMPI JUMPDEST POP CALLDATASIZE ISZERO PUSH2 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1FFC9A7 EQ PUSH2 0x2B66 JUMPI POP DUP1 PUSH4 0x68D04D0 EQ PUSH2 0x2A09 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2945 JUMPI DUP1 PUSH4 0x8DF7DC8 EQ PUSH2 0x289F JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x27EE JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x27B2 JUMPI DUP1 PUSH4 0x20DF4359 EQ PUSH2 0x2759 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x25D4 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2587 JUMPI DUP1 PUSH4 0x267F2098 EQ PUSH2 0x20E8 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x208B JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2051 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1FC7 JUMPI DUP1 PUSH4 0x3C0A6E38 EQ PUSH2 0x1F8B JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1ECD JUMPI DUP1 PUSH4 0x427AC0CA EQ PUSH2 0x114C JUMPI DUP1 PUSH4 0x43B255AC EQ PUSH2 0x1D5A JUMPI DUP1 PUSH4 0x4C582380 EQ PUSH2 0x1C9A JUMPI DUP1 PUSH4 0x564A565D EQ PUSH2 0x1C2C JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x1BEB JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1B86 JUMPI DUP1 PUSH4 0x76E8A88B EQ PUSH2 0x1B05 JUMPI DUP1 PUSH4 0x7D1D7FB8 EQ PUSH2 0x1AC9 JUMPI DUP1 PUSH4 0x84536017 EQ PUSH2 0x1A71 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x19DB JUMPI DUP1 PUSH4 0x84B971A5 EQ PUSH2 0x199F JUMPI DUP1 PUSH4 0x88DAE6A8 EQ PUSH2 0x1963 JUMPI DUP1 PUSH4 0x899C45DA EQ PUSH2 0x18F1 JUMPI DUP1 PUSH4 0x917BB998 EQ PUSH2 0x1810 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x1797 JUMPI DUP1 PUSH4 0x933367A8 EQ PUSH2 0x1754 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1636 JUMPI DUP1 PUSH4 0x9DE2E9D7 EQ PUSH2 0x15C4 JUMPI DUP1 PUSH4 0x9E924EB5 EQ PUSH2 0x14BA JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1480 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1431 JUMPI DUP1 PUSH4 0xB5BFDDEA EQ PUSH2 0x13D8 JUMPI DUP1 PUSH4 0xB9CE896B EQ PUSH2 0x139C JUMPI DUP1 PUSH4 0xBA9CF01D EQ PUSH2 0x1343 JUMPI DUP1 PUSH4 0xBFCB7040 EQ PUSH2 0x1264 JUMPI DUP1 PUSH4 0xBFE42A37 EQ PUSH2 0x120B JUMPI DUP1 PUSH4 0xC4FC45A8 EQ PUSH2 0x114C JUMPI DUP1 PUSH4 0xC5E4CCC4 EQ PUSH2 0x1110 JUMPI DUP1 PUSH4 0xD0B1149C EQ PUSH2 0xB4A JUMPI DUP1 PUSH4 0xD1D50FE6 EQ PUSH2 0x464 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x407 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xE3A96CBD EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0xF585DC57 EQ PUSH2 0x2A4 JUMPI PUSH4 0xFC1E29B6 EQ PUSH2 0x250 JUMPI CODESIZE PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH3 0x3F480 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x386 PUSH1 0x1 DUP4 ADD SLOAD SWAP2 PUSH1 0x3 DUP5 ADD SLOAD SWAP1 PUSH1 0x4 DUP6 ADD SLOAD SWAP1 PUSH2 0x34E PUSH1 0x5 PUSH2 0x347 PUSH1 0x2 DUP10 ADD PUSH2 0x2D62 JUMP JUMPDEST SWAP8 ADD PUSH2 0x2D62 JUMP JUMPDEST SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 PUSH1 0xFF DUP6 DUP8 PUSH1 0x8 SHR AND SWAP7 AND SWAP5 PUSH1 0xFF DUP4 PUSH1 0xA0 SHR AND SWAP3 AND SWAP1 DUP10 PUSH2 0x2F6D JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x3C1 PUSH2 0x2C22 JUMP JUMPDEST PUSH2 0x3C9 PUSH2 0x2C45 JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1B PUSH1 0x4 CALLDATALOAD PUSH2 0x444 PUSH2 0x2C45 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH2 0x45F PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x316F JUMP JUMPDEST PUSH2 0x3241 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x80 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x49B PUSH2 0x2C22 JUMP JUMPDEST PUSH1 0x44 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x29F JUMPI PUSH2 0x4BE SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2EF8 JUMP JUMPDEST SWAP3 PUSH2 0x4C7 PUSH2 0x3113 JUMP JUMPDEST PUSH2 0x4CF PUSH2 0x3462 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x7 SLOAD EQ PUSH2 0xB20 JUMPI PUSH1 0x2 PUSH1 0x7 SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO PUSH2 0xAC2 JUMPI PUSH1 0x24 CALLDATALOAD ISZERO PUSH2 0xA64 JUMPI PUSH10 0xD3C21BCECCEDA1000000 PUSH1 0x24 CALLDATALOAD GT PUSH2 0xA06 JUMPI DUP4 MLOAD ISZERO PUSH2 0x9A8 JUMPI PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x546 PUSH1 0x20 DUP3 DUP9 MLOAD PUSH2 0x539 DUP2 DUP8 DUP6 DUP14 ADD PUSH2 0x2C68 JUMP JUMPDEST DUP2 ADD SUB DUP1 DUP5 MSTORE ADD DUP3 PUSH2 0x2D21 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x94A JUMPI POP PUSH2 0x56A PUSH1 0x8 SLOAD PUSH2 0x3435 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x8 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP3 DUP3 SSTORE PUSH1 0x1 DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 CALLER DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x2 DUP4 ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x3 DUP4 ADD SSTORE TIMESTAMP PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0x5 DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP2 SLOAD AND SWAP1 SSTORE DUP5 MLOAD SWAP1 DUP2 GT PUSH2 0x7D3 JUMPI PUSH2 0x620 PUSH1 0x6 DUP4 ADD SLOAD PUSH2 0x2CCE JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x903 JUMPI JUMPDEST POP DUP1 PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x83C JUMPI PUSH1 0x0 SWAP2 PUSH2 0x831 JUMPI JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x6 DUP3 ADD SSTORE JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH1 0x7 DUP3 ADD SSTORE PUSH3 0x3F480 TIMESTAMP ADD SWAP1 DUP2 TIMESTAMP GT PUSH2 0x802 JUMPI PUSH1 0x8 ADD SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x7D3 JUMPI PUSH2 0x6D4 SWAP2 PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x2FDA JUMP JUMPDEST DUP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP4 SHL SWAP3 SHL NOT AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x723 PUSH1 0x20 DUP3 DUP8 MLOAD PUSH2 0x539 DUP2 DUP8 DUP6 DUP13 ADD PUSH2 0x2C68 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0x0 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x767 PUSH1 0x9 SLOAD PUSH2 0x3435 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH32 0x4C38254F7B8B72B1565C14AD4825E3BE334F5CDF32B2BDB7560016407004F051 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x7BD PUSH1 0x40 MLOAD SWAP6 PUSH1 0x24 CALLDATALOAD DUP8 MSTORE PUSH1 0x60 PUSH1 0x20 DUP9 ADD MSTORE PUSH1 0x60 DUP8 ADD SWAP1 PUSH2 0x2C8B JUMP JUMPDEST SWAP4 TIMESTAMP PUSH1 0x40 DUP8 ADD MSTORE AND SWAP4 DUP1 CALLER SWAP5 SUB SWAP1 LOG4 PUSH1 0x1 PUSH1 0x7 SSTORE STOP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP DUP6 ADD MLOAD DUP7 PUSH2 0x640 JUMP JUMPDEST SWAP2 POP PUSH1 0x6 DUP4 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP3 JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 AND DUP5 LT PUSH2 0x8EB JUMPI PUSH1 0x1 SWAP4 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 AND LT PUSH2 0x8B4 JUMPI JUMPDEST POP POP DUP2 SHL ADD PUSH1 0x6 DUP3 ADD SSTORE PUSH2 0x674 JUMP JUMPDEST DUP8 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP7 DUP1 PUSH2 0x8A5 JUMP JUMPDEST DUP8 DUP2 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x84E JUMP JUMPDEST PUSH1 0x6 DUP4 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP5 LT PUSH2 0x943 JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x937 JUMPI POP POP PUSH2 0x629 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x921 JUMP JUMPDEST POP DUP1 PUSH2 0x921 JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH32 0x4C33207472616E73616374696F6E20616C72656164792070726F636573736564 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH32 0x496E76616C6964204C33207472616E73616374696F6E20686173680000000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH32 0x416D6F756E742065786365656473206D6178696D756D00000000000000000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH32 0x416D6F756E74206D7573742062652067726561746572207468616E2030000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH32 0x496E76616C696420726563697069656E74000000000000000000000000000000 PUSH1 0x40 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x29F JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x44 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x29F JUMPI PUSH2 0xBA4 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2EF8 JUMP JUMPDEST SWAP1 PUSH2 0xBAD PUSH2 0x3462 JUMP JUMPDEST PUSH1 0xC SLOAD CALLVALUE LT PUSH2 0x10B2 JUMPI DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 PUSH1 0xD DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH2 0xBD3 DUP3 SLOAD ISZERO ISZERO PUSH2 0x3498 JUMP JUMPDEST PUSH1 0x5 DUP3 ADD DUP1 SLOAD PUSH2 0xBEF PUSH1 0xFF DUP3 AND PUSH2 0xBE9 DUP2 PUSH2 0x2E27 JUMP JUMPDEST ISZERO PUSH2 0x34FD JUMP JUMPDEST PUSH2 0xBFF PUSH1 0x8 DUP6 ADD SLOAD TIMESTAMP GT ISZERO PUSH2 0x3562 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x2 DUP6 ADD SLOAD AND CALLER EQ DUP1 ISZERO PUSH2 0x1070 JUMPI JUMPDEST ISZERO PUSH2 0x1012 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x2 SWAP2 AND OR SWAP1 SSTORE PUSH1 0xA PUSH1 0x9 DUP4 ADD SWAP3 PUSH2 0xC8A DUP9 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP6 CALLER DUP8 DUP3 SLOAD AND OR DUP2 SSTORE PUSH2 0x35C7 JUMP JUMPDEST ADD SWAP1 DUP5 MLOAD SWAP2 DUP2 DUP4 GT PUSH2 0x7D3 JUMPI PUSH2 0xCA0 DUP2 SLOAD PUSH2 0x2CCE JUMP JUMPDEST SWAP3 PUSH1 0x1F SWAP4 DUP5 DUP2 GT PUSH2 0xFCF JUMPI JUMPDEST POP DUP1 DUP7 DUP6 DUP3 GT PUSH1 0x1 EQ PUSH2 0xF31 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xF26 JUMPI JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST PUSH2 0xCFD PUSH1 0xA SLOAD PUSH2 0x3435 JUMP JUMPDEST PUSH1 0xA SSTORE DUP6 PUSH1 0x0 MSTORE PUSH1 0xE DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP3 DUP7 DUP5 SSTORE PUSH2 0xD29 DUP9 PUSH1 0x1 SWAP3 DUP4 DUP8 ADD SWAP1 CALLER SWAP1 DUP3 SLOAD AND OR DUP2 SSTORE PUSH2 0x35C7 JUMP JUMPDEST PUSH1 0x2 DUP5 ADD SWAP3 DUP7 MLOAD SWAP3 DUP4 GT PUSH2 0x7D3 JUMPI PUSH2 0xD41 DUP5 SLOAD PUSH2 0x2CCE JUMP JUMPDEST DUP2 DUP2 GT PUSH2 0xEE0 JUMPI JUMPDEST POP DUP6 SWAP1 DUP4 GT PUSH1 0x1 EQ PUSH2 0xE18 JUMPI SWAP3 DUP3 PUSH32 0xC5A6BD89289814765F8743687EA51D3BB3DEB2C8F1CFF09B1A479FB94166652C SWAP8 SWAP6 SWAP3 DUP2 PUSH2 0xDDE SWAP9 SWAP6 PUSH1 0x60 SWAP8 PUSH1 0x0 SWAP3 PUSH2 0xDED JUMPI JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP3 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x3 TIMESTAMP SWAP2 ADD SSTORE PUSH1 0x40 MLOAD SWAP7 PUSH2 0xDCF DUP2 PUSH2 0x2E27 JUMP JUMPDEST DUP8 MSTORE DUP7 ADD MSTORE PUSH1 0x60 DUP6 ADD SWAP1 PUSH2 0x2C8B JUMP JUMPDEST SWAP3 TIMESTAMP PUSH1 0x40 DUP3 ADD MSTORE DUP1 CALLER SWAP5 SUB SWAP1 LOG3 STOP JUMPDEST DUP10 ADD MLOAD SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0xD8C JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 SWAP3 SWAP4 AND SWAP1 DUP5 PUSH1 0x0 MSTORE DUP7 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xECB JUMPI POP SWAP3 PUSH1 0x60 SWAP6 SWAP3 PUSH2 0xDDE SWAP9 SWAP6 SWAP3 DUP3 PUSH32 0xC5A6BD89289814765F8743687EA51D3BB3DEB2C8F1CFF09B1A479FB94166652C SWAP12 SWAP10 SWAP7 LT PUSH2 0xE94 JUMPI JUMPDEST POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0xDBC JUMP JUMPDEST DUP9 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP12 DUP1 PUSH2 0xE88 JUMP JUMPDEST DUP10 DUP4 ADD MLOAD DUP5 SSTORE SWAP3 DUP6 ADD SWAP3 SWAP2 DUP9 ADD SWAP2 DUP9 ADD PUSH2 0xE4A JUMP JUMPDEST DUP5 PUSH1 0x0 MSTORE DUP7 PUSH1 0x0 KECCAK256 DUP3 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP10 DUP8 LT PUSH2 0xF1D JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 DUP4 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH2 0xF11 JUMPI POP POP PUSH2 0xD49 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP4 SWAP1 PUSH2 0xF03 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0xEFA JUMP JUMPDEST SWAP1 POP DUP8 ADD MLOAD DUP11 PUSH2 0xCC1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE DUP9 DUP2 KECCAK256 SWAP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 JUMPDEST DUP10 DUP12 DUP4 DUP4 LT PUSH2 0xFBA JUMPI POP POP POP SWAP1 DUP4 PUSH1 0x1 SWAP5 SWAP4 SWAP3 LT PUSH2 0xF83 JUMPI JUMPDEST POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0xCF2 JUMP JUMPDEST DUP10 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP11 DUP1 PUSH2 0xF77 JUMP JUMPDEST DUP5 ADD MLOAD DUP6 SSTORE PUSH1 0x1 SWAP1 SWAP5 ADD SWAP4 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0xF5E JUMP JUMPDEST DUP3 PUSH1 0x0 MSTORE DUP7 PUSH1 0x0 KECCAK256 DUP6 DUP1 DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP10 DUP6 LT PUSH2 0x1009 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0xFFD JUMPI POP PUSH2 0xCAC JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xFF0 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0xFE9 JUMP JUMPDEST PUSH1 0x64 DUP6 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617574686F72697A656420746F206469737075746500000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH32 0x7B8BB8356A3F32F5C111FF23F050D97F08988E0883529EA7BFF3B918887A6E0E PUSH1 0x0 MSTORE PUSH1 0x6 DUP6 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP6 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0xC23 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742064697370757465206665650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0xA SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 PUSH2 0x1199 PUSH2 0x2C22 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH2 0x386 DUP3 SLOAD SWAP3 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 PUSH1 0x3 PUSH1 0x2 DUP3 ADD SLOAD SWAP2 ADD SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP6 PUSH1 0xFF DUP3 PUSH1 0xA0 SHR AND SWAP2 AND DUP7 SWAP2 SWAP3 PUSH1 0x80 SWAP4 SWAP7 SWAP6 SWAP5 SWAP2 SWAP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 DUP6 ADD SWAP9 AND DUP5 MSTORE ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x7B8BB8356A3F32F5C111FF23F050D97F08988E0883529EA7BFF3B918887A6E0E DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x12B1 PUSH2 0x2C22 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0xF DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP1 DUP2 DUP4 DUP3 SLOAD SWAP2 DUP3 DUP2 MSTORE ADD SWAP1 DUP2 SWAP3 PUSH1 0x0 MSTORE DUP5 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 JUMPDEST DUP7 DUP3 DUP3 LT PUSH2 0x132F JUMPI DUP7 DUP7 PUSH2 0x12EF DUP3 DUP9 SUB DUP4 PUSH2 0x2D21 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP2 DUP5 ADD SWAP1 DUP3 DUP6 MSTORE MLOAD DUP1 SWAP2 MSTORE PUSH1 0x40 DUP5 ADD SWAP3 SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x1318 JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x1309 JUMP JUMPDEST DUP4 SLOAD DUP6 MSTORE SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x12D9 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x300F9AE985DC711960F7A4D1DD013F9C19ECF40BFF149522AB7523B2187A3846 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0xC SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x52BA824BFABC2BCFCDF7F0EDBB486EBB05E1836C90E78047EFEB949990F72E5F DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1475 PUSH2 0x146B PUSH2 0x2C22 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x32E4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x14F4 PUSH2 0x3113 JUMP JUMPDEST PUSH2 0x14FC PUSH2 0x3462 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH2 0x1595 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1519 DUP2 SLOAD ISZERO ISZERO PUSH2 0x3498 JUMP JUMPDEST PUSH1 0x5 DUP2 ADD PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 SLOAD PUSH2 0x1552 PUSH1 0xFF DUP3 AND PUSH2 0xBE9 DUP2 PUSH2 0x2E27 JUMP JUMPDEST PUSH2 0x1562 PUSH1 0x8 DUP7 ADD SLOAD TIMESTAMP GT ISZERO PUSH2 0x3562 JUMP JUMPDEST AND OR SWAP1 SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 PUSH1 0x3 DUP3 PUSH1 0x1 DUP4 ADD SLOAD AND SWAP3 PUSH1 0x2 DUP4 ADD SLOAD AND SWAP2 ADD SLOAD SWAP2 PUSH2 0x32E4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 TIMESTAMP DUP3 MSTORE PUSH32 0x1A87470A87E2FFF176D778A6E7F91D53B96B4CBB4D856F40ABC582586D51850A PUSH1 0x20 CALLER SWAP4 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH32 0xE8FC23E21608AA8E92FAEE11AF5686B6AA7531796F68F2F943BB0D893C4312C9 PUSH1 0x40 PUSH1 0x4 CALLDATALOAD PUSH2 0x1621 PUSH2 0x30D9 JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 DUP1 PUSH1 0xC SSTORE DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x4 SLOAD PUSH2 0x1676 DUP2 PUSH2 0x2CCE JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x170F JUMPI POP PUSH1 0x1 EQ PUSH2 0x16B4 JUMPI JUMPDEST PUSH2 0x386 DUP5 PUSH2 0x16A0 DUP2 DUP7 SUB DUP3 PUSH2 0x2D21 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x2C8B JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP3 POP PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP5 LT PUSH2 0x16F7 JUMPI POP POP POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x16A0 DUP3 PUSH2 0x1690 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x16DF JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x20 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 ISZERO ISZERO PUSH1 0x5 SHL DUP6 ADD SWAP1 SWAP3 ADD SWAP3 POP PUSH2 0x16A0 SWAP2 POP DUP4 SWAP1 POP PUSH2 0x1690 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH10 0xD3C21BCECCEDA1000000 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x17CE PUSH2 0x2C45 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x0 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x44 PUSH2 0x1862 PUSH2 0x2C22 JUMP JUMPDEST PUSH2 0x186A PUSH2 0x307D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP5 MSTORE CALLER PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x24 DUP6 ADD MSTORE AND GAS CALL DUP1 ISZERO PUSH2 0x18E5 JUMPI PUSH2 0x18B2 JUMPI STOP JUMPDEST PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x18DD JUMPI JUMPDEST DUP2 PUSH2 0x18CA PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2D21 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x29F JUMPI MLOAD DUP1 ISZERO ISZERO SUB PUSH2 0x29F JUMPI STOP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x18BD JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH32 0x9351BE7C0F6091E3A280467D38E8ECFD5A4529968CDFAEE0E0DBCCEAEE6765C7 PUSH1 0x40 PUSH1 0x4 CALLDATALOAD PUSH2 0x194E PUSH2 0x30D9 JUMP JUMPDEST PUSH1 0xB SLOAD SWAP1 DUP1 PUSH1 0xB SSTORE DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1A12 PUSH2 0x307D JUMP JUMPDEST PUSH2 0x1A1A PUSH2 0x3462 JUMP JUMPDEST PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x5 SLOAD AND OR PUSH1 0x5 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1AA8 PUSH2 0x307D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 SELFBALANCE DUP2 DUP2 ISZERO PUSH2 0x1AC0 JUMPI JUMPDEST CALLER SWAP1 CALL ISZERO PUSH2 0x18E5 JUMPI STOP JUMPDEST POP PUSH2 0x8FC PUSH2 0x1AB6 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0xB SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1B3C PUSH2 0x2C22 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x29F JUMPI PUSH1 0x20 SWAP2 PUSH2 0x1B78 SWAP2 PUSH2 0x2FDA JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH1 0x3 SHL SHR DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x1BD2 PUSH2 0x2C22 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x5 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x386 PUSH1 0x1 DUP4 ADD SLOAD SWAP2 PUSH2 0x1C82 PUSH1 0x2 DUP6 ADD PUSH2 0x2D62 JUMP JUMPDEST SWAP4 PUSH1 0x3 DUP2 ADD SLOAD SWAP2 PUSH2 0x34E PUSH1 0x5 PUSH1 0x4 DUP5 ADD SLOAD SWAP4 ADD PUSH2 0x2D62 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x386 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 PUSH1 0x1 DUP6 ADD SLOAD AND SWAP4 DUP4 PUSH1 0x2 DUP3 ADD SLOAD AND SWAP2 PUSH1 0x3 DUP3 ADD SLOAD SWAP2 PUSH1 0x4 DUP2 ADD SLOAD SWAP1 PUSH1 0xFF PUSH1 0x5 DUP3 ADD SLOAD AND SWAP1 PUSH1 0x7 DUP2 ADD SLOAD SWAP2 PUSH1 0x8 DUP3 ADD SLOAD SWAP4 PUSH1 0x9 DUP4 ADD SLOAD SWAP7 PUSH2 0x1D43 PUSH1 0xA PUSH2 0x1D3C PUSH1 0x6 DUP8 ADD PUSH2 0x2D62 JUMP JUMPDEST SWAP6 ADD PUSH2 0x2D62 JUMP JUMPDEST SWAP9 PUSH1 0x40 MLOAD SWAP13 DUP14 SWAP13 PUSH1 0xFF DUP12 PUSH1 0xA0 SHR AND SWAP11 AND SWAP9 DUP14 PUSH2 0x2E60 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0xA0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1D91 PUSH2 0x2C22 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0x29F JUMPI PUSH1 0x44 CALLDATALOAD PUSH1 0x64 CALLDATALOAD SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x84 CALLDATALOAD SWAP5 PUSH2 0x1DC6 PUSH2 0x3021 JUMP JUMPDEST AND SWAP4 DUP5 ISZERO PUSH2 0x1E6F JUMPI PUSH32 0x762B38F99548D8913199A63AE95B09259E584B25129CA98EE5317F088D487BF5 SWAP4 PUSH1 0x80 SWAP4 DUP7 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE DUP3 PUSH1 0x3 PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP11 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000 PUSH21 0xFF0000000000000000000000000000000000000000 DUP11 PUSH1 0xA0 SHL AND SWAP3 AND OR OR DUP2 SSTORE DUP4 PUSH1 0x1 DUP3 ADD SSTORE DUP5 PUSH1 0x2 DUP3 ADD SSTORE ADD SSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE LOG2 STOP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420627269646765206164647265737300000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1F04 PUSH2 0x307D JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH2 0x1F61 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x5 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x8DFC202B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH3 0x93A80 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1FFE PUSH2 0x2C45 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SUB PUSH2 0x2027 JUMPI PUSH2 0x1B SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x3241 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x6697B23200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x1B PUSH1 0x4 CALLDATALOAD PUSH2 0x20C8 PUSH2 0x2C45 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH2 0x20E3 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x316F JUMP JUMPDEST PUSH2 0x3195 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x29F JUMPI PUSH2 0x213B SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2EF8 JUMP JUMPDEST SWAP2 PUSH1 0x44 CALLDATALOAD SWAP3 DUP4 ISZERO ISZERO DUP5 SUB PUSH2 0x29F JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xC05ECB62B3DA283F41A58BFABB0641C07F50E632BC46342D8A4C0CC10B5006FF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP5 SWAP1 PUSH32 0x7B8BB8356A3F32F5C111FF23F050D97F08988E0883529EA7BFF3B918887A6E0E SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x2550 JUMPI POP PUSH2 0x21B1 PUSH2 0x3462 JUMP JUMPDEST DUP3 PUSH1 0x0 MSTORE PUSH1 0xD DUP6 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xE DUP7 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH2 0x21D4 DUP2 SLOAD ISZERO ISZERO PUSH2 0x3498 JUMP JUMPDEST PUSH1 0x5 DUP2 ADD SWAP3 PUSH1 0x2 PUSH1 0xFF DUP6 SLOAD AND PUSH2 0x21E9 DUP2 PUSH2 0x2E27 JUMP JUMPDEST SUB PUSH2 0x24F2 JUMPI PUSH1 0x4 DUP4 ADD SWAP3 DUP4 SLOAD SWAP4 PUSH1 0xFF DUP6 AND PUSH2 0x2494 JUMPI SWAP1 PUSH1 0x5 SWAP2 PUSH1 0x1 DUP1 SWAP7 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000 PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 CALLER PUSH1 0x8 SHL AND SWAP2 AND OR OR SWAP1 SSTORE ADD DUP6 MLOAD SWAP8 DUP9 GT PUSH2 0x7D3 JUMPI PUSH2 0x225C DUP2 SLOAD PUSH2 0x2CCE JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x244B JUMPI JUMPDEST POP DUP9 PUSH1 0x1F DUP10 GT PUSH1 0x1 EQ PUSH2 0x238C JUMPI SWAP8 DUP1 PUSH32 0xAF22C8B9970A1E934469D4910BA635081D805CF60A06F96C00D501BD87379663 SWAP9 SWAP10 PUSH1 0x0 SWAP2 PUSH2 0x2381 JUMPI JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP8 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST ISZERO PUSH2 0x2351 JUMPI DUP3 PUSH1 0x3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH2 0x232E SWAP6 SLOAD AND OR SWAP1 SSTORE PUSH1 0x3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP4 DUP4 ADD SLOAD AND SWAP3 PUSH1 0x2 DUP4 ADD SLOAD AND SWAP2 ADD SLOAD SWAP2 PUSH2 0x32E4 JUMP JUMPDEST PUSH2 0x2343 PUSH1 0x40 MLOAD SWAP2 PUSH1 0x40 DUP4 MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x2C8B JUMP JUMPDEST SWAP4 TIMESTAMP SWAP1 DUP3 ADD MSTORE DUP1 CALLER SWAP5 SUB SWAP1 LOG3 STOP JUMPDEST POP POP PUSH1 0x4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x232E JUMP JUMPDEST SWAP1 POP DUP8 ADD MLOAD DUP12 PUSH2 0x229F JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP10 AND SWAP1 DUP3 PUSH1 0x0 MSTORE DUP11 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST DUP13 DUP3 DUP3 LT PUSH2 0x2437 JUMPI POP POP SWAP2 DUP11 SWAP2 PUSH32 0xAF22C8B9970A1E934469D4910BA635081D805CF60A06F96C00D501BD87379663 SWAP11 SWAP12 DUP9 SWAP5 LT PUSH2 0x2400 JUMPI JUMPDEST POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x22CF JUMP JUMPDEST DUP10 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP12 DUP1 PUSH2 0x23F4 JUMP JUMPDEST DUP11 DUP5 ADD MLOAD DUP6 SSTORE SWAP4 DUP9 ADD SWAP4 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x23BC JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE DUP10 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP11 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP12 DUP12 LT PUSH2 0x248A JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 DUP6 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH2 0x247E JUMPI POP POP PUSH2 0x2265 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP6 SWAP1 PUSH2 0x2470 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x64 DUP11 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4469737075746520616C7265616479207265736F6C7665640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP9 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536574746C656D656E74206E6F74206469737075746564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x44 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH32 0xE2517D3F00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x260B PUSH2 0x2C22 JUMP JUMPDEST PUSH2 0x2613 PUSH2 0x2C45 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP3 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 LT PUSH2 0x267E JUMPI JUMPDEST POP PUSH2 0x1475 SWAP4 POP PUSH2 0x32E4 JUMP JUMPDEST DUP4 DUP6 LT PUSH2 0x271A JUMPI DUP1 ISZERO PUSH2 0x26E9 JUMPI CALLER ISZERO PUSH2 0x26B8 JUMPI PUSH2 0x1475 SWAP5 DUP5 SWAP2 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE DUP5 PUSH2 0x2673 JUMP JUMPDEST PUSH1 0x24 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x24 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0xBF233DD2AAFEB4D50879C4AA5C81E96D92F6E6945C906A58F9F2D1C1631B4B26 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x2825 PUSH2 0x2C22 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER ISZERO PUSH2 0x26E9 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 ISZERO PUSH2 0x26B8 JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x20 CALLER SWAP3 LOG3 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x386 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 PUSH1 0x1 DUP6 ADD SLOAD AND SWAP4 DUP4 PUSH1 0x2 DUP3 ADD SLOAD AND SWAP2 PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0xFF PUSH1 0x5 DUP6 ADD SLOAD AND PUSH2 0x2927 PUSH1 0x6 DUP7 ADD PUSH2 0x2D62 JUMP JUMPDEST SWAP1 PUSH1 0x7 DUP7 ADD SLOAD SWAP3 PUSH1 0x8 DUP8 ADD SLOAD SWAP5 PUSH2 0x1D43 PUSH1 0xA PUSH1 0x9 DUP11 ADD SLOAD SWAP10 ADD PUSH2 0x2D62 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x3 SLOAD PUSH2 0x2985 DUP2 PUSH2 0x2CCE JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x170F JUMPI POP PUSH1 0x1 EQ PUSH2 0x29AE JUMPI PUSH2 0x386 DUP5 PUSH2 0x16A0 DUP2 DUP7 SUB DUP3 PUSH2 0x2D21 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP3 POP PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP5 LT PUSH2 0x29F1 JUMPI POP POP POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x16A0 DUP3 PUSH2 0x1690 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x29D9 JUMP JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x80 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH2 0x2A40 PUSH2 0x2C22 JUMP JUMPDEST PUSH2 0x2A48 PUSH2 0x2C45 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x64 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP1 SWAP2 SUB PUSH2 0x29F JUMPI PUSH2 0x2A75 PUSH2 0x3021 JUMP JUMPDEST PUSH2 0x2A7D PUSH2 0x3462 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF DUP2 SLOAD PUSH1 0xA0 SHR AND ISZERO PUSH2 0x2B08 JUMPI PUSH1 0x2 ADD SLOAD DUP3 GT PUSH2 0x2AAA JUMPI PUSH2 0x1B SWAP3 PUSH2 0x32E4 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416D6F756E74206578636565647320627269646765206C696D69740000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x427269646765206E6F7420616374697665000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x29F JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x29F JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND DUP1 SWAP3 SUB PUSH2 0x29F JUMPI DUP2 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 SWAP4 EQ SWAP1 DUP2 ISZERO PUSH2 0x2BF8 JUMPI JUMPDEST POP ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 SWAP2 POP EQ DUP4 PUSH2 0x2BF1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x29F JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x29F JUMPI JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x2C7B JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2C6B JUMP JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F PUSH1 0x20 SWAP4 PUSH2 0x2CC7 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP8 MSTORE DUP8 DUP1 DUP9 ADD SWAP2 ADD PUSH2 0x2C68 JUMP JUMPDEST ADD AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x2D17 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x2CE8 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x2CDD JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x7D3 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x2D76 DUP5 PUSH2 0x2CCE JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x2DE5 JUMPI POP PUSH1 0x1 EQ PUSH2 0x2DA2 JUMPI JUMPDEST POP POP PUSH2 0x2DA0 SWAP3 POP SUB DUP4 PUSH2 0x2D21 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x2DCD JUMPI POP POP PUSH2 0x2DA0 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x2D92 JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x2DB5 JUMP JUMPDEST SWAP1 POP PUSH2 0x2DA0 SWAP6 POP PUSH1 0x20 SWAP4 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 SWAP2 POP AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x2D92 JUMP JUMPDEST PUSH1 0x5 GT ISZERO PUSH2 0x2E31 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP9 SWAP5 SWAP1 SWAP4 PUSH2 0x2EF5 SWAP13 SWAP11 SWAP7 SWAP3 PUSH2 0x2EC5 SWAP6 SWAP13 SWAP10 SWAP13 SWAP9 SWAP5 SWAP9 DUP12 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP9 DUP10 DUP1 SWAP3 AND PUSH1 0x20 DUP14 ADD MSTORE AND PUSH1 0x40 DUP12 ADD MSTORE PUSH1 0x60 DUP11 ADD MSTORE PUSH1 0x80 DUP10 ADD MSTORE PUSH2 0x2EAF DUP2 PUSH2 0x2E27 JUMP JUMPDEST PUSH1 0xA0 DUP9 ADD MSTORE PUSH2 0x180 DUP1 PUSH1 0xC0 DUP10 ADD MSTORE DUP8 ADD SWAP1 PUSH2 0x2C8B JUMP JUMPDEST SWAP7 PUSH1 0xE0 DUP7 ADD MSTORE PUSH2 0x100 DUP6 ADD MSTORE AND PUSH2 0x120 DUP4 ADD MSTORE PUSH2 0x2EE1 DUP2 PUSH2 0x2E27 JUMP JUMPDEST PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x2C8B JUMP JUMPDEST SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x29F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x7D3 JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x2F4B PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND ADD DUP6 PUSH2 0x2D21 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x29F JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST SWAP5 SWAP7 SWAP3 SWAP4 PUSH2 0x2EF5 SWAP9 SWAP7 SWAP3 SWAP5 PUSH2 0x2FBA SWAP3 DUP8 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP7 AND PUSH1 0x20 DUP9 ADD MSTORE PUSH2 0x2FA4 DUP2 PUSH2 0x2E27 JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MSTORE PUSH2 0x100 DUP1 PUSH1 0x60 DUP9 ADD MSTORE DUP7 ADD SWAP1 PUSH2 0x2C8B JUMP JUMPDEST SWAP6 PUSH1 0x80 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0xA0 DUP5 ADD MSTORE AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x2C8B JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x2FF2 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x866532DF3C7B8A8304A854A94071EFE99D9F2C853D9869138B5FBC8A8598B937 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH32 0x52BA824BFABC2BCFCDF7F0EDBB486EBB05E1836C90E78047EFEB949990F72E5F SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x2550 JUMPI POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x7ACA5D7F7C0D5C6C775E2A7E40239A4D6963361B3DF3B07DF46432786460EB57 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH32 0xBF233DD2AAFEB4D50879C4AA5C81E96D92F6E6945C906A58F9F2D1C1631B4B26 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x2550 JUMPI POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x54CDD369E4E8A8515E52CA72EC816C2101831AD1F18BF44102ED171459C9B4F8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2550 JUMPI POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x44017833178CB959064128715F4ACE9A64BBFC45712D4670FCACE3E0C4A1693B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH32 0x300F9AE985DC711960F7A4D1DD013F9C19ECF40BFF149522AB7523B2187A3846 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x2550 JUMPI POP JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2550 JUMPI POP JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP5 KECCAK256 SWAP3 AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND ISZERO PUSH1 0x0 EQ PUSH2 0x323C JUMPI DUP1 DUP4 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP5 KECCAK256 SWAP3 AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH1 0x0 EQ PUSH2 0x323C JUMPI DUP1 DUP4 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND SWAP3 DUP4 ISZERO PUSH2 0x3404 JUMPI AND SWAP3 DUP4 ISZERO PUSH2 0x33D3 JUMPI PUSH2 0x3314 PUSH2 0x3462 JUMP JUMPDEST PUSH2 0x331C PUSH2 0x3462 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP4 DUP3 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD SWAP1 DUP4 DUP3 LT PUSH2 0x337B JUMPI POP SWAP2 PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x24 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x24 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x802 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x5 SLOAD AND PUSH2 0x346E JUMPI JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0xD93C066500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST ISZERO PUSH2 0x349F JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536574746C656D656E7420646F6573206E6F7420657869737400000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x3504 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536574746C656D656E74206E6F742070656E64696E6700000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x3569 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x446973707574652077696E646F77206578706972656400000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH2 0x35D1 DUP2 PUSH2 0x2E27 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH21 0xFF0000000000000000000000000000000000000000 DUP4 SLOAD SWAP3 PUSH1 0xA0 SHL AND SWAP2 AND OR SWAP1 SSTORE JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP1 0xA9 0xD5 0xAC 0xBD 0xCB SWAP8 CALL PUSH31 0x1B55938D3184BD8CF0C16B651B924694BB61F0B7F48B564736F6C63430008 EQ STOP CALLER ",
          "sourceMap": "550:17894:20:-:0;;;;;;;;;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3241:55;550:17894;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1248:6;550:17894;;;;;;;;;;;;;;;;;;14968:8;550:17894;;;;;;;;;15055:17;;550:17894;15143:17;;;;550:17894;15174:16;550:17894;15174:16;;550:17894;15114:15;550:17894;15234:18;550:17894;15114:15;;;550:17894;:::i;:::-;15234:18;;550:17894;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;3638:11:5;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4747:26:1;550:17894:20;;;;:::i;:::-;;;;;3901:6:1;550:17894:20;;2475:4:1;550:17894:20;;;;3901:22:1;550:17894:20;2475:4:1;:::i;:::-;4747:26;:::i;550:17894:20:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;2475:4:1;;;:::i;:::-;1315:72:12;;:::i;:::-;1899:1:13;2702:7;550:17894:20;2702:18:13;2698:86;;1899:1;2702:7;550:17894:20;;;;5897:16;550:17894;;;;5953:10;550:17894;;1308:16;550:17894;;6015:31;550:17894;;;;6091:35;550:17894;;;;;6211:35;;550:17894;6211:35;550:17894;;;;;;;;;;;:::i;:::-;;;6211:35;;;;;;;:::i;:::-;550:17894;6201:46;;550:17894;;6177:23;550:17894;;;;;;;;;;;6304:19;;550:17894;6304:19;:::i;:::-;550:17894;;6304:19;550:17894;;;;6424:11;550:17894;;;;;;;;;;6507:15;;550:17894;6525:10;;550:17894;;;;;;;1899:1:13;6545:13:20;;550:17894;;;;;;;;;;;;;6573:17;;;550:17894;6632:15;550:17894;6609:20;;550:17894;6657:17;;;550:17894;;;;;;;;;;;;;;6711:28;;;550:17894;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;6573:17;550:17894;;;;;6711:28;;;550:17894;;;;2702:7:13;6769:21:20;;550:17894;1248:6;6632:15;550:17894;6632:15;;;550:17894;;;6304:19;6813:26;550:17894;;;;;;6893:15;550:17894;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;6573:17;550:17894;;;;;;;;;;;;;;;;6975:35;;550:17894;6975:35;550:17894;;;;;;;;;;;:::i;6975:35::-;550:17894;6965:46;;550:17894;;6177:23;550:17894;;;;;;;;;;;;;7029:18;;550:17894;7029:18;:::i;:::-;;550:17894;7071:91;550:17894;;;;;;;;;;;;;;;;;;;:::i;:::-;6632:15;;550:17894;;;;;6525:10;;;7071:91;;;;550:17894;2702:7:13;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6711:28;;;;;550:17894;;;;;;;;6211:35;550:17894;;;;;;;;;;6211:35;550:17894;;;;;;;;;;;6711:28;;;550:17894;;;;;;;;;;6573:17;550:17894;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6711:28;;;550:17894;;;;;;;;6657:17;550:17894;;;;;;;;;;;;6657:17;550:17894;;;;;;;;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2698:86:13;550:17894:20;;;2743:30:13;;;;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1315:72:12;;;:::i;:::-;8340:10:20;550:17894;8327:9;:23;550:17894;;;;;;;8430:11;550:17894;;;;;;8465:66;550:17894;;8473:28;;8465:66;:::i;:::-;550:17894;8549:17;;550:17894;;8541:80;550:17894;;;;;;:::i;:::-;8549:45;8541:80;:::i;:::-;8631;8658:26;;;550:17894;8639:15;:45;;8631:80;:::i;:::-;550:17894;8743:13;;;550:17894;;8729:10;:27;:73;;;;550:17894;;;;;8743:13;550:17894;;;;;8999:25;8906:27;;;550:17894;8956:33;550:17894;;8729:10;;550:17894;;;;;;;8956:33;:::i;:::-;8999:25;550:17894;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9053:15;8999:25;550:17894;9053:15;:::i;:::-;8999:25;550:17894;;;;9113:8;550:17894;;;;;;;;;9230:23;550:17894;;9190:17;;;;8729:10;;550:17894;;;;;;;9230:23;:::i;:::-;8743:13;9263:15;;550:17894;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;9357:78;550:17894;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9298:17;8639:15;9298:17;;550:17894;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;8639:15;;550:17894;;;;8729:10;;9357:78;;;;550:17894;;;;;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9357:78;550:17894;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8729:73;550:17894;1031:34;550:17894;;2954:6:1;550:17894:20;;;;;8729:10;550:17894;;;;;;;;;;8729:73;;550:17894;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2911:28;550:17894;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;16093:13;550:17894;;;;;;;;;16215:23;;;;550:17894;16252:16;16282:10;16252:16;;;550:17894;16282:10;;550:17894;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1031:34;550:17894;;;;;;;;;;;;;;;;;;:::i;:::-;;;;15513:15;550:17894;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;881:28;550:17894;;;;;;;;;;;;;;;3012:41;550:17894;;;;;;;;;;;;;;;;;;;;;953:24;550:17894;;;;;;;;;;;;;;3440:5:5;550:17894:20;;:::i;:::-;;;735:10:11;;3440:5:5;:::i;:::-;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2475:4:1;;:::i;:::-;1315:72:12;;:::i;:::-;550:17894:20;;;7409:11;550:17894;;7856:17;550:17894;;;7444:66;550:17894;;7452:28;;7444:66;:::i;:::-;7528:17;;;550:17894;;;;7520:80;550:17894;;;;;;:::i;7520:80::-;7610;7637:26;;;550:17894;7618:15;:45;;7610:80;:::i;:::-;550:17894;;;;;7824:15;7856:17;7824:15;550:17894;7824:15;;550:17894;;7841:13;;;;550:17894;;7856:17;;550:17894;7856:17;;:::i;:::-;550:17894;;7618:15;;550:17894;;7898:62;550:17894;7932:10;7898:62;;550:17894;;;;;;;;;;;;17070:33;550:17894;;;2475:4:1;;:::i;:::-;17016:10:20;550:17894;;;17016:10;550:17894;;;;;;;;;;17070:33;550:17894;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;550:17894:20;;;;;;;-1:-1:-1;;;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;-1:-1:-1;550:17894:20;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;;;1308:16;550:17894;;;;;;;;;;;;;;;;:::i;:::-;;;;;2954:6:1;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2475:4:1;;:::i;:::-;550:17894:20;;17815:42;;;;;550:17894;17815:42;;17838:10;550:17894;17815:42;;550:17894;;;;;;;;17815:42;;;;;;;;550:17894;17815:42;550:17894;17815:42;;;;;;;;;550:17894;17815:42;;;:::i;:::-;;;550:17894;;;;;;;;;;;;17815:42;;;-1:-1:-1;17815:42:20;;;550:17894;;;;;;;;;;;;;;;;;;;;16773:36;550:17894;;;2475:4:1;;:::i;:::-;16713:13:20;550:17894;;;16713:13;550:17894;;;;;;;;;;16773:36;550:17894;;;;;;;;;;;;;2874:31;550:17894;;;;;;;;;;;;;;;;;;;2836:32;550:17894;;;;;;;;;;;;;;;;;;2475:4:1;;:::i;:::-;1315:72:12;;:::i;:::-;2408:4;550:17894:20;2398:14:12;550:17894:20;;;2398:14:12;550:17894:20;2427:20:12;550:17894:20;;;735:10:11;550:17894:20;;2427:20:12;550:17894:20;;;;;;;;;;;;2475:4:1;;:::i;:::-;550:17894:20;17540:21;;;;17511:51;;;;;550:17894;17519:10;17511:51;;;;;550:17894;17511:51;;;;;550:17894;;;;;;;;;;;;2945:45;550:17894;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;3183:52;550:17894;;;;;;;3183:52;;;;;550:17894;3183:52;;;;:::i;:::-;550:17894;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1796:7:12;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;3134:43;550:17894;;;;;;;;;3134:43;;550:17894;3134:43;;;;;;:::i;:::-;;;;;550:17894;3134:43;;;550:17894;3134:43;;550:17894;3134:43;;;:::i;550:17894::-;;;;;;;;;;;;;;;13748:11;550:17894;;;;;;;;;13841:15;;550:17894;13841:15;;550:17894;;13870:13;;;;;550:17894;;13897:17;;;;550:17894;13928:20;550:17894;13928:20;;550:17894;13962:17;550:17894;13962:17;;;550:17894;;14035:21;;;;550:17894;14070:26;;;;550:17894;14110:27;;;;550:17894;13993:28;550:17894;14189:25;550:17894;13993:28;;;550:17894;:::i;:::-;14189:25;;550:17894;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2475:4:1;;;:::i;:::-;550:17894:20;11399:27;;;550:17894;;11752:78;550:17894;;;;;;11502:13;550:17894;;;11712:10;550:17894;;;;;;;;;;;;;;;;;;11622:23;550:17894;11622:23;;550:17894;11674:16;;;;550:17894;11712:10;550:17894;;;;;;;;;;;;;;;;;;11752:78;550:17894;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2475:4:1;;:::i;:::-;1796:7:12;550:17894:20;;;;2140:9:12;2136:62;;550:17894:20;;1796:7:12;550:17894:20;2674:22:12;550:17894:20;;;735:10:11;550:17894:20;;2674:22:12;550:17894:20;2136:62:12;550:17894:20;;;2172:15:12;;;;550:17894:20;;;;;;;;;;;;;;1195:6;550:17894;;;;;;;;;;;;;;;;:::i;:::-;735:10:11;550:17894:20;;;5421:34:1;5417:102;;5529:37;550:17894:20;;;5529:37:1;:::i;5417:102::-;550:17894:20;;;5478:30:1;;;;550:17894:20;;;;;;;;;;;;;;2761:2:5;550:17894:20;;;;;;;;;;;;;;4330:25:1;550:17894:20;;;;:::i;:::-;;;;;3901:6:1;550:17894:20;;2475:4:1;550:17894:20;;;;3901:22:1;550:17894:20;2475:4:1;:::i;:::-;4330:25;:::i;550:17894:20:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;735:10:11;550:17894:20;;;;;;;;;;;;;;;;;1031:34;;550:17894;;3519:23:1;3515:108;;1315:72:12;;;:::i;:::-;550:17894:20;;;9872:11;550:17894;;;;;9933:8;550:17894;;;;;;9974:66;550:17894;;9982:28;;9974:66;:::i;:::-;10058:17;;;550:17894;10079:25;550:17894;;;;;;;:::i;:::-;10058:46;550:17894;;;10151:16;;550:17894;;;;;;;;;;10058:17;550:17894;;735:10:11;;550:17894:20;;735:10:11;550:17894:20;;;;;;;;;10287:18;550:17894;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;10604:70;550:17894;;;;;;;;;;;;;;;;;;;;;;10337:244;;;550:17894;10394:25;550:17894;10475:17;550:17894;;;;;;10394:25;550:17894;10443:15;;;;550:17894;;10460:13;10079:25;10460:13;;550:17894;;10475:17;;550:17894;10475:17;;:::i;:::-;550:17894;;;;;;;;;;;;:::i;:::-;10658:15;;550:17894;;;;735:10:11;;10604:70:20;;;;550:17894;10337:244;550:17894;;;;;;;;;;10337:244;;550:17894;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10604:70;550:17894;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10058:17;550:17894;;;;;;;;;;;;10058:17;550:17894;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3515:108:1;550:17894:20;;;;3565:47:1;;;;735:10:11;550:17894:20;3565:47:1;;550:17894:20;;;;;3565:47:1;550:17894:20;;;;;;;;;;;;;;;3901:6:1;550:17894:20;;;;;;;3901:22:1;550:17894:20;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;735:10:11;550:17894:20;;;;;;;;10561:36:5;10580:17;10561:36;;10557:309;;550:17894:20;4967:5:5;;;;;:::i;10557:309::-;10617:24;;;10613:130;;9794:19;;9790:89;;735:10:11;9892:21:5;9888:90;;4967:5;550:17894:20;;;;;;;;;;;735:10:11;550:17894:20;;;;;;;;;10557:309:5;;;9888:90;550:17894:20;;;9936:31:5;;;550:17894:20;;9936:31:5;;550:17894:20;9936:31:5;9790:89;550:17894:20;;;9836:32:5;;;550:17894:20;;9836:32:5;;550:17894:20;9836:32:5;10613:130;550:17894:20;;10668:60:5;;;735:10:11;550:17894:20;10668:60:5;;550:17894:20;;;;;;;;;;;;;;;10668:60:5;550:17894:20;;;;;;;;;;;;;;1112:27;550:17894;;;;;;;;;;;;;;;2908:12:5;550:17894:20;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;735:10:11;;9794:19:5;9790:89;;550:17894:20;;9892:21:5;;;9888:90;;735:10:11;550:17894:20;;8823:4:5;550:17894:20;;;;;;;;;;;;;;;;;;;;10066:31:5;550:17894:20;735:10:11;10066:31:5;;550:17894:20;;;8823:4:5;550:17894:20;;;;;;;;;;;;;;;;;;3079:49;550:17894;;;;;;;;;3079:49;;550:17894;3079:49;;550:17894;;3079:49;;;;;550:17894;;3079:49;;;;550:17894;;3079:49;;550:17894;;3079:49;;;550:17894;;3079:49;;;;;:::i;:::-;;;;;550:17894;3079:49;;;;550:17894;3079:49;;;;;;550:17894;3079:49;;;:::i;550:17894::-;;;;;;;;;;;;;;1837:5:5;550:17894:20;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1837:5:5;550:17894:20;;;;;-1:-1:-1;550:17894:20;;;;;;;-1:-1:-1;;;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;2475:4:1;;:::i;:::-;1315:72:12;;:::i;:::-;550:17894:20;;12278:13;550:17894;;;;;;;;;;;;;;12389:16;;550:17894;12379:26;;550:17894;;12476:6;;;:::i;550:17894::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12278:13;550:17894;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2673:47:1;2688:32;550:17894:20;2673:47:1;;:87;;;;;550:17894:20;;;;;;;2673:87:1;877:25:14;862:40;;;2673:87:1;;;550:17894:20;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;550:17894:20;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;550:17894:20;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;-1:-1:-1;550:17894:20;;;;-1:-1:-1;550:17894:20;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;550:17894:20;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;550:17894:20;;-1:-1:-1;550:17894:20;;;-1:-1:-1;550:17894:20;:::o;:::-;;;;;;;;;;3199:103:1;735:10:11;-1:-1:-1;550:17894:20;;;;;;;;;;953:24;;550:17894;;3519:23:1;3515:108;;3199:103;:::o;:::-;735:10:11;-1:-1:-1;550:17894:20;;;;;;;;;;1112:27;;550:17894;;3519:23:1;3515:108;;3199:103;:::o;:::-;735:10:11;550:17894:20;;;;;;;;;;;;;3519:23:1;3515:108;;3199:103;:::o;:::-;735:10:11;-1:-1:-1;550:17894:20;;;;;;;;;;881:28;;550:17894;;3519:23:1;3515:108;;3199:103;:::o;:::-;550:17894:20;-1:-1:-1;550:17894:20;2954:6:1;550:17894:20;;;-1:-1:-1;550:17894:20;735:10:11;-1:-1:-1;550:17894:20;;;;;-1:-1:-1;550:17894:20;;;3519:23:1;3515:108;;3199:103;:::o;6179:316::-;;-1:-1:-1;550:17894:20;;;;2954:6:1;550:17894:20;;;;;;;;;;;;;;;;;;;;6276:23:1;6272:217;550:17894:20;;;;;;2954:6:1;550:17894:20;;;;;;;;;;;;;6347:4:1;550:17894:20;;;;;;;6370:40:1;735:10:11;6370:40:1;;;6347:4;6424:11;:::o;6272:217::-;6466:12;;;:::o;6732:317::-;;-1:-1:-1;550:17894:20;;;;2954:6:1;550:17894:20;;;;;;;;;;;;;;;;;;;;6826:217:1;550:17894:20;;;;;;2954:6:1;550:17894:20;;;;;;;;;;;;;;;;;;;6924:40:1;735:10:11;6924:40:1;;;550:17894:20;6978:11:1;:::o;5374:300:5:-;;550:17894:20;;;;5457:18:5;;;5453:86;;550:17894:20;5552:16:5;;;5548:86;;1315:72:12;;:::i;:::-;;;:::i;:::-;6074:540:5;550:17894:20;;;;;;;;;;;6321:19:5;;;;6317:115;;550:17894:20;;;;;7064:25:5;550:17894:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;7064:25:5;5374:300::o;6317:115::-;550:17894:20;;6367:50:5;;;550:17894:20;;;;;6367:50:5;;;550:17894:20;;;;;;;;;;;;;;;;10668:60:5;5548:86;550:17894:20;;;5591:32:5;;;5473:1;5591:32;;;550:17894:20;5591:32:5;5453:86;550:17894:20;;;5498:30:5;;;5473:1;5498:30;;;550:17894:20;5498:30:5;550:17894:20;;;;;;;;;:::o;1878:128:12:-;550:17894:20;1796:7:12;550:17894:20;;1939:61:12;;1878:128::o;1939:61::-;1974:15;550:17894:20;;1974:15:12;;;;550:17894:20;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "2780000",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "BRIDGE_ROLE()": "944",
            "DEFAULT_ADMIN_ROLE()": "900",
            "DISPUTE_RESOLVER_ROLE()": "1032",
            "DISPUTE_WINDOW()": "1208",
            "EMERGENCY_ROLE()": "284",
            "MAX_SETTLEMENT_AMOUNT()": "812",
            "SETTLEMENT_ROLE()": "988",
            "SETTLEMENT_TIMEOUT()": "438",
            "allowance(address,address)": "3530",
            "approve(address,uint256)": "24369",
            "balanceOf(address)": "2822",
            "bridgeConfigs(address)": "9207",
            "configureBridge(address,bool,uint256,uint256,uint256)": "95720",
            "confirmSettlement(uint256)": "infinite",
            "createSettlement(address,uint256,string,bytes32)": "infinite",
            "decimals()": "394",
            "disputeFee()": "3069",
            "disputes(uint256)": "infinite",
            "emergencyWithdrawETH()": "infinite",
            "emergencyWithdrawTokens(address,uint256)": "infinite",
            "getBridgeConfig(address)": "9779",
            "getDispute(uint256)": "infinite",
            "getRoleAdmin(bytes32)": "2503",
            "getSettlement(uint256)": "infinite",
            "getUserSettlements(address)": "infinite",
            "grantRole(bytes32,address)": "33407",
            "hasRole(bytes32,address)": "3101",
            "initiateDispute(uint256,uint8,string)": "infinite",
            "name()": "infinite",
            "pause()": "30277",
            "paused()": "2685",
            "processBridgeTransaction(address,address,uint256,address)": "infinite",
            "processedL3Transactions(bytes32)": "3408",
            "renounceRole(bytes32,address)": "29021",
            "resolveDispute(uint256,string,bool)": "infinite",
            "revokeRole(bytes32,address)": "34168",
            "settlementCounter()": "2805",
            "settlementFee()": "2739",
            "settlements(uint256)": "infinite",
            "supportsInterface(bytes4)": "250",
            "symbol()": "infinite",
            "totalDisputes()": "3179",
            "totalSettlements()": "2827",
            "totalSupply()": "2365",
            "transfer(address,uint256)": "infinite",
            "transferFrom(address,address,uint256)": "infinite",
            "unpause()": "27930",
            "updateDisputeFee(uint256)": "28573",
            "updateSettlementFee(uint256)": "28463",
            "userSettlements(address,uint256)": "7205"
          },
          "internal": {
            "_update(address,address,uint256)": "infinite"
          }
        },
        "methodIdentifiers": {
          "BRIDGE_ROLE()": "b5bfddea",
          "DEFAULT_ADMIN_ROLE()": "a217fddf",
          "DISPUTE_RESOLVER_ROLE()": "bfe42a37",
          "DISPUTE_WINDOW()": "f585dc57",
          "EMERGENCY_ROLE()": "20df4359",
          "MAX_SETTLEMENT_AMOUNT()": "933367a8",
          "SETTLEMENT_ROLE()": "ba9cf01d",
          "SETTLEMENT_TIMEOUT()": "3c0a6e38",
          "allowance(address,address)": "dd62ed3e",
          "approve(address,uint256)": "095ea7b3",
          "balanceOf(address)": "70a08231",
          "bridgeConfigs(address)": "427ac0ca",
          "configureBridge(address,bool,uint256,uint256,uint256)": "43b255ac",
          "confirmSettlement(uint256)": "9e924eb5",
          "createSettlement(address,uint256,string,bytes32)": "d1d50fe6",
          "decimals()": "313ce567",
          "disputeFee()": "b9ce896b",
          "disputes(uint256)": "564a565d",
          "emergencyWithdrawETH()": "84536017",
          "emergencyWithdrawTokens(address,uint256)": "917bb998",
          "getBridgeConfig(address)": "c4fc45a8",
          "getDispute(uint256)": "e3a96cbd",
          "getRoleAdmin(bytes32)": "248a9ca3",
          "getSettlement(uint256)": "4c582380",
          "getUserSettlements(address)": "bfcb7040",
          "grantRole(bytes32,address)": "2f2ff15d",
          "hasRole(bytes32,address)": "91d14854",
          "initiateDispute(uint256,uint8,string)": "d0b1149c",
          "name()": "06fdde03",
          "pause()": "8456cb59",
          "paused()": "5c975abb",
          "processBridgeTransaction(address,address,uint256,address)": "068d04d0",
          "processedL3Transactions(bytes32)": "fc1e29b6",
          "renounceRole(bytes32,address)": "36568abe",
          "resolveDispute(uint256,string,bool)": "267f2098",
          "revokeRole(bytes32,address)": "d547741f",
          "settlementCounter()": "84b971a5",
          "settlementFee()": "7d1d7fb8",
          "settlements(uint256)": "08df7dc8",
          "supportsInterface(bytes4)": "01ffc9a7",
          "symbol()": "95d89b41",
          "totalDisputes()": "c5e4ccc4",
          "totalSettlements()": "88dae6a8",
          "totalSupply()": "18160ddd",
          "transfer(address,uint256)": "a9059cbb",
          "transferFrom(address,address,uint256)": "23b872dd",
          "unpause()": "3f4ba83a",
          "updateDisputeFee(uint256)": "9de2e9d7",
          "updateSettlementFee(uint256)": "899c45da",
          "userSettlements(address,uint256)": "76e8a88b"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minConfirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"BridgeConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"DisputeFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"settlementId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"resolution\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"settlementId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"confirmer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SettlementConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"settlementId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"l3TransactionHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SettlementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"settlementId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum GameDinSettlement.DisputeReason\",\"name\":\"reason\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SettlementDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"SettlementFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIDGE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISPUTE_RESOLVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISPUTE_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMERGENCY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SETTLEMENT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTLEMENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTLEMENT_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bridgeConfigs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bridgeAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"configureBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"settlementId\",\"type\":\"uint256\"}],\"name\":\"confirmSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"l3TransactionHash\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"createSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"settlementId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"enum GameDinSettlement.DisputeReason\",\"name\":\"reason\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"resolution\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeAddress\",\"type\":\"address\"}],\"name\":\"getBridgeConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"settlementId\",\"type\":\"uint256\"}],\"name\":\"getDispute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"enum GameDinSettlement.DisputeReason\",\"name\":\"reason\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"resolution\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"settlementId\",\"type\":\"uint256\"}],\"name\":\"getSettlement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GameDinSettlement.SettlementStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"l3TransactionHash\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"disputeDeadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"disputeInitiator\",\"type\":\"address\"},{\"internalType\":\"enum GameDinSettlement.DisputeReason\",\"name\":\"disputeReason\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"disputeDetails\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserSettlements\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"settlementId\",\"type\":\"uint256\"},{\"internalType\":\"enum GameDinSettlement.DisputeReason\",\"name\":\"reason\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"initiateDispute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bridgeAddress\",\"type\":\"address\"}],\"name\":\"processBridgeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedL3Transactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"settlementId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"resolution\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approveSettlement\",\"type\":\"bool\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settlements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"settlementId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GameDinSettlement.SettlementStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"l3TransactionHash\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"disputeDeadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"disputeInitiator\",\"type\":\"address\"},{\"internalType\":\"enum GameDinSettlement.DisputeReason\",\"name\":\"disputeReason\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"disputeDetails\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDisputes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSettlements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateDisputeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateSettlementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userSettlements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"L2 settlement layer for GameDin L3 gaming blockchain Handles cross-chain asset transfers, dispute resolution, and final settlement\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"configureBridge(address,bool,uint256,uint256,uint256)\":{\"details\":\"Configure a bridge\",\"params\":{\"bridgeAddress\":\"Bridge contract address\",\"fee\":\"Bridge fee\",\"isActive\":\"Whether bridge is active\",\"maxAmount\":\"Maximum amount per transaction\",\"minConfirmations\":\"Minimum confirmations required\"}},\"confirmSettlement(uint256)\":{\"details\":\"Confirm a settlement\",\"params\":{\"settlementId\":\"Settlement ID\"}},\"createSettlement(address,uint256,string,bytes32)\":{\"details\":\"Create a new settlement\",\"params\":{\"amount\":\"Settlement amount\",\"l3TransactionHash\":\"L3 transaction hash\",\"merkleRoot\":\"Merkle root for verification\",\"to\":\"Recipient address\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"emergencyWithdrawETH()\":{\"details\":\"Emergency withdraw ETH\"},\"emergencyWithdrawTokens(address,uint256)\":{\"details\":\"Emergency withdraw tokens\",\"params\":{\"amount\":\"Amount to withdraw\",\"token\":\"Token address\"}},\"getBridgeConfig(address)\":{\"details\":\"Get bridge configuration\",\"params\":{\"bridgeAddress\":\"Bridge address\"},\"returns\":{\"bridge\":\"Bridge address\",\"fee\":\"Bridge fee\",\"isActive\":\"Whether active\",\"maxAmount\":\"Maximum amount\",\"minConfirmations\":\"Minimum confirmations\"}},\"getDispute(uint256)\":{\"details\":\"Get dispute details\",\"params\":{\"settlementId\":\"Settlement ID\"},\"returns\":{\"details\":\"Dispute details\",\"id\":\"Settlement ID\",\"initiator\":\"Dispute initiator\",\"reason\":\"Dispute reason\",\"resolution\":\"Resolution details\",\"resolved\":\"Whether resolved\",\"resolver\":\"Resolver address\",\"timestamp\":\"Timestamp\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getSettlement(uint256)\":{\"details\":\"Get settlement details\",\"params\":{\"settlementId\":\"Settlement ID\"},\"returns\":{\"amount\":\"Amount\",\"disputeDeadline\":\"Dispute deadline\",\"disputeDetails\":\"Dispute details\",\"disputeInitiator\":\"Dispute initiator\",\"disputeReason\":\"Dispute reason\",\"from\":\"Sender address\",\"id\":\"Settlement ID\",\"l3TransactionHash\":\"L3 transaction hash\",\"merkleRoot\":\"Merkle root\",\"status\":\"Settlement status\",\"timestamp\":\"Timestamp\",\"to\":\"Recipient address\"}},\"getUserSettlements(address)\":{\"details\":\"Get user settlements\",\"params\":{\"user\":\"User address\"},\"returns\":{\"_0\":\"settlementIds Array of settlement IDs\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initiateDispute(uint256,uint8,string)\":{\"details\":\"Initiate a dispute for a settlement\",\"params\":{\"details\":\"Dispute details\",\"reason\":\"Dispute reason\",\"settlementId\":\"Settlement ID\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"pause()\":{\"details\":\"Pause contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"processBridgeTransaction(address,address,uint256,address)\":{\"details\":\"Process bridge transaction\",\"params\":{\"amount\":\"Amount to transfer\",\"bridgeAddress\":\"Bridge address\",\"from\":\"Source address\",\"to\":\"Destination address\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"resolveDispute(uint256,string,bool)\":{\"details\":\"Resolve a dispute\",\"params\":{\"approveSettlement\":\"Whether to approve the settlement\",\"resolution\":\"Resolution details\",\"settlementId\":\"Settlement ID\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"unpause()\":{\"details\":\"Unpause contract\"},\"updateDisputeFee(uint256)\":{\"details\":\"Update dispute fee\",\"params\":{\"newFee\":\"New fee amount\"}},\"updateSettlementFee(uint256)\":{\"details\":\"Update settlement fee\",\"params\":{\"newFee\":\"New fee amount\"}}},\"title\":\"GameDin Settlement Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GameDinSettlement.sol\":\"GameDinSettlement\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Pausable} from \\\"../../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC-20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_update}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\\n        super._update(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0x756aee61d83960d324973de3a64920a02b480efe662b611fb05ea506d844aa55\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/GameDinSettlement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n/**\\n * @title GameDin Settlement Contract\\n * @dev L2 settlement layer for GameDin L3 gaming blockchain\\n * Handles cross-chain asset transfers, dispute resolution, and final settlement\\n */\\ncontract GameDinSettlement is ERC20, ERC20Pausable, AccessControl, ReentrancyGuard {\\n    // =============================================================================\\n    // CONSTANTS & ROLES\\n    // =============================================================================\\n    \\n    bytes32 public constant SETTLEMENT_ROLE = keccak256(\\\"SETTLEMENT_ROLE\\\");\\n    bytes32 public constant BRIDGE_ROLE = keccak256(\\\"BRIDGE_ROLE\\\");\\n    bytes32 public constant DISPUTE_RESOLVER_ROLE = keccak256(\\\"DISPUTE_RESOLVER_ROLE\\\");\\n    bytes32 public constant EMERGENCY_ROLE = keccak256(\\\"EMERGENCY_ROLE\\\");\\n    \\n    uint256 public constant SETTLEMENT_TIMEOUT = 7 days;\\n    uint256 public constant DISPUTE_WINDOW = 3 days;\\n    uint256 public constant MAX_SETTLEMENT_AMOUNT = 1000000 * 10**18; // 1M tokens\\n    \\n    // =============================================================================\\n    // STRUCTS & ENUMS\\n    // =============================================================================\\n    \\n    enum SettlementStatus {\\n        PENDING,\\n        CONFIRMED,\\n        DISPUTED,\\n        RESOLVED,\\n        CANCELLED\\n    }\\n    \\n    enum DisputeReason {\\n        INSUFFICIENT_FUNDS,\\n        INVALID_TRANSACTION,\\n        FRAUD_DETECTED,\\n        TECHNICAL_ERROR,\\n        OTHER\\n    }\\n    \\n    struct Settlement {\\n        uint256 settlementId;\\n        address from;\\n        address to;\\n        uint256 amount;\\n        uint256 timestamp;\\n        SettlementStatus status;\\n        string l3TransactionHash;\\n        bytes32 merkleRoot;\\n        uint256 disputeDeadline;\\n        address disputeInitiator;\\n        DisputeReason disputeReason;\\n        string disputeDetails;\\n    }\\n    \\n    struct Dispute {\\n        uint256 settlementId;\\n        address initiator;\\n        DisputeReason reason;\\n        string details;\\n        uint256 timestamp;\\n        bool resolved;\\n        address resolver;\\n        string resolution;\\n    }\\n    \\n    struct BridgeConfig {\\n        address bridgeAddress;\\n        bool isActive;\\n        uint256 minConfirmations;\\n        uint256 maxAmount;\\n        uint256 fee;\\n    }\\n    \\n    // =============================================================================\\n    // STATE VARIABLES\\n    // =============================================================================\\n    \\n    uint256 public settlementCounter;\\n    uint256 public totalSettlements;\\n    uint256 public totalDisputes;\\n    uint256 public settlementFee = 0.001 * 10**18; // 0.001 tokens\\n    uint256 public disputeFee = 0.01 * 10**18; // 0.01 tokens\\n    \\n    mapping(uint256 => Settlement) public settlements;\\n    mapping(uint256 => Dispute) public disputes;\\n    mapping(address => uint256[]) public userSettlements;\\n    mapping(bytes32 => bool) public processedL3Transactions;\\n    mapping(address => BridgeConfig) public bridgeConfigs;\\n    \\n    // =============================================================================\\n    // EVENTS\\n    // =============================================================================\\n    \\n    event SettlementCreated(\\n        uint256 indexed settlementId,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        string l3TransactionHash,\\n        uint256 timestamp\\n    );\\n    \\n    event SettlementConfirmed(\\n        uint256 indexed settlementId,\\n        address indexed confirmer,\\n        uint256 timestamp\\n    );\\n    \\n    event SettlementDisputed(\\n        uint256 indexed settlementId,\\n        address indexed initiator,\\n        DisputeReason reason,\\n        string details,\\n        uint256 timestamp\\n    );\\n    \\n    event DisputeResolved(\\n        uint256 indexed settlementId,\\n        address indexed resolver,\\n        string resolution,\\n        uint256 timestamp\\n    );\\n    \\n    event BridgeConfigUpdated(\\n        address indexed bridgeAddress,\\n        bool isActive,\\n        uint256 minConfirmations,\\n        uint256 maxAmount,\\n        uint256 fee\\n    );\\n    \\n    event SettlementFeeUpdated(uint256 oldFee, uint256 newFee);\\n    event DisputeFeeUpdated(uint256 oldFee, uint256 newFee);\\n    \\n    // =============================================================================\\n    // CONSTRUCTOR\\n    // =============================================================================\\n    \\n    constructor(\\n        address initialOwner,\\n        uint256 initialSupply\\n    ) ERC20(\\\"GameDin Settlement Token\\\", \\\"GDIS\\\") {\\n        _grantRole(DEFAULT_ADMIN_ROLE, initialOwner);\\n        _grantRole(SETTLEMENT_ROLE, initialOwner);\\n        _grantRole(BRIDGE_ROLE, initialOwner);\\n        _grantRole(DISPUTE_RESOLVER_ROLE, initialOwner);\\n        _grantRole(EMERGENCY_ROLE, initialOwner);\\n        \\n        _mint(initialOwner, initialSupply);\\n    }\\n    \\n    // =============================================================================\\n    // SETTLEMENT FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Create a new settlement\\n     * @param to Recipient address\\n     * @param amount Settlement amount\\n     * @param l3TransactionHash L3 transaction hash\\n     * @param merkleRoot Merkle root for verification\\n     */\\n    function createSettlement(\\n        address to,\\n        uint256 amount,\\n        string memory l3TransactionHash,\\n        bytes32 merkleRoot\\n    ) external onlyRole(SETTLEMENT_ROLE) whenNotPaused nonReentrant {\\n        require(to != address(0), \\\"Invalid recipient\\\");\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(amount <= MAX_SETTLEMENT_AMOUNT, \\\"Amount exceeds maximum\\\");\\n        require(bytes(l3TransactionHash).length > 0, \\\"Invalid L3 transaction hash\\\");\\n        require(!processedL3Transactions[keccak256(abi.encodePacked(l3TransactionHash))], \\\"L3 transaction already processed\\\");\\n        \\n        settlementCounter++;\\n        uint256 settlementId = settlementCounter;\\n        \\n        Settlement storage settlement = settlements[settlementId];\\n        settlement.settlementId = settlementId;\\n        settlement.from = msg.sender;\\n        settlement.to = to;\\n        settlement.amount = amount;\\n        settlement.timestamp = block.timestamp;\\n        settlement.status = SettlementStatus.PENDING;\\n        settlement.l3TransactionHash = l3TransactionHash;\\n        settlement.merkleRoot = merkleRoot;\\n        settlement.disputeDeadline = block.timestamp + DISPUTE_WINDOW;\\n        \\n        userSettlements[to].push(settlementId);\\n        processedL3Transactions[keccak256(abi.encodePacked(l3TransactionHash))] = true;\\n        totalSettlements++;\\n        \\n        emit SettlementCreated(settlementId, msg.sender, to, amount, l3TransactionHash, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Confirm a settlement\\n     * @param settlementId Settlement ID\\n     */\\n    function confirmSettlement(uint256 settlementId) external onlyRole(SETTLEMENT_ROLE) whenNotPaused {\\n        Settlement storage settlement = settlements[settlementId];\\n        require(settlement.settlementId != 0, \\\"Settlement does not exist\\\");\\n        require(settlement.status == SettlementStatus.PENDING, \\\"Settlement not pending\\\");\\n        require(block.timestamp <= settlement.disputeDeadline, \\\"Dispute window expired\\\");\\n        \\n        settlement.status = SettlementStatus.CONFIRMED;\\n        \\n        // Transfer tokens to recipient\\n        _transfer(settlement.from, settlement.to, settlement.amount);\\n        \\n        emit SettlementConfirmed(settlementId, msg.sender, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Initiate a dispute for a settlement\\n     * @param settlementId Settlement ID\\n     * @param reason Dispute reason\\n     * @param details Dispute details\\n     */\\n    function initiateDispute(\\n        uint256 settlementId,\\n        DisputeReason reason,\\n        string memory details\\n    ) external payable whenNotPaused {\\n        require(msg.value >= disputeFee, \\\"Insufficient dispute fee\\\");\\n        \\n        Settlement storage settlement = settlements[settlementId];\\n        require(settlement.settlementId != 0, \\\"Settlement does not exist\\\");\\n        require(settlement.status == SettlementStatus.PENDING, \\\"Settlement not pending\\\");\\n        require(block.timestamp <= settlement.disputeDeadline, \\\"Dispute window expired\\\");\\n        require(msg.sender == settlement.to || hasRole(DISPUTE_RESOLVER_ROLE, msg.sender), \\\"Not authorized to dispute\\\");\\n        \\n        settlement.status = SettlementStatus.DISPUTED;\\n        settlement.disputeInitiator = msg.sender;\\n        settlement.disputeReason = reason;\\n        settlement.disputeDetails = details;\\n        \\n        totalDisputes++;\\n        \\n        Dispute storage dispute = disputes[settlementId];\\n        dispute.settlementId = settlementId;\\n        dispute.initiator = msg.sender;\\n        dispute.reason = reason;\\n        dispute.details = details;\\n        dispute.timestamp = block.timestamp;\\n        \\n        emit SettlementDisputed(settlementId, msg.sender, reason, details, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Resolve a dispute\\n     * @param settlementId Settlement ID\\n     * @param resolution Resolution details\\n     * @param approveSettlement Whether to approve the settlement\\n     */\\n    function resolveDispute(\\n        uint256 settlementId,\\n        string memory resolution,\\n        bool approveSettlement\\n    ) external onlyRole(DISPUTE_RESOLVER_ROLE) whenNotPaused {\\n        Settlement storage settlement = settlements[settlementId];\\n        Dispute storage dispute = disputes[settlementId];\\n        \\n        require(settlement.settlementId != 0, \\\"Settlement does not exist\\\");\\n        require(settlement.status == SettlementStatus.DISPUTED, \\\"Settlement not disputed\\\");\\n        require(!dispute.resolved, \\\"Dispute already resolved\\\");\\n        \\n        dispute.resolved = true;\\n        dispute.resolver = msg.sender;\\n        dispute.resolution = resolution;\\n        \\n        if (approveSettlement) {\\n            settlement.status = SettlementStatus.RESOLVED;\\n            _transfer(settlement.from, settlement.to, settlement.amount);\\n        } else {\\n            settlement.status = SettlementStatus.CANCELLED;\\n        }\\n        \\n        emit DisputeResolved(settlementId, msg.sender, resolution, block.timestamp);\\n    }\\n    \\n    // =============================================================================\\n    // BRIDGE FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Configure a bridge\\n     * @param bridgeAddress Bridge contract address\\n     * @param isActive Whether bridge is active\\n     * @param minConfirmations Minimum confirmations required\\n     * @param maxAmount Maximum amount per transaction\\n     * @param fee Bridge fee\\n     */\\n    function configureBridge(\\n        address bridgeAddress,\\n        bool isActive,\\n        uint256 minConfirmations,\\n        uint256 maxAmount,\\n        uint256 fee\\n    ) external onlyRole(BRIDGE_ROLE) {\\n        require(bridgeAddress != address(0), \\\"Invalid bridge address\\\");\\n        \\n        BridgeConfig storage config = bridgeConfigs[bridgeAddress];\\n        config.bridgeAddress = bridgeAddress;\\n        config.isActive = isActive;\\n        config.minConfirmations = minConfirmations;\\n        config.maxAmount = maxAmount;\\n        config.fee = fee;\\n        \\n        emit BridgeConfigUpdated(bridgeAddress, isActive, minConfirmations, maxAmount, fee);\\n    }\\n    \\n    /**\\n     * @dev Process bridge transaction\\n     * @param from Source address\\n     * @param to Destination address\\n     * @param amount Amount to transfer\\n     * @param bridgeAddress Bridge address\\n     */\\n    function processBridgeTransaction(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        address bridgeAddress\\n    ) external onlyRole(BRIDGE_ROLE) whenNotPaused {\\n        BridgeConfig storage config = bridgeConfigs[bridgeAddress];\\n        require(config.isActive, \\\"Bridge not active\\\");\\n        require(amount <= config.maxAmount, \\\"Amount exceeds bridge limit\\\");\\n        \\n        _transfer(from, to, amount);\\n    }\\n    \\n    // =============================================================================\\n    // VIEW FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Get settlement details\\n     * @param settlementId Settlement ID\\n     * @return id Settlement ID\\n     * @return from Sender address\\n     * @return to Recipient address\\n     * @return amount Amount\\n     * @return timestamp Timestamp\\n     * @return status Settlement status\\n     * @return l3TransactionHash L3 transaction hash\\n     * @return merkleRoot Merkle root\\n     * @return disputeDeadline Dispute deadline\\n     * @return disputeInitiator Dispute initiator\\n     * @return disputeReason Dispute reason\\n     * @return disputeDetails Dispute details\\n     */\\n    function getSettlement(uint256 settlementId) external view returns (\\n        uint256 id,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 timestamp,\\n        SettlementStatus status,\\n        string memory l3TransactionHash,\\n        bytes32 merkleRoot,\\n        uint256 disputeDeadline,\\n        address disputeInitiator,\\n        DisputeReason disputeReason,\\n        string memory disputeDetails\\n    ) {\\n        Settlement storage settlement = settlements[settlementId];\\n        return (\\n            settlement.settlementId,\\n            settlement.from,\\n            settlement.to,\\n            settlement.amount,\\n            settlement.timestamp,\\n            settlement.status,\\n            settlement.l3TransactionHash,\\n            settlement.merkleRoot,\\n            settlement.disputeDeadline,\\n            settlement.disputeInitiator,\\n            settlement.disputeReason,\\n            settlement.disputeDetails\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get dispute details\\n     * @param settlementId Settlement ID\\n     * @return id Settlement ID\\n     * @return initiator Dispute initiator\\n     * @return reason Dispute reason\\n     * @return details Dispute details\\n     * @return timestamp Timestamp\\n     * @return resolved Whether resolved\\n     * @return resolver Resolver address\\n     * @return resolution Resolution details\\n     */\\n    function getDispute(uint256 settlementId) external view returns (\\n        uint256 id,\\n        address initiator,\\n        DisputeReason reason,\\n        string memory details,\\n        uint256 timestamp,\\n        bool resolved,\\n        address resolver,\\n        string memory resolution\\n    ) {\\n        Dispute storage dispute = disputes[settlementId];\\n        return (\\n            dispute.settlementId,\\n            dispute.initiator,\\n            dispute.reason,\\n            dispute.details,\\n            dispute.timestamp,\\n            dispute.resolved,\\n            dispute.resolver,\\n            dispute.resolution\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get user settlements\\n     * @param user User address\\n     * @return settlementIds Array of settlement IDs\\n     */\\n    function getUserSettlements(address user) external view returns (uint256[] memory) {\\n        return userSettlements[user];\\n    }\\n    \\n    /**\\n     * @dev Get bridge configuration\\n     * @param bridgeAddress Bridge address\\n     * @return bridge Bridge address\\n     * @return isActive Whether active\\n     * @return minConfirmations Minimum confirmations\\n     * @return maxAmount Maximum amount\\n     * @return fee Bridge fee\\n     */\\n    function getBridgeConfig(address bridgeAddress) external view returns (\\n        address bridge,\\n        bool isActive,\\n        uint256 minConfirmations,\\n        uint256 maxAmount,\\n        uint256 fee\\n    ) {\\n        BridgeConfig storage config = bridgeConfigs[bridgeAddress];\\n        return (\\n            config.bridgeAddress,\\n            config.isActive,\\n            config.minConfirmations,\\n            config.maxAmount,\\n            config.fee\\n        );\\n    }\\n    \\n    // =============================================================================\\n    // ADMIN FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Update settlement fee\\n     * @param newFee New fee amount\\n     */\\n    function updateSettlementFee(uint256 newFee) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 oldFee = settlementFee;\\n        settlementFee = newFee;\\n        emit SettlementFeeUpdated(oldFee, newFee);\\n    }\\n    \\n    /**\\n     * @dev Update dispute fee\\n     * @param newFee New fee amount\\n     */\\n    function updateDisputeFee(uint256 newFee) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 oldFee = disputeFee;\\n        disputeFee = newFee;\\n        emit DisputeFeeUpdated(oldFee, newFee);\\n    }\\n    \\n    /**\\n     * @dev Pause contract\\n     */\\n    function pause() external onlyRole(EMERGENCY_ROLE) {\\n        _pause();\\n    }\\n    \\n    /**\\n     * @dev Unpause contract\\n     */\\n    function unpause() external onlyRole(EMERGENCY_ROLE) {\\n        _unpause();\\n    }\\n    \\n    /**\\n     * @dev Emergency withdraw ETH\\n     */\\n    function emergencyWithdrawETH() external onlyRole(EMERGENCY_ROLE) {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n    \\n    /**\\n     * @dev Emergency withdraw tokens\\n     * @param token Token address\\n     * @param amount Amount to withdraw\\n     */\\n    function emergencyWithdrawTokens(address token, uint256 amount) external onlyRole(EMERGENCY_ROLE) {\\n        IERC20(token).transfer(msg.sender, amount);\\n    }\\n    \\n    // =============================================================================\\n    // OVERRIDE FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Override transfer function to check pause\\n     */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20, ERC20Pausable) whenNotPaused {\\n        super._update(from, to, amount);\\n    }\\n    \\n    /**\\n     * @dev Receive function to accept ETH\\n     */\\n    receive() external payable {}\\n} \",\"keccak256\":\"0x8195ae7209cacf78cfdea39415f972f1020def5cd1e8539801cbed38c14c36ca\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 732,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "_balances",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 738,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "_allowances",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 740,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "_totalSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 742,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "_name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 744,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "_symbol",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1564,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "_paused",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 72,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "_roles",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)67_storage)"
          },
          {
            "astId": 1674,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "_status",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 8368,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "settlementCounter",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 8370,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "totalSettlements",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 8372,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "totalDisputes",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 8379,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "settlementFee",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 8386,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "disputeFee",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 8391,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "settlements",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_struct(Settlement)8337_storage)"
          },
          {
            "astId": 8396,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "disputes",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_struct(Dispute)8355_storage)"
          },
          {
            "astId": 8401,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "userSettlements",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
          },
          {
            "astId": 8405,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "processedL3Transactions",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_bytes32,t_bool)"
          },
          {
            "astId": 8410,
            "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
            "label": "bridgeConfigs",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_address,t_struct(BridgeConfig)8366_storage)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)dyn_storage": {
            "base": "t_uint256",
            "encoding": "dynamic_array",
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(DisputeReason)8310": {
            "encoding": "inplace",
            "label": "enum GameDinSettlement.DisputeReason",
            "numberOfBytes": "1"
          },
          "t_enum(SettlementStatus)8304": {
            "encoding": "inplace",
            "label": "enum GameDinSettlement.SettlementStatus",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32",
            "value": "t_array(t_uint256)dyn_storage"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_uint256)"
          },
          "t_mapping(t_address,t_struct(BridgeConfig)8366_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => struct GameDinSettlement.BridgeConfig)",
            "numberOfBytes": "32",
            "value": "t_struct(BridgeConfig)8366_storage"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)67_storage)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => struct AccessControl.RoleData)",
            "numberOfBytes": "32",
            "value": "t_struct(RoleData)67_storage"
          },
          "t_mapping(t_uint256,t_struct(Dispute)8355_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct GameDinSettlement.Dispute)",
            "numberOfBytes": "32",
            "value": "t_struct(Dispute)8355_storage"
          },
          "t_mapping(t_uint256,t_struct(Settlement)8337_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct GameDinSettlement.Settlement)",
            "numberOfBytes": "32",
            "value": "t_struct(Settlement)8337_storage"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(BridgeConfig)8366_storage": {
            "encoding": "inplace",
            "label": "struct GameDinSettlement.BridgeConfig",
            "members": [
              {
                "astId": 8357,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "bridgeAddress",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              },
              {
                "astId": 8359,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "isActive",
                "offset": 20,
                "slot": "0",
                "type": "t_bool"
              },
              {
                "astId": 8361,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "minConfirmations",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 8363,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "maxAmount",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 8365,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "fee",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Dispute)8355_storage": {
            "encoding": "inplace",
            "label": "struct GameDinSettlement.Dispute",
            "members": [
              {
                "astId": 8339,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "settlementId",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 8341,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "initiator",
                "offset": 0,
                "slot": "1",
                "type": "t_address"
              },
              {
                "astId": 8344,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "reason",
                "offset": 20,
                "slot": "1",
                "type": "t_enum(DisputeReason)8310"
              },
              {
                "astId": 8346,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "details",
                "offset": 0,
                "slot": "2",
                "type": "t_string_storage"
              },
              {
                "astId": 8348,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "timestamp",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              },
              {
                "astId": 8350,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "resolved",
                "offset": 0,
                "slot": "4",
                "type": "t_bool"
              },
              {
                "astId": 8352,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "resolver",
                "offset": 1,
                "slot": "4",
                "type": "t_address"
              },
              {
                "astId": 8354,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "resolution",
                "offset": 0,
                "slot": "5",
                "type": "t_string_storage"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(RoleData)67_storage": {
            "encoding": "inplace",
            "label": "struct AccessControl.RoleData",
            "members": [
              {
                "astId": 64,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "hasRole",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "astId": 66,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "adminRole",
                "offset": 0,
                "slot": "1",
                "type": "t_bytes32"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Settlement)8337_storage": {
            "encoding": "inplace",
            "label": "struct GameDinSettlement.Settlement",
            "members": [
              {
                "astId": 8312,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "settlementId",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 8314,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "from",
                "offset": 0,
                "slot": "1",
                "type": "t_address"
              },
              {
                "astId": 8316,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "to",
                "offset": 0,
                "slot": "2",
                "type": "t_address"
              },
              {
                "astId": 8318,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "amount",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              },
              {
                "astId": 8320,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "timestamp",
                "offset": 0,
                "slot": "4",
                "type": "t_uint256"
              },
              {
                "astId": 8323,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "status",
                "offset": 0,
                "slot": "5",
                "type": "t_enum(SettlementStatus)8304"
              },
              {
                "astId": 8325,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "l3TransactionHash",
                "offset": 0,
                "slot": "6",
                "type": "t_string_storage"
              },
              {
                "astId": 8327,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "merkleRoot",
                "offset": 0,
                "slot": "7",
                "type": "t_bytes32"
              },
              {
                "astId": 8329,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "disputeDeadline",
                "offset": 0,
                "slot": "8",
                "type": "t_uint256"
              },
              {
                "astId": 8331,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "disputeInitiator",
                "offset": 0,
                "slot": "9",
                "type": "t_address"
              },
              {
                "astId": 8334,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "disputeReason",
                "offset": 20,
                "slot": "9",
                "type": "t_enum(DisputeReason)8310"
              },
              {
                "astId": 8336,
                "contract": "contracts/GameDinSettlement.sol:GameDinSettlement",
                "label": "disputeDetails",
                "offset": 0,
                "slot": "10",
                "type": "t_string_storage"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Pausable} from \\\"../../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC-20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_update}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\\n        super._update(from, to, value);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\n    },\n    \"contracts/AIOracle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title AIOracle\\n * @dev Advanced AI Oracle for GameDin L3 ecosystem\\n * @dev Integrates NovaSanctum and AthenaMist AI services\\n * @dev Provides real-time gaming analytics and fraud detection\\n */\\ncontract AIOracle is Ownable, ReentrancyGuard {\\n    constructor(\\n        address initialOwner,\\n        address _gamingCore,\\n        address _novaSanctumService,\\n        address _athenaMistService,\\n        address _chainlinkOracle\\n    ) Ownable(initialOwner) {\\n        gamingCore = _gamingCore;\\n        novaSanctumService = _novaSanctumService;\\n        athenaMistService = _athenaMistService;\\n        chainlinkOracle = _chainlinkOracle;\\n        \\n        // Initialize AI services\\n        aiServices[AIServiceType.NOVASANCTUM] = AIService({\\n            serviceName: \\\"NovaSanctum\\\",\\n            serviceAddress: _novaSanctumService,\\n            isActive: true,\\n            successRate: 95,\\n            totalRequests: 0,\\n            lastUpdate: block.timestamp,\\n            fee: 0.0005 ether\\n        });\\n        \\n        aiServices[AIServiceType.ATHENAMIST] = AIService({\\n            serviceName: \\\"AthenaMist\\\",\\n            serviceAddress: _athenaMistService,\\n            isActive: true,\\n            totalRequests: 0,\\n            successRate: 92,\\n            lastUpdate: block.timestamp,\\n            fee: 0.0005 ether\\n        });\\n        \\n        aiServices[AIServiceType.UNIFIED] = AIService({\\n            serviceName: \\\"Unified AI\\\",\\n            serviceAddress: address(this),\\n            isActive: true,\\n            successRate: 98,\\n            totalRequests: 0,\\n            lastUpdate: block.timestamp,\\n            fee: 0.001 ether\\n        });\\n    }\\n    \\n\\n    // ============ STRUCTS ============\\n    \\n    struct AIRequest {\\n        uint256 requestId;\\n        address player;\\n        uint256 gameId;\\n        AIRequestType requestType;\\n        uint256 timestamp;\\n        bool isProcessed;\\n        AIResponse response;\\n        uint256 gasUsed;\\n    }\\n\\n    struct AIResponse {\\n        uint256 fraudScore;\\n        uint256 skillLevel;\\n        uint256 riskAssessment;\\n        uint256 predictedOutcome;\\n        uint256 confidence;\\n        uint256[] behaviorPatterns;\\n        string analysisHash;\\n        uint256 responseTime;\\n    }\\n\\n    struct AIService {\\n        string serviceName;\\n        address serviceAddress;\\n        bool isActive;\\n        uint256 successRate;\\n        uint256 totalRequests;\\n        uint256 lastUpdate;\\n        uint256 fee;\\n    }\\n\\n    struct PlayerAnalytics {\\n        uint256 totalGames;\\n        uint256 averageScore;\\n        uint256 winRate;\\n        uint256 fraudScore;\\n        uint256 skillLevel;\\n        uint256 riskLevel;\\n        uint256[] recentScores;\\n        uint256 lastUpdate;\\n        bool isFlagged;\\n        string flagReason;\\n    }\\n\\n    // ============ ENUMS ============\\n    \\n    enum AIRequestType {\\n        FRAUD_DETECTION,\\n        SKILL_ASSESSMENT,\\n        RISK_ANALYSIS,\\n        OUTCOME_PREDICTION,\\n        BEHAVIOR_ANALYSIS,\\n        COMPREHENSIVE_ANALYSIS\\n    }\\n\\n    enum AIServiceType {\\n        NOVASANCTUM,\\n        ATHENAMIST,\\n        UNIFIED\\n    }\\n\\n    // ============ STATE VARIABLES ============\\n    \\n    uint256 private _requestIds;\\n    \\n    mapping(uint256 => AIRequest) public aiRequests;\\n    mapping(address => PlayerAnalytics) public playerAnalytics;\\n    mapping(AIServiceType => AIService) public aiServices;\\n    mapping(address => uint256) public serviceBalances;\\n    \\n    address public gamingCore;\\n    address public novaSanctumService;\\n    address public athenaMistService;\\n    address public chainlinkOracle;\\n    \\n    uint256 public requestFee = 0.001 ether;\\n    uint256 public responseTimeout = 300; // 5 minutes\\n    uint256 public maxGasLimit = 500000;\\n    uint256 public minConfidence = 70; // 70%\\n    \\n    bool public emergencyMode = false;\\n    \\n    // ============ EVENTS ============\\n    \\n    event AIRequestCreated(\\n        uint256 indexed requestId,\\n        address indexed player,\\n        uint256 indexed gameId,\\n        AIRequestType requestType,\\n        uint256 timestamp\\n    );\\n    \\n    event AIResponseReceived(\\n        uint256 indexed requestId,\\n        address indexed player,\\n        uint256 fraudScore,\\n        uint256 skillLevel,\\n        uint256 confidence,\\n        uint256 responseTime\\n    );\\n    \\n    event PlayerAnalyticsUpdated(\\n        address indexed player,\\n        uint256 fraudScore,\\n        uint256 skillLevel,\\n        uint256 riskLevel,\\n        bool isFlagged\\n    );\\n    \\n    event AIServiceUpdated(\\n        AIServiceType indexed serviceType,\\n        string serviceName,\\n        address serviceAddress,\\n        bool isActive\\n    );\\n    \\n    event EmergencyModeToggled(bool enabled);\\n    event RequestFeeUpdated(uint256 newFee);\\n    event ResponseTimeoutUpdated(uint256 newTimeout);\\n\\n    // ============ MODIFIERS ============\\n    \\n    modifier onlyGamingCore() {\\n        require(msg.sender == gamingCore, \\\"Only GamingCore can call\\\");\\n        _;\\n    }\\n    \\n    modifier onlyAIService() {\\n        require(\\n            msg.sender == novaSanctumService || \\n            msg.sender == athenaMistService,\\n            \\\"Only AI services can call\\\"\\n        );\\n        _;\\n    }\\n    \\n    modifier notEmergencyMode() {\\n        require(!emergencyMode, \\\"Emergency mode active\\\");\\n        _;\\n    }\\n\\n\\n\\n    // ============ CORE FUNCTIONS ============\\n    \\n    /**\\n     * @dev Request AI analysis for a player\\n     * @param player Player address\\n     * @param gameId Game ID\\n     * @param requestType Type of AI analysis requested\\n     * @param serviceType AI service to use\\n     */\\n    function requestAIAnalysis(\\n        address player,\\n        uint256 gameId,\\n        AIRequestType requestType,\\n        AIServiceType serviceType\\n    ) \\n        external \\n        payable \\n        nonReentrant \\n        notEmergencyMode \\n        returns (uint256)\\n    {\\n        require(msg.value >= requestFee, \\\"Insufficient fee\\\");\\n        require(aiServices[serviceType].isActive, \\\"AI service not active\\\");\\n        require(player != address(0), \\\"Invalid player address\\\");\\n        \\n        _requestIds++;\\n        uint256 requestId = _requestIds;\\n        \\n        AIRequest storage request = aiRequests[requestId];\\n        request.requestId = requestId;\\n        request.player = player;\\n        request.gameId = gameId;\\n        request.requestType = requestType;\\n        request.timestamp = block.timestamp;\\n        request.isProcessed = false;\\n        request.gasUsed = 0;\\n        \\n        // Update service statistics\\n        aiServices[serviceType].totalRequests++;\\n        aiServices[serviceType].lastUpdate = block.timestamp;\\n        \\n        emit AIRequestCreated(requestId, player, gameId, requestType, block.timestamp);\\n        \\n        // Process request based on service type\\n        if (serviceType == AIServiceType.NOVASANCTUM) {\\n            _processNovaSanctumRequest(requestId, player, gameId, requestType);\\n        } else if (serviceType == AIServiceType.ATHENAMIST) {\\n            _processAthenaMistRequest(requestId, player, gameId, requestType);\\n        } else if (serviceType == AIServiceType.UNIFIED) {\\n            _processUnifiedRequest(requestId, player, gameId, requestType);\\n        }\\n        \\n        return requestId;\\n    }\\n    \\n    /**\\n     * @dev Process NovaSanctum AI request\\n     * @param requestId Request ID\\n     * @param player Player address\\n     * @param gameId Game ID\\n     * @param requestType Request type\\n     */\\n    function _processNovaSanctumRequest(\\n        uint256 requestId,\\n        address player,\\n        uint256 gameId,\\n        AIRequestType requestType\\n    ) internal {\\n        // Simulate NovaSanctum AI processing\\n        uint256 fraudScore = _calculateFraudScore(player, gameId);\\n        uint256 skillLevel = _calculateSkillLevel(player);\\n        uint256 riskAssessment = _calculateRiskAssessment(player, gameId);\\n        uint256 predictedOutcome = _predictGameOutcome(player, gameId);\\n        \\n        AIResponse memory response = AIResponse({\\n            fraudScore: fraudScore,\\n            skillLevel: skillLevel,\\n            riskAssessment: riskAssessment,\\n            predictedOutcome: predictedOutcome,\\n            confidence: 85 + (block.timestamp % 15), // 85-99% confidence\\n            behaviorPatterns: new uint256[](5),\\n            analysisHash: _generateAnalysisHash(player, gameId),\\n            responseTime: block.timestamp\\n        });\\n        \\n        _completeAIRequest(requestId, response);\\n    }\\n    \\n    /**\\n     * @dev Process AthenaMist AI request\\n     * @param requestId Request ID\\n     * @param player Player address\\n     * @param gameId Game ID\\n     * @param requestType Request type\\n     */\\n    function _processAthenaMistRequest(\\n        uint256 requestId,\\n        address player,\\n        uint256 gameId,\\n        AIRequestType requestType\\n    ) internal {\\n        // Simulate AthenaMist AI processing\\n        uint256 fraudScore = _calculateAdvancedFraudScore(player, gameId);\\n        uint256 skillLevel = _calculateAdvancedSkillLevel(player);\\n        uint256 riskAssessment = _calculateAdvancedRiskAssessment(player, gameId);\\n        uint256 predictedOutcome = _predictAdvancedGameOutcome(player, gameId);\\n        \\n        AIResponse memory response = AIResponse({\\n            fraudScore: fraudScore,\\n            skillLevel: skillLevel,\\n            riskAssessment: riskAssessment,\\n            predictedOutcome: predictedOutcome,\\n            confidence: 88 + (block.timestamp % 12), // 88-99% confidence\\n            behaviorPatterns: _generateBehaviorPatterns(player),\\n            analysisHash: _generateAdvancedAnalysisHash(player, gameId),\\n            responseTime: block.timestamp\\n        });\\n        \\n        _completeAIRequest(requestId, response);\\n    }\\n    \\n    /**\\n     * @dev Process unified AI request (combines both services)\\n     * @param requestId Request ID\\n     * @param player Player address\\n     * @param gameId Game ID\\n     * @param requestType Request type\\n     */\\n    function _processUnifiedRequest(\\n        uint256 requestId,\\n        address player,\\n        uint256 gameId,\\n        AIRequestType requestType\\n    ) internal {\\n        // Get results from both services and combine them\\n        uint256 novaFraudScore = _calculateFraudScore(player, gameId);\\n        uint256 athenaFraudScore = _calculateAdvancedFraudScore(player, gameId);\\n        uint256 unifiedFraudScore = (novaFraudScore + athenaFraudScore) / 2;\\n        \\n        uint256 novaSkillLevel = _calculateSkillLevel(player);\\n        uint256 athenaSkillLevel = _calculateAdvancedSkillLevel(player);\\n        uint256 unifiedSkillLevel = (novaSkillLevel + athenaSkillLevel) / 2;\\n        \\n        uint256 novaRisk = _calculateRiskAssessment(player, gameId);\\n        uint256 athenaRisk = _calculateAdvancedRiskAssessment(player, gameId);\\n        uint256 unifiedRisk = (novaRisk + athenaRisk) / 2;\\n        \\n        uint256 novaOutcome = _predictGameOutcome(player, gameId);\\n        uint256 athenaOutcome = _predictAdvancedGameOutcome(player, gameId);\\n        uint256 unifiedOutcome = (novaOutcome + athenaOutcome) / 2;\\n        \\n        AIResponse memory response = AIResponse({\\n            fraudScore: unifiedFraudScore,\\n            skillLevel: unifiedSkillLevel,\\n            riskAssessment: unifiedRisk,\\n            predictedOutcome: unifiedOutcome,\\n            confidence: 95 + (block.timestamp % 5), // 95-99% confidence\\n            behaviorPatterns: _generateUnifiedBehaviorPatterns(player),\\n            analysisHash: _generateUnifiedAnalysisHash(player, gameId),\\n            responseTime: block.timestamp\\n        });\\n        \\n        _completeAIRequest(requestId, response);\\n    }\\n    \\n    /**\\n     * @dev Complete AI request and update analytics\\n     * @param requestId Request ID\\n     * @param response AI response\\n     */\\n    function _completeAIRequest(uint256 requestId, AIResponse memory response) internal {\\n        AIRequest storage request = aiRequests[requestId];\\n        request.isProcessed = true;\\n        request.response = response;\\n        \\n        // Update player analytics\\n        _updatePlayerAnalytics(request.player, response);\\n        \\n        // Update GamingCore contract\\n        if (gamingCore != address(0)) {\\n            // Call GamingCore to update AI analytics\\n            // This would be implemented in the actual contract\\n        }\\n        \\n        emit AIResponseReceived(\\n            requestId,\\n            request.player,\\n            response.fraudScore,\\n            response.skillLevel,\\n            response.confidence,\\n            response.responseTime\\n        );\\n    }\\n    \\n    /**\\n     * @dev Update player analytics with AI response\\n     * @param player Player address\\n     * @param response AI response\\n     */\\n    function _updatePlayerAnalytics(address player, AIResponse memory response) internal {\\n        PlayerAnalytics storage analytics = playerAnalytics[player];\\n        \\n        analytics.fraudScore = response.fraudScore;\\n        analytics.skillLevel = response.skillLevel;\\n        analytics.riskLevel = response.riskAssessment;\\n        analytics.lastUpdate = block.timestamp;\\n        \\n        // Check if player should be flagged\\n        if (response.fraudScore > 80) {\\n            analytics.isFlagged = true;\\n            analytics.flagReason = \\\"High fraud score detected\\\";\\n        } else if (response.riskAssessment > 85) {\\n            analytics.isFlagged = true;\\n            analytics.flagReason = \\\"High risk behavior detected\\\";\\n        } else {\\n            analytics.isFlagged = false;\\n            analytics.flagReason = \\\"\\\";\\n        }\\n        \\n        emit PlayerAnalyticsUpdated(\\n            player,\\n            response.fraudScore,\\n            response.skillLevel,\\n            response.riskAssessment,\\n            analytics.isFlagged\\n        );\\n    }\\n\\n    // ============ AI CALCULATION FUNCTIONS ============\\n    \\n    /**\\n     * @dev Calculate basic fraud score\\n     * @param player Player address\\n     * @param gameId Game ID\\n     * @return score Fraud score (0-100)\\n     */\\n    function _calculateFraudScore(address player, uint256 gameId) internal view returns (uint256) {\\n        // Simulate NovaSanctum fraud detection\\n        uint256 baseScore = uint256(keccak256(abi.encodePacked(player, gameId, block.timestamp))) % 100;\\n        \\n        // Add some randomness and patterns\\n        if (baseScore > 70) {\\n            return baseScore + (block.timestamp % 20);\\n        } else {\\n            return baseScore - (block.timestamp % 15);\\n        }\\n    }\\n    \\n    /**\\n     * @dev Calculate advanced fraud score\\n     * @param player Player address\\n     * @param gameId Game ID\\n     * @return score Advanced fraud score (0-100)\\n     */\\n    function _calculateAdvancedFraudScore(address player, uint256 gameId) internal view returns (uint256) {\\n        // Simulate AthenaMist advanced fraud detection\\n        uint256 baseScore = uint256(keccak256(abi.encodePacked(player, gameId, \\\"athena\\\", block.timestamp))) % 100;\\n        \\n        // More sophisticated pattern analysis\\n        if (baseScore > 75) {\\n            return baseScore + (block.timestamp % 25);\\n        } else {\\n            return baseScore - (block.timestamp % 20);\\n        }\\n    }\\n    \\n    /**\\n     * @dev Calculate skill level\\n     * @param player Player address\\n     * @return level Skill level (0-100)\\n     */\\n    function _calculateSkillLevel(address player) internal view returns (uint256) {\\n        PlayerAnalytics storage analytics = playerAnalytics[player];\\n        \\n        if (analytics.totalGames == 0) {\\n            return 50; // Default skill level for new players\\n        }\\n        \\n        uint256 baseSkill = (analytics.winRate * 30) + (analytics.averageScore / 10);\\n        return baseSkill > 100 ? 100 : baseSkill;\\n    }\\n    \\n    /**\\n     * @dev Calculate advanced skill level\\n     * @param player Player address\\n     * @return level Advanced skill level (0-100)\\n     */\\n    function _calculateAdvancedSkillLevel(address player) internal view returns (uint256) {\\n        PlayerAnalytics storage analytics = playerAnalytics[player];\\n        \\n        if (analytics.totalGames == 0) {\\n            return 50;\\n        }\\n        \\n        // More sophisticated skill calculation\\n        uint256 consistency = _calculateConsistency(player);\\n        uint256 baseSkill = (analytics.winRate * 25) + (analytics.averageScore / 8) + (consistency * 2);\\n        return baseSkill > 100 ? 100 : baseSkill;\\n    }\\n    \\n    /**\\n     * @dev Calculate risk assessment\\n     * @param player Player address\\n     * @param gameId Game ID\\n     * @return risk Risk assessment (0-100)\\n     */\\n    function _calculateRiskAssessment(address player, uint256 gameId) internal view returns (uint256) {\\n        PlayerAnalytics storage analytics = playerAnalytics[player];\\n        \\n        uint256 baseRisk = 30; // Base risk level\\n        \\n        if (analytics.fraudScore > 70) {\\n            baseRisk += 40;\\n        }\\n        \\n        if (analytics.totalGames < 5) {\\n            baseRisk += 20; // New player risk\\n        }\\n        \\n        return baseRisk > 100 ? 100 : baseRisk;\\n    }\\n    \\n    /**\\n     * @dev Calculate advanced risk assessment\\n     * @param player Player address\\n     * @param gameId Game ID\\n     * @return risk Advanced risk assessment (0-100)\\n     */\\n    function _calculateAdvancedRiskAssessment(address player, uint256 gameId) internal view returns (uint256) {\\n        PlayerAnalytics storage analytics = playerAnalytics[player];\\n        \\n        uint256 baseRisk = 25;\\n        \\n        // More sophisticated risk analysis\\n        if (analytics.fraudScore > 65) {\\n            baseRisk += 45;\\n        }\\n        \\n        if (analytics.totalGames < 10) {\\n            baseRisk += 25;\\n        }\\n        \\n        if (analytics.isFlagged) {\\n            baseRisk += 30;\\n        }\\n        \\n        return baseRisk > 100 ? 100 : baseRisk;\\n    }\\n    \\n    /**\\n     * @dev Predict game outcome\\n     * @param player Player address\\n     * @param gameId Game ID\\n     * @return outcome Predicted outcome (0-100)\\n     */\\n    function _predictGameOutcome(address player, uint256 gameId) internal view returns (uint256) {\\n        PlayerAnalytics storage analytics = playerAnalytics[player];\\n        \\n        if (analytics.totalGames == 0) {\\n            return 50; // 50% chance for new players\\n        }\\n        \\n        uint256 prediction = (analytics.winRate * 40) + (analytics.skillLevel * 30) + (30 - analytics.riskLevel);\\n        return prediction > 100 ? 100 : prediction;\\n    }\\n    \\n    /**\\n     * @dev Predict advanced game outcome\\n     * @param player Player address\\n     * @param gameId Game ID\\n     * @return outcome Advanced predicted outcome (0-100)\\n     */\\n    function _predictAdvancedGameOutcome(address player, uint256 gameId) internal view returns (uint256) {\\n        PlayerAnalytics storage analytics = playerAnalytics[player];\\n        \\n        if (analytics.totalGames == 0) {\\n            return 50;\\n        }\\n        \\n        // More sophisticated outcome prediction\\n        uint256 consistency = _calculateConsistency(player);\\n        uint256 prediction = (analytics.winRate * 35) + (analytics.skillLevel * 25) + (consistency * 20) + (25 - analytics.riskLevel);\\n        return prediction > 100 ? 100 : prediction;\\n    }\\n    \\n    /**\\n     * @dev Calculate player consistency\\n     * @param player Player address\\n     * @return score Consistency score (0-100)\\n     */\\n    function _calculateConsistency(address player) internal view returns (uint256) {\\n        PlayerAnalytics storage analytics = playerAnalytics[player];\\n        \\n        if (analytics.recentScores.length < 3) {\\n            return 50;\\n        }\\n        \\n        // Calculate variance in recent scores\\n        uint256 totalVariance = 0;\\n        for (uint256 i = 1; i < analytics.recentScores.length; i++) {\\n            uint256 diff = analytics.recentScores[i] > analytics.recentScores[i-1] ? \\n                analytics.recentScores[i] - analytics.recentScores[i-1] : \\n                analytics.recentScores[i-1] - analytics.recentScores[i];\\n            totalVariance += diff;\\n        }\\n        \\n        uint256 averageVariance = totalVariance / (analytics.recentScores.length - 1);\\n        return averageVariance < 10 ? 90 : (100 - averageVariance);\\n    }\\n    \\n    /**\\n     * @dev Generate behavior patterns\\n     * @param player Player address\\n     * @return patterns Behavior patterns array\\n     */\\n    function _generateBehaviorPatterns(address player) internal view returns (uint256[] memory) {\\n        uint256[] memory patterns = new uint256[](5);\\n        \\n        for (uint256 i = 0; i < 5; i++) {\\n            patterns[i] = uint256(keccak256(abi.encodePacked(player, i, block.timestamp))) % 100;\\n        }\\n        \\n        return patterns;\\n    }\\n    \\n    /**\\n     * @dev Generate unified behavior patterns\\n     * @param player Player address\\n     * @return patterns Unified behavior patterns array\\n     */\\n    function _generateUnifiedBehaviorPatterns(address player) internal view returns (uint256[] memory) {\\n        uint256[] memory patterns = new uint256[](7);\\n        \\n        for (uint256 i = 0; i < 7; i++) {\\n            patterns[i] = uint256(keccak256(abi.encodePacked(player, \\\"unified\\\", i, block.timestamp))) % 100;\\n        }\\n        \\n        return patterns;\\n    }\\n    \\n    /**\\n     * @dev Generate analysis hash\\n     * @param player Player address\\n     * @param gameId Game ID\\n     * @return hash Analysis hash\\n     */\\n    function _generateAnalysisHash(address player, uint256 gameId) internal view returns (string memory) {\\n        bytes32 hash = keccak256(abi.encodePacked(player, gameId, block.timestamp, \\\"nova\\\"));\\n        return _bytes32ToString(hash);\\n    }\\n    \\n    /**\\n     * @dev Generate advanced analysis hash\\n     * @param player Player address\\n     * @param gameId Game ID\\n     * @return hash Advanced analysis hash\\n     */\\n    function _generateAdvancedAnalysisHash(address player, uint256 gameId) internal view returns (string memory) {\\n        bytes32 hash = keccak256(abi.encodePacked(player, gameId, block.timestamp, \\\"athena\\\"));\\n        return _bytes32ToString(hash);\\n    }\\n    \\n    /**\\n     * @dev Generate unified analysis hash\\n     * @param player Player address\\n     * @param gameId Game ID\\n     * @return hash Unified analysis hash\\n     */\\n    function _generateUnifiedAnalysisHash(address player, uint256 gameId) internal view returns (string memory) {\\n        bytes32 hash = keccak256(abi.encodePacked(player, gameId, block.timestamp, \\\"unified\\\"));\\n        return _bytes32ToString(hash);\\n    }\\n    \\n    /**\\n     * @dev Convert bytes32 to string\\n     * @param _bytes32 Bytes32 value\\n     * @return str String representation\\n     */\\n    function _bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {\\n        uint8 i = 0;\\n        while (i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return string(bytesArray);\\n    }\\n\\n    // ============ VIEW FUNCTIONS ============\\n    \\n    /**\\n     * @dev Get AI request details\\n     * @param requestId Request ID\\n     * @return id Request ID\\n     * @return player Player address\\n     * @return gameId Game ID\\n     * @return requestType Request type\\n     * @return timestamp Timestamp\\n     * @return isProcessed Whether processed\\n     * @return fraudScore Fraud score\\n     * @return skillLevel Skill level\\n     * @return confidence Confidence level\\n     */\\n    function getAIRequest(uint256 requestId) \\n        external \\n        view \\n        returns (\\n            uint256 id,\\n            address player,\\n            uint256 gameId,\\n            AIRequestType requestType,\\n            uint256 timestamp,\\n            bool isProcessed,\\n            uint256 fraudScore,\\n            uint256 skillLevel,\\n            uint256 confidence\\n        )\\n    {\\n        AIRequest storage request = aiRequests[requestId];\\n        return (\\n            request.requestId,\\n            request.player,\\n            request.gameId,\\n            request.requestType,\\n            request.timestamp,\\n            request.isProcessed,\\n            request.response.fraudScore,\\n            request.response.skillLevel,\\n            request.response.confidence\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get player analytics\\n     * @param player Player address\\n     * @return totalGames Total games played\\n     * @return averageScore Average score\\n     * @return winRate Win rate\\n     * @return fraudScore Fraud score\\n     * @return skillLevel Skill level\\n     * @return riskLevel Risk level\\n     * @return isFlagged Whether flagged\\n     * @return flagReason Flag reason\\n     */\\n    function getPlayerAnalytics(address player)\\n        external\\n        view\\n        returns (\\n            uint256 totalGames,\\n            uint256 averageScore,\\n            uint256 winRate,\\n            uint256 fraudScore,\\n            uint256 skillLevel,\\n            uint256 riskLevel,\\n            bool isFlagged,\\n            string memory flagReason\\n        )\\n    {\\n        PlayerAnalytics storage analytics = playerAnalytics[player];\\n        return (\\n            analytics.totalGames,\\n            analytics.averageScore,\\n            analytics.winRate,\\n            analytics.fraudScore,\\n            analytics.skillLevel,\\n            analytics.riskLevel,\\n            analytics.isFlagged,\\n            analytics.flagReason\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get AI service information\\n     * @param serviceType Service type\\n     * @return serviceName Service name\\n     * @return serviceAddress Service address\\n     * @return isActive Whether active\\n     * @return successRate Success rate\\n     * @return totalRequests Total requests\\n     * @return lastUpdate Last update timestamp\\n     * @return fee Service fee\\n     */\\n    function getAIService(AIServiceType serviceType)\\n        external\\n        view\\n        returns (\\n            string memory serviceName,\\n            address serviceAddress,\\n            bool isActive,\\n            uint256 successRate,\\n            uint256 totalRequests,\\n            uint256 lastUpdate,\\n            uint256 fee\\n        )\\n    {\\n        AIService storage service = aiServices[serviceType];\\n        return (\\n            service.serviceName,\\n            service.serviceAddress,\\n            service.isActive,\\n            service.successRate,\\n            service.totalRequests,\\n            service.lastUpdate,\\n            service.fee\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get total requests\\n     * @return total Total number of requests\\n     */\\n    function getTotalRequests() external view returns (uint256) {\\n        return _requestIds;\\n    }\\n\\n    // ============ ADMIN FUNCTIONS ============\\n    \\n    /**\\n     * @dev Update AI service\\n     * @param serviceType Service type\\n     * @param serviceName Service name\\n     * @param serviceAddress Service address\\n     * @param isActive Whether service is active\\n     */\\n    function updateAIService(\\n        AIServiceType serviceType,\\n        string memory serviceName,\\n        address serviceAddress,\\n        bool isActive\\n    ) external onlyOwner {\\n        aiServices[serviceType].serviceName = serviceName;\\n        aiServices[serviceType].serviceAddress = serviceAddress;\\n        aiServices[serviceType].isActive = isActive;\\n        aiServices[serviceType].lastUpdate = block.timestamp;\\n        \\n        emit AIServiceUpdated(serviceType, serviceName, serviceAddress, isActive);\\n    }\\n    \\n    /**\\n     * @dev Toggle emergency mode\\n     */\\n    function toggleEmergencyMode() external onlyOwner {\\n        emergencyMode = !emergencyMode;\\n        emit EmergencyModeToggled(emergencyMode);\\n    }\\n    \\n    /**\\n     * @dev Update request fee\\n     * @param newFee New fee amount\\n     */\\n    function updateRequestFee(uint256 newFee) external onlyOwner {\\n        requestFee = newFee;\\n        emit RequestFeeUpdated(newFee);\\n    }\\n    \\n    /**\\n     * @dev Update response timeout\\n     * @param newTimeout New timeout in seconds\\n     */\\n    function updateResponseTimeout(uint256 newTimeout) external onlyOwner {\\n        responseTimeout = newTimeout;\\n        emit ResponseTimeoutUpdated(newTimeout);\\n    }\\n    \\n    /**\\n     * @dev Withdraw accumulated fees\\n     * @param amount Amount to withdraw\\n     */\\n    function withdrawFees(uint256 amount) external onlyOwner {\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n        payable(owner()).transfer(amount);\\n    }\\n    \\n    /**\\n     * @dev Emergency withdraw all funds\\n     */\\n    function emergencyWithdraw() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n    \\n    /**\\n     * @dev Receive function to accept ETH\\n     */\\n    receive() external payable {}\\n} \"\n    },\n    \"contracts/Bridge.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n/**\\n * @title Bridge\\n * @dev Cross-chain bridge for GameDin L3 ecosystem\\n * @dev Enables seamless asset transfers between blockchains\\n * @dev Supports tokens, NFTs, and gaming assets\\n */\\ncontract Bridge is ReentrancyGuard, Ownable, Pausable {\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\n    \\n\\n    // ============ STRUCTS ============\\n    \\n    struct BridgeRequest {\\n        uint256 requestId;\\n        address sender;\\n        address recipient;\\n        uint256 sourceChainId;\\n        uint256 destinationChainId;\\n        BridgeAssetType assetType;\\n        address assetAddress;\\n        uint256 amount;\\n        uint256 tokenId; // For NFTs\\n        bytes32 hash;\\n        BridgeStatus status;\\n        uint256 timestamp;\\n        uint256 processedAt;\\n        address relayer;\\n    }\\n\\n    struct ChainConfig {\\n        bool isSupported;\\n        uint256 minConfirmations;\\n        uint256 maxGasLimit;\\n        uint256 bridgeFee;\\n        bool isActive;\\n    }\\n\\n    struct RelayerInfo {\\n        address relayer;\\n        uint256 totalProcessed;\\n        uint256 totalVolume;\\n        uint256 lastActivity;\\n        bool isActive;\\n        uint256 stake;\\n    }\\n\\n    // ============ ENUMS ============\\n    \\n    enum BridgeAssetType {\\n        TOKEN,\\n        NFT,\\n        GAMING_ASSET\\n    }\\n\\n    enum BridgeStatus {\\n        PENDING,\\n        PROCESSING,\\n        COMPLETED,\\n        FAILED,\\n        CANCELLED\\n    }\\n\\n    // ============ STATE VARIABLES ============\\n    \\n    uint256 private _requestIds;\\n    \\n    mapping(uint256 => BridgeRequest) public bridgeRequests;\\n    mapping(uint256 => ChainConfig) public supportedChains;\\n    mapping(address => RelayerInfo) public relayers;\\n    mapping(bytes32 => bool) public processedHashes;\\n    mapping(address => bool) public authorizedRelayers;\\n    \\n    uint256 public chainId;\\n    uint256 public minRelayerStake = 1000 * 10**18; // 1000 tokens\\n    uint256 public bridgeFee = 0.001 * 10**18; // 0.001 tokens\\n    uint256 public maxBridgeAmount = 100000 * 10**18; // 100k tokens\\n    uint256 public totalVolume;\\n    uint256 public totalRequests;\\n    \\n    address public gdiToken;\\n    address public gamingCore;\\n    \\n    // ============ EVENTS ============\\n    \\n    event BridgeRequestCreated(\\n        uint256 indexed requestId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 sourceChainId,\\n        uint256 destinationChainId,\\n        BridgeAssetType assetType,\\n        uint256 amount,\\n        bytes32 hash\\n    );\\n    \\n    event BridgeRequestProcessed(\\n        uint256 indexed requestId,\\n        address indexed relayer,\\n        BridgeStatus status,\\n        uint256 timestamp\\n    );\\n    \\n    event ChainAdded(uint256 indexed chainId, uint256 minConfirmations, uint256 bridgeFee);\\n    event ChainUpdated(uint256 indexed chainId, bool isActive);\\n    event RelayerRegistered(address indexed relayer, uint256 stake);\\n    event RelayerStakeUpdated(address indexed relayer, uint256 newStake);\\n    event BridgeFeeUpdated(uint256 newFee);\\n    event MaxBridgeAmountUpdated(uint256 newAmount);\\n\\n    // ============ MODIFIERS ============\\n    \\n    modifier onlyRelayer() {\\n        require(authorizedRelayers[msg.sender], \\\"Only authorized relayers\\\");\\n        _;\\n    }\\n    \\n    modifier onlySupportedChain(uint256 _chainId) {\\n        require(supportedChains[_chainId].isSupported, \\\"Chain not supported\\\");\\n        _;\\n    }\\n    \\n    modifier onlyActiveChain(uint256 _chainId) {\\n        require(supportedChains[_chainId].isActive, \\\"Chain not active\\\");\\n        _;\\n    }\\n\\n    // ============ BRIDGE FUNCTIONS ============\\n    \\n    /**\\n     * @dev Create a bridge request for tokens\\n     * @param recipient Recipient address on destination chain\\n     * @param destinationChainId Destination chain ID\\n     * @param assetAddress Token address\\n     * @param amount Amount to bridge\\n     */\\n    function bridgeTokens(\\n        address recipient,\\n        uint256 destinationChainId,\\n        address assetAddress,\\n        uint256 amount\\n    ) \\n        external \\n        payable \\n        nonReentrant \\n        whenNotPaused \\n        onlySupportedChain(destinationChainId)\\n        onlyActiveChain(destinationChainId)\\n    {\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(amount <= maxBridgeAmount, \\\"Amount exceeds maximum\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(destinationChainId != chainId, \\\"Cannot bridge to same chain\\\");\\n        require(msg.value >= bridgeFee, \\\"Insufficient bridge fee\\\");\\n        \\n        // Transfer tokens from sender to bridge\\n        IERC20(assetAddress).transferFrom(msg.sender, address(this), amount);\\n        \\n        // Create bridge request\\n        _createBridgeRequest(\\n            msg.sender,\\n            recipient,\\n            destinationChainId,\\n            BridgeAssetType.TOKEN,\\n            assetAddress,\\n            amount,\\n            0\\n        );\\n    }\\n    \\n    /**\\n     * @dev Create a bridge request for NFTs\\n     * @param recipient Recipient address on destination chain\\n     * @param destinationChainId Destination chain ID\\n     * @param assetAddress NFT contract address\\n     * @param tokenId Token ID\\n     */\\n    function bridgeNFT(\\n        address recipient,\\n        uint256 destinationChainId,\\n        address assetAddress,\\n        uint256 tokenId\\n    ) \\n        external \\n        payable \\n        nonReentrant \\n        whenNotPaused \\n        onlySupportedChain(destinationChainId)\\n        onlyActiveChain(destinationChainId)\\n    {\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(destinationChainId != chainId, \\\"Cannot bridge to same chain\\\");\\n        require(msg.value >= bridgeFee, \\\"Insufficient bridge fee\\\");\\n        \\n        // Transfer NFT from sender to bridge\\n        IERC721(assetAddress).transferFrom(msg.sender, address(this), tokenId);\\n        \\n        // Create bridge request\\n        _createBridgeRequest(\\n            msg.sender,\\n            recipient,\\n            destinationChainId,\\n            BridgeAssetType.NFT,\\n            assetAddress,\\n            1,\\n            tokenId\\n        );\\n    }\\n    \\n    /**\\n     * @dev Create a bridge request for gaming assets\\n     * @param recipient Recipient address on destination chain\\n     * @param destinationChainId Destination chain ID\\n     * @param assetAddress Gaming asset address\\n     * @param amount Amount to bridge\\n     */\\n    function bridgeGamingAsset(\\n        address recipient,\\n        uint256 destinationChainId,\\n        address assetAddress,\\n        uint256 amount\\n    ) \\n        external \\n        payable \\n        nonReentrant \\n        whenNotPaused \\n        onlySupportedChain(destinationChainId)\\n        onlyActiveChain(destinationChainId)\\n    {\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(destinationChainId != chainId, \\\"Cannot bridge to same chain\\\");\\n        require(msg.value >= bridgeFee, \\\"Insufficient bridge fee\\\");\\n        \\n        // Transfer gaming asset from sender to bridge\\n        IERC20(assetAddress).transferFrom(msg.sender, address(this), amount);\\n        \\n        // Create bridge request\\n        _createBridgeRequest(\\n            msg.sender,\\n            recipient,\\n            destinationChainId,\\n            BridgeAssetType.GAMING_ASSET,\\n            assetAddress,\\n            amount,\\n            0\\n        );\\n    }\\n    \\n    /**\\n     * @dev Internal function to create bridge request\\n     */\\n    function _createBridgeRequest(\\n        address sender,\\n        address recipient,\\n        uint256 destinationChainId,\\n        BridgeAssetType assetType,\\n        address assetAddress,\\n        uint256 amount,\\n        uint256 tokenId\\n    ) internal {\\n        _requestIds++;\\n        uint256 requestId = _requestIds;\\n        \\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                requestId,\\n                sender,\\n                recipient,\\n                chainId,\\n                destinationChainId,\\n                assetType,\\n                assetAddress,\\n                amount,\\n                tokenId,\\n                block.timestamp\\n            )\\n        );\\n        \\n        BridgeRequest storage request = bridgeRequests[requestId];\\n        request.requestId = requestId;\\n        request.sender = sender;\\n        request.recipient = recipient;\\n        request.sourceChainId = chainId;\\n        request.destinationChainId = destinationChainId;\\n        request.assetType = assetType;\\n        request.assetAddress = assetAddress;\\n        request.amount = amount;\\n        request.tokenId = tokenId;\\n        request.hash = hash;\\n        request.status = BridgeStatus.PENDING;\\n        request.timestamp = block.timestamp;\\n        \\n        totalRequests++;\\n        totalVolume += amount;\\n        \\n        emit BridgeRequestCreated(\\n            requestId,\\n            sender,\\n            recipient,\\n            chainId,\\n            destinationChainId,\\n            assetType,\\n            amount,\\n            hash\\n        );\\n    }\\n    \\n    /**\\n     * @dev Process bridge request (called by relayers)\\n     * @param requestId Request ID\\n     * @param success Whether the bridge was successful\\n     */\\n    function processBridgeRequest(\\n        uint256 requestId,\\n        bool success\\n    ) \\n        external \\n        onlyRelayer \\n        nonReentrant \\n        whenNotPaused \\n    {\\n        BridgeRequest storage request = bridgeRequests[requestId];\\n        require(request.requestId != 0, \\\"Request does not exist\\\");\\n        require(request.status == BridgeStatus.PENDING, \\\"Request not pending\\\");\\n        require(request.destinationChainId == chainId, \\\"Wrong destination chain\\\");\\n        \\n        // Update request status\\n        request.status = success ? BridgeStatus.COMPLETED : BridgeStatus.FAILED;\\n        request.processedAt = block.timestamp;\\n        request.relayer = msg.sender;\\n        \\n        // Update relayer stats\\n        RelayerInfo storage relayer = relayers[msg.sender];\\n        relayer.totalProcessed++;\\n        relayer.totalVolume += request.amount;\\n        relayer.lastActivity = block.timestamp;\\n        \\n        if (success) {\\n            // Transfer assets to recipient\\n            if (request.assetType == BridgeAssetType.TOKEN) {\\n                IERC20(request.assetAddress).transfer(request.recipient, request.amount);\\n            } else if (request.assetType == BridgeAssetType.NFT) {\\n                IERC721(request.assetAddress).transferFrom(address(this), request.recipient, request.tokenId);\\n            } else if (request.assetType == BridgeAssetType.GAMING_ASSET) {\\n                IERC20(request.assetAddress).transfer(request.recipient, request.amount);\\n            }\\n        } else {\\n            // Return assets to sender\\n            if (request.assetType == BridgeAssetType.TOKEN) {\\n                IERC20(request.assetAddress).transfer(request.sender, request.amount);\\n            } else if (request.assetType == BridgeAssetType.NFT) {\\n                IERC721(request.assetAddress).transferFrom(address(this), request.sender, request.tokenId);\\n            } else if (request.assetType == BridgeAssetType.GAMING_ASSET) {\\n                IERC20(request.assetAddress).transfer(request.sender, request.amount);\\n            }\\n        }\\n        \\n        emit BridgeRequestProcessed(requestId, msg.sender, request.status, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Cancel bridge request (only sender can cancel)\\n     * @param requestId Request ID\\n     */\\n    function cancelBridgeRequest(uint256 requestId) external nonReentrant {\\n        BridgeRequest storage request = bridgeRequests[requestId];\\n        require(request.requestId != 0, \\\"Request does not exist\\\");\\n        require(request.sender == msg.sender, \\\"Only sender can cancel\\\");\\n        require(request.status == BridgeStatus.PENDING, \\\"Request not pending\\\");\\n        require(request.sourceChainId == chainId, \\\"Wrong source chain\\\");\\n        \\n        request.status = BridgeStatus.CANCELLED;\\n        request.processedAt = block.timestamp;\\n        \\n        // Return assets to sender\\n        if (request.assetType == BridgeAssetType.TOKEN) {\\n            IERC20(request.assetAddress).transfer(request.sender, request.amount);\\n        } else if (request.assetType == BridgeAssetType.NFT) {\\n            IERC721(request.assetAddress).transferFrom(address(this), request.sender, request.tokenId);\\n        } else if (request.assetType == BridgeAssetType.GAMING_ASSET) {\\n            IERC20(request.assetAddress).transfer(request.sender, request.amount);\\n        }\\n        \\n        emit BridgeRequestProcessed(requestId, address(0), BridgeStatus.CANCELLED, block.timestamp);\\n    }\\n\\n    // ============ RELAYER FUNCTIONS ============\\n    \\n    /**\\n     * @dev Register as a relayer\\n     */\\n    function registerRelayer() external payable nonReentrant {\\n        require(msg.value >= minRelayerStake, \\\"Insufficient stake\\\");\\n        require(!authorizedRelayers[msg.sender], \\\"Already registered\\\");\\n        \\n        authorizedRelayers[msg.sender] = true;\\n        \\n        RelayerInfo storage relayer = relayers[msg.sender];\\n        relayer.relayer = msg.sender;\\n        relayer.stake = msg.value;\\n        relayer.isActive = true;\\n        relayer.lastActivity = block.timestamp;\\n        \\n        emit RelayerRegistered(msg.sender, msg.value);\\n    }\\n    \\n    /**\\n     * @dev Update relayer stake\\n     */\\n    function updateRelayerStake() external payable nonReentrant {\\n        require(authorizedRelayers[msg.sender], \\\"Not a relayer\\\");\\n        \\n        RelayerInfo storage relayer = relayers[msg.sender];\\n        relayer.stake += msg.value;\\n        \\n        emit RelayerStakeUpdated(msg.sender, relayer.stake);\\n    }\\n    \\n    /**\\n     * @dev Withdraw relayer stake\\n     * @param amount Amount to withdraw\\n     */\\n    function withdrawRelayerStake(uint256 amount) external nonReentrant {\\n        require(authorizedRelayers[msg.sender], \\\"Not a relayer\\\");\\n        \\n        RelayerInfo storage relayer = relayers[msg.sender];\\n        require(relayer.stake >= amount, \\\"Insufficient stake\\\");\\n        require(relayer.stake - amount >= minRelayerStake, \\\"Stake below minimum\\\");\\n        \\n        relayer.stake -= amount;\\n        payable(msg.sender).transfer(amount);\\n        \\n        emit RelayerStakeUpdated(msg.sender, relayer.stake);\\n    }\\n\\n    // ============ ADMIN FUNCTIONS ============\\n    \\n    /**\\n     * @dev Add supported chain\\n     * @param _chainId Chain ID\\n     * @param minConfirmations Minimum confirmations required\\n     * @param _bridgeFee Bridge fee for this chain\\n     */\\n    function addSupportedChain(\\n        uint256 _chainId,\\n        uint256 minConfirmations,\\n        uint256 _bridgeFee\\n    ) external onlyOwner {\\n        require(_chainId != chainId, \\\"Cannot add current chain\\\");\\n        require(!supportedChains[_chainId].isSupported, \\\"Chain already supported\\\");\\n        \\n        supportedChains[_chainId] = ChainConfig({\\n            isSupported: true,\\n            minConfirmations: minConfirmations,\\n            maxGasLimit: 500000,\\n            bridgeFee: _bridgeFee,\\n            isActive: true\\n        });\\n        \\n        emit ChainAdded(_chainId, minConfirmations, _bridgeFee);\\n    }\\n    \\n    /**\\n     * @dev Update chain status\\n     * @param _chainId Chain ID\\n     * @param isActive Whether chain is active\\n     */\\n    function updateChainStatus(uint256 _chainId, bool isActive) external onlyOwner {\\n        require(supportedChains[_chainId].isSupported, \\\"Chain not supported\\\");\\n        supportedChains[_chainId].isActive = isActive;\\n        \\n        emit ChainUpdated(_chainId, isActive);\\n    }\\n    \\n    /**\\n     * @dev Update bridge fee\\n     * @param newFee New bridge fee\\n     */\\n    function updateBridgeFee(uint256 newFee) external onlyOwner {\\n        bridgeFee = newFee;\\n        emit BridgeFeeUpdated(newFee);\\n    }\\n    \\n    /**\\n     * @dev Update maximum bridge amount\\n     * @param newAmount New maximum amount\\n     */\\n    function updateMaxBridgeAmount(uint256 newAmount) external onlyOwner {\\n        maxBridgeAmount = newAmount;\\n        emit MaxBridgeAmountUpdated(newAmount);\\n    }\\n    \\n    /**\\n     * @dev Update minimum relayer stake\\n     * @param newStake New minimum stake\\n     */\\n    function updateMinRelayerStake(uint256 newStake) external onlyOwner {\\n        minRelayerStake = newStake;\\n    }\\n    \\n    /**\\n     * @dev Pause bridge operations\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n    \\n    /**\\n     * @dev Unpause bridge operations\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n    \\n    /**\\n     * @dev Withdraw accumulated fees\\n     * @param amount Amount to withdraw\\n     */\\n    function withdrawFees(uint256 amount) external onlyOwner {\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n        payable(owner()).transfer(amount);\\n    }\\n    \\n    /**\\n     * @dev Emergency withdraw all funds\\n     */\\n    function emergencyWithdraw() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    // ============ VIEW FUNCTIONS ============\\n    \\n    /**\\n     * @dev Get bridge request details\\n     * @param requestId Request ID\\n     * @return sender Sender address\\n     * @return recipient Recipient address\\n     * @return sourceChainId Source chain ID\\n     * @return destinationChainId Destination chain ID\\n     * @return assetType Asset type\\n     * @return assetAddress Asset address\\n     * @return amount Amount\\n     * @return tokenId Token ID\\n     * @return status Request status\\n     * @return timestamp Timestamp\\n     * @return processedAt Processed timestamp\\n     * @return relayer Relayer address\\n     */\\n    function getBridgeRequest(uint256 requestId)\\n        external\\n        view\\n        returns (\\n            address sender,\\n            address recipient,\\n            uint256 sourceChainId,\\n            uint256 destinationChainId,\\n            BridgeAssetType assetType,\\n            address assetAddress,\\n            uint256 amount,\\n            uint256 tokenId,\\n            BridgeStatus status,\\n            uint256 timestamp,\\n            uint256 processedAt,\\n            address relayer\\n        )\\n    {\\n        BridgeRequest storage request = bridgeRequests[requestId];\\n        return (\\n            request.sender,\\n            request.recipient,\\n            request.sourceChainId,\\n            request.destinationChainId,\\n            request.assetType,\\n            request.assetAddress,\\n            request.amount,\\n            request.tokenId,\\n            request.status,\\n            request.timestamp,\\n            request.processedAt,\\n            request.relayer\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get chain configuration\\n     * @param _chainId Chain ID\\n     * @return isSupported Whether supported\\n     * @return minConfirmations Minimum confirmations\\n     * @return maxGasLimit Maximum gas limit\\n     * @return bridgeFee Bridge fee\\n     * @return isActive Whether active\\n     */\\n    function getChainConfig(uint256 _chainId)\\n        external\\n        view\\n        returns (\\n            bool isSupported,\\n            uint256 minConfirmations,\\n            uint256 maxGasLimit,\\n            uint256 bridgeFee,\\n            bool isActive\\n        )\\n    {\\n        ChainConfig storage config = supportedChains[_chainId];\\n        return (\\n            config.isSupported,\\n            config.minConfirmations,\\n            config.maxGasLimit,\\n            config.bridgeFee,\\n            config.isActive\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get relayer information\\n     * @param relayer Relayer address\\n     * @return totalProcessed Total processed requests\\n     * @return totalVolume Total volume\\n     * @return lastActivity Last activity timestamp\\n     * @return isActive Whether active\\n     * @return stake Stake amount\\n     */\\n    function getRelayerInfo(address relayer)\\n        external\\n        view\\n        returns (\\n            uint256 totalProcessed,\\n            uint256 totalVolume,\\n            uint256 lastActivity,\\n            bool isActive,\\n            uint256 stake\\n        )\\n    {\\n        RelayerInfo storage info = relayers[relayer];\\n        return (\\n            info.totalProcessed,\\n            info.totalVolume,\\n            info.lastActivity,\\n            info.isActive,\\n            info.stake\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get total requests count\\n     * @return total Total requests\\n     */\\n    function getTotalRequests() external view returns (uint256) {\\n        return _requestIds;\\n    }\\n    \\n    /**\\n     * @dev Check if address is authorized relayer\\n     * @param relayer Relayer address\\n     * @return isAuthorized True if authorized\\n     */\\n    function isAuthorizedRelayer(address relayer) external view returns (bool) {\\n        return authorizedRelayers[relayer];\\n    }\\n    \\n    /**\\n     * @dev Get pending requests for a chain\\n     * @param _chainId Chain ID\\n     * @return requests Array of pending request IDs\\n     */\\n    function getPendingRequests(uint256 _chainId) external view returns (uint256[] memory) {\\n        uint256 count = 0;\\n        uint256 total = _requestIds;\\n        \\n        // Count pending requests\\n        for (uint256 i = 1; i <= total; i++) {\\n            if (bridgeRequests[i].destinationChainId == _chainId && \\n                bridgeRequests[i].status == BridgeStatus.PENDING) {\\n                count++;\\n            }\\n        }\\n        \\n        // Create array of pending request IDs\\n        uint256[] memory pendingRequests = new uint256[](count);\\n        uint256 index = 0;\\n        \\n        for (uint256 i = 1; i <= total; i++) {\\n            if (bridgeRequests[i].destinationChainId == _chainId && \\n                bridgeRequests[i].status == BridgeStatus.PENDING) {\\n                pendingRequests[index] = i;\\n                index++;\\n            }\\n        }\\n        \\n        return pendingRequests;\\n    }\\n    \\n    /**\\n     * @dev Receive function to accept ETH\\n     */\\n    receive() external payable {}\\n} \"\n    },\n    \"contracts/GameDinL3Bridge.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n/**\\n * @title GameDin L3 Bridge Contract\\n * @dev Handles cross-chain transfers between L2 settlement layer and L3 gaming network\\n * Manages asset bridging, validation, and cross-chain communication\\n */\\ncontract GameDinL3Bridge is AccessControl, ReentrancyGuard, Pausable {\\n    // =============================================================================\\n    // CONSTANTS & ROLES\\n    // =============================================================================\\n    \\n    bytes32 public constant BRIDGE_OPERATOR_ROLE = keccak256(\\\"BRIDGE_OPERATOR_ROLE\\\");\\n    bytes32 public constant VALIDATOR_ROLE = keccak256(\\\"VALIDATOR_ROLE\\\");\\n    bytes32 public constant EMERGENCY_ROLE = keccak256(\\\"EMERGENCY_ROLE\\\");\\n    \\n    uint256 public constant BRIDGE_TIMEOUT = 24 hours;\\n    uint256 public constant MAX_BRIDGE_AMOUNT = 100000 * 10**18; // 100K tokens\\n    uint256 public constant MIN_BRIDGE_AMOUNT = 1 * 10**18; // 1 token\\n    \\n    // =============================================================================\\n    // STRUCTS & ENUMS\\n    // =============================================================================\\n    \\n    enum BridgeStatus {\\n        PENDING,\\n        PROCESSING,\\n        COMPLETED,\\n        FAILED,\\n        CANCELLED\\n    }\\n    \\n    enum AssetType {\\n        TOKEN,\\n        NFT,\\n        ETH\\n    }\\n    \\n    struct BridgeRequest {\\n        uint256 requestId;\\n        address sender;\\n        address recipient;\\n        AssetType assetType;\\n        address assetAddress;\\n        uint256 amount;\\n        uint256 tokenId;\\n        BridgeStatus status;\\n        uint256 timestamp;\\n        uint256 deadline;\\n        bytes32 merkleRoot;\\n        string l3TransactionHash;\\n        address validator;\\n        bool isL3ToL2;\\n    }\\n    \\n    struct BridgeConfig {\\n        bool isActive;\\n        uint256 minConfirmations;\\n        uint256 maxAmount;\\n        uint256 fee;\\n        uint256 timeout;\\n    }\\n    \\n    struct ValidatorInfo {\\n        bool isActive;\\n        uint256 totalProcessed;\\n        uint256 successRate;\\n        uint256 lastActivity;\\n        uint256 stake;\\n    }\\n    \\n    // =============================================================================\\n    // STATE VARIABLES\\n    // =============================================================================\\n    \\n    address public settlementContract;\\n    uint256 public requestCounter;\\n    uint256 public totalRequests;\\n    uint256 public totalVolume;\\n    uint256 public bridgeFee = 0.001 * 10**18; // 0.001 tokens\\n    uint256 public validatorStake = 1000 * 10**18; // 1000 tokens\\n    \\n    mapping(uint256 => BridgeRequest) public bridgeRequests;\\n    mapping(address => uint256[]) public userRequests;\\n    mapping(address => ValidatorInfo) public validators;\\n    mapping(bytes32 => bool) public processedTransactions;\\n    mapping(address => BridgeConfig) public bridgeConfigs;\\n    \\n    // =============================================================================\\n    // EVENTS\\n    // =============================================================================\\n    \\n    event BridgeRequestCreated(\\n        uint256 indexed requestId,\\n        address indexed sender,\\n        address indexed recipient,\\n        AssetType assetType,\\n        address assetAddress,\\n        uint256 amount,\\n        uint256 tokenId,\\n        bool isL3ToL2,\\n        uint256 timestamp\\n    );\\n    \\n    event BridgeRequestProcessed(\\n        uint256 indexed requestId,\\n        address indexed validator,\\n        BridgeStatus status,\\n        string l3TransactionHash,\\n        uint256 timestamp\\n    );\\n    \\n    event BridgeRequestCompleted(\\n        uint256 indexed requestId,\\n        address indexed recipient,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n    \\n    event ValidatorRegistered(\\n        address indexed validator,\\n        uint256 stake,\\n        uint256 timestamp\\n    );\\n    \\n    event ValidatorStakeUpdated(\\n        address indexed validator,\\n        uint256 oldStake,\\n        uint256 newStake\\n    );\\n    \\n    event BridgeFeeUpdated(uint256 oldFee, uint256 newFee);\\n    event ValidatorStakeUpdated(uint256 oldStake, uint256 newStake);\\n    \\n    // =============================================================================\\n    // CONSTRUCTOR\\n    // =============================================================================\\n    \\n    constructor(address _settlementContract) {\\n        require(_settlementContract != address(0), \\\"Invalid settlement contract\\\");\\n        settlementContract = _settlementContract;\\n        \\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(BRIDGE_OPERATOR_ROLE, msg.sender);\\n        _grantRole(VALIDATOR_ROLE, msg.sender);\\n        _grantRole(EMERGENCY_ROLE, msg.sender);\\n    }\\n    \\n    // =============================================================================\\n    // BRIDGE FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Create a bridge request from L2 to L3\\n     * @param recipient Recipient address on L3\\n     * @param assetType Type of asset to bridge\\n     * @param assetAddress Asset contract address\\n     * @param amount Amount to bridge\\n     * @param tokenId Token ID (for NFTs)\\n     */\\n    function bridgeToL3(\\n        address recipient,\\n        AssetType assetType,\\n        address assetAddress,\\n        uint256 amount,\\n        uint256 tokenId\\n    ) external payable whenNotPaused nonReentrant {\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(amount >= MIN_BRIDGE_AMOUNT, \\\"Amount too small\\\");\\n        require(amount <= MAX_BRIDGE_AMOUNT, \\\"Amount too large\\\");\\n        require(msg.value >= bridgeFee, \\\"Insufficient bridge fee\\\");\\n        \\n        requestCounter++;\\n        uint256 requestId = requestCounter;\\n        \\n        BridgeRequest storage request = bridgeRequests[requestId];\\n        request.requestId = requestId;\\n        request.sender = msg.sender;\\n        request.recipient = recipient;\\n        request.assetType = assetType;\\n        request.assetAddress = assetAddress;\\n        request.amount = amount;\\n        request.tokenId = tokenId;\\n        request.status = BridgeStatus.PENDING;\\n        request.timestamp = block.timestamp;\\n        request.deadline = block.timestamp + BRIDGE_TIMEOUT;\\n        request.isL3ToL2 = false;\\n        \\n        userRequests[msg.sender].push(requestId);\\n        totalRequests++;\\n        totalVolume += amount;\\n        \\n        // Transfer assets to bridge contract\\n        if (assetType == AssetType.TOKEN) {\\n            IERC20(assetAddress).transferFrom(msg.sender, address(this), amount);\\n        } else if (assetType == AssetType.NFT) {\\n            IERC721(assetAddress).transferFrom(msg.sender, address(this), tokenId);\\n        } else if (assetType == AssetType.ETH) {\\n            require(msg.value >= amount + bridgeFee, \\\"Insufficient ETH\\\");\\n        }\\n        \\n        emit BridgeRequestCreated(\\n            requestId,\\n            msg.sender,\\n            recipient,\\n            assetType,\\n            assetAddress,\\n            amount,\\n            tokenId,\\n            false,\\n            block.timestamp\\n        );\\n    }\\n    \\n    /**\\n     * @dev Process bridge request (L2 to L3)\\n     * @param requestId Request ID\\n     * @param l3TransactionHash L3 transaction hash\\n     * @param merkleRoot Merkle root for verification\\n     */\\n    function processL2ToL3Request(\\n        uint256 requestId,\\n        string memory l3TransactionHash,\\n        bytes32 merkleRoot\\n    ) external onlyRole(VALIDATOR_ROLE) whenNotPaused {\\n        BridgeRequest storage request = bridgeRequests[requestId];\\n        require(request.requestId != 0, \\\"Request does not exist\\\");\\n        require(request.status == BridgeStatus.PENDING, \\\"Request not pending\\\");\\n        require(!request.isL3ToL2, \\\"Invalid request direction\\\");\\n        require(block.timestamp <= request.deadline, \\\"Request expired\\\");\\n        \\n        request.status = BridgeStatus.PROCESSING;\\n        request.l3TransactionHash = l3TransactionHash;\\n        request.merkleRoot = merkleRoot;\\n        request.validator = msg.sender;\\n        \\n        // Update validator stats\\n        ValidatorInfo storage validator = validators[msg.sender];\\n        validator.totalProcessed++;\\n        validator.lastActivity = block.timestamp;\\n        \\n        emit BridgeRequestProcessed(\\n            requestId,\\n            msg.sender,\\n            BridgeStatus.PROCESSING,\\n            l3TransactionHash,\\n            block.timestamp\\n        );\\n    }\\n    \\n    /**\\n     * @dev Complete bridge request (L2 to L3)\\n     * @param requestId Request ID\\n     */\\n    function completeL2ToL3Request(uint256 requestId) external onlyRole(VALIDATOR_ROLE) whenNotPaused {\\n        BridgeRequest storage request = bridgeRequests[requestId];\\n        require(request.requestId != 0, \\\"Request does not exist\\\");\\n        require(request.status == BridgeStatus.PROCESSING, \\\"Request not processing\\\");\\n        require(!request.isL3ToL2, \\\"Invalid request direction\\\");\\n        \\n        request.status = BridgeStatus.COMPLETED;\\n        \\n        // Update validator stats\\n        ValidatorInfo storage validator = validators[msg.sender];\\n        validator.successRate = (validator.successRate * (validator.totalProcessed - 1) + 100) / validator.totalProcessed;\\n        \\n        emit BridgeRequestCompleted(\\n            requestId,\\n            request.recipient,\\n            request.amount,\\n            block.timestamp\\n        );\\n    }\\n    \\n    /**\\n     * @dev Process bridge request from L3 to L2\\n     * @param sender Sender address on L3\\n     * @param recipient Recipient address on L2\\n     * @param assetType Type of asset\\n     * @param assetAddress Asset contract address\\n     * @param amount Amount to bridge\\n     * @param tokenId Token ID (for NFTs)\\n     * @param l3TransactionHash L3 transaction hash\\n     * @param merkleRoot Merkle root for verification\\n     */\\n    function processL3ToL2Request(\\n        address sender,\\n        address recipient,\\n        AssetType assetType,\\n        address assetAddress,\\n        uint256 amount,\\n        uint256 tokenId,\\n        string memory l3TransactionHash,\\n        bytes32 merkleRoot\\n    ) external onlyRole(VALIDATOR_ROLE) whenNotPaused {\\n        require(sender != address(0), \\\"Invalid sender\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(amount >= MIN_BRIDGE_AMOUNT, \\\"Amount too small\\\");\\n        require(amount <= MAX_BRIDGE_AMOUNT, \\\"Amount too large\\\");\\n        require(bytes(l3TransactionHash).length > 0, \\\"Invalid L3 transaction hash\\\");\\n        require(!processedTransactions[keccak256(abi.encodePacked(l3TransactionHash))], \\\"Transaction already processed\\\");\\n        \\n        requestCounter++;\\n        uint256 requestId = requestCounter;\\n        \\n        BridgeRequest storage request = bridgeRequests[requestId];\\n        request.requestId = requestId;\\n        request.sender = sender;\\n        request.recipient = recipient;\\n        request.assetType = assetType;\\n        request.assetAddress = assetAddress;\\n        request.amount = amount;\\n        request.tokenId = tokenId;\\n        request.status = BridgeStatus.PROCESSING;\\n        request.timestamp = block.timestamp;\\n        request.deadline = block.timestamp + BRIDGE_TIMEOUT;\\n        request.l3TransactionHash = l3TransactionHash;\\n        request.merkleRoot = merkleRoot;\\n        request.validator = msg.sender;\\n        request.isL3ToL2 = true;\\n        \\n        userRequests[recipient].push(requestId);\\n        totalRequests++;\\n        totalVolume += amount;\\n        processedTransactions[keccak256(abi.encodePacked(l3TransactionHash))] = true;\\n        \\n        // Transfer assets to recipient\\n        if (assetType == AssetType.TOKEN) {\\n            IERC20(assetAddress).transfer(recipient, amount);\\n        } else if (assetType == AssetType.NFT) {\\n            IERC721(assetAddress).transferFrom(address(this), recipient, tokenId);\\n        } else if (assetType == AssetType.ETH) {\\n            payable(recipient).transfer(amount);\\n        }\\n        \\n        request.status = BridgeStatus.COMPLETED;\\n        \\n        // Update validator stats\\n        ValidatorInfo storage validator = validators[msg.sender];\\n        validator.totalProcessed++;\\n        validator.successRate = (validator.successRate * (validator.totalProcessed - 1) + 100) / validator.totalProcessed;\\n        validator.lastActivity = block.timestamp;\\n        \\n        emit BridgeRequestCreated(\\n            requestId,\\n            sender,\\n            recipient,\\n            assetType,\\n            assetAddress,\\n            amount,\\n            tokenId,\\n            true,\\n            block.timestamp\\n        );\\n        \\n        emit BridgeRequestCompleted(\\n            requestId,\\n            recipient,\\n            amount,\\n            block.timestamp\\n        );\\n    }\\n    \\n    // =============================================================================\\n    // VALIDATOR FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Register as a validator\\n     */\\n    function registerValidator() external whenNotPaused {\\n        require(!validators[msg.sender].isActive, \\\"Already registered\\\");\\n        \\n        // Transfer stake to contract\\n        IERC20(settlementContract).transferFrom(msg.sender, address(this), validatorStake);\\n        \\n        ValidatorInfo storage validator = validators[msg.sender];\\n        validator.isActive = true;\\n        validator.stake = validatorStake;\\n        validator.lastActivity = block.timestamp;\\n        \\n        _grantRole(VALIDATOR_ROLE, msg.sender);\\n        \\n        emit ValidatorRegistered(msg.sender, validatorStake, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Unregister as a validator\\n     */\\n    function unregisterValidator() external whenNotPaused {\\n        ValidatorInfo storage validator = validators[msg.sender];\\n        require(validator.isActive, \\\"Not registered\\\");\\n        \\n        validator.isActive = false;\\n        \\n        // Return stake to validator\\n        IERC20(settlementContract).transfer(msg.sender, validator.stake);\\n        \\n        _revokeRole(VALIDATOR_ROLE, msg.sender);\\n        \\n        emit ValidatorStakeUpdated(msg.sender, validator.stake, 0);\\n    }\\n    \\n    // =============================================================================\\n    // VIEW FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Get bridge request details\\n     * @param requestId Request ID\\n     * @return id Request ID\\n     * @return sender Sender address\\n     * @return recipient Recipient address\\n     * @return assetType Asset type\\n     * @return assetAddress Asset address\\n     * @return amount Amount\\n     * @return tokenId Token ID\\n     * @return status Request status\\n     * @return timestamp Timestamp\\n     * @return deadline Deadline\\n     * @return merkleRoot Merkle root\\n     * @return l3TransactionHash L3 transaction hash\\n     * @return validator Validator address\\n     * @return isL3ToL2 Whether L3 to L2\\n     */\\n    function getBridgeRequest(uint256 requestId) external view returns (\\n        uint256 id,\\n        address sender,\\n        address recipient,\\n        AssetType assetType,\\n        address assetAddress,\\n        uint256 amount,\\n        uint256 tokenId,\\n        BridgeStatus status,\\n        uint256 timestamp,\\n        uint256 deadline,\\n        bytes32 merkleRoot,\\n        string memory l3TransactionHash,\\n        address validator,\\n        bool isL3ToL2\\n    ) {\\n        BridgeRequest storage request = bridgeRequests[requestId];\\n        return (\\n            request.requestId,\\n            request.sender,\\n            request.recipient,\\n            request.assetType,\\n            request.assetAddress,\\n            request.amount,\\n            request.tokenId,\\n            request.status,\\n            request.timestamp,\\n            request.deadline,\\n            request.merkleRoot,\\n            request.l3TransactionHash,\\n            request.validator,\\n            request.isL3ToL2\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get validator information\\n     * @param validator Validator address\\n     * @return isActive Whether active\\n     * @return totalProcessed Total processed\\n     * @return successRate Success rate\\n     * @return lastActivity Last activity\\n     * @return stake Stake amount\\n     */\\n    function getValidatorInfo(address validator) external view returns (\\n        bool isActive,\\n        uint256 totalProcessed,\\n        uint256 successRate,\\n        uint256 lastActivity,\\n        uint256 stake\\n    ) {\\n        ValidatorInfo storage info = validators[validator];\\n        return (\\n            info.isActive,\\n            info.totalProcessed,\\n            info.successRate,\\n            info.lastActivity,\\n            info.stake\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get user requests\\n     * @param user User address\\n     * @return requestIds Array of request IDs\\n     */\\n    function getUserRequests(address user) external view returns (uint256[] memory) {\\n        return userRequests[user];\\n    }\\n    \\n    // =============================================================================\\n    // ADMIN FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Update bridge fee\\n     * @param newFee New fee amount\\n     */\\n    function updateBridgeFee(uint256 newFee) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 oldFee = bridgeFee;\\n        bridgeFee = newFee;\\n        emit BridgeFeeUpdated(oldFee, newFee);\\n    }\\n    \\n    /**\\n     * @dev Update validator stake requirement\\n     * @param newStake New stake amount\\n     */\\n    function updateValidatorStake(uint256 newStake) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 oldStake = validatorStake;\\n        validatorStake = newStake;\\n        emit ValidatorStakeUpdated(oldStake, newStake);\\n    }\\n    \\n    /**\\n     * @dev Update settlement contract\\n     * @param newSettlement New settlement contract address\\n     */\\n    function updateSettlementContract(address newSettlement) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(newSettlement != address(0), \\\"Invalid settlement contract\\\");\\n        settlementContract = newSettlement;\\n    }\\n    \\n    /**\\n     * @dev Pause bridge\\n     */\\n    function pause() external onlyRole(EMERGENCY_ROLE) {\\n        _pause();\\n    }\\n    \\n    /**\\n     * @dev Unpause bridge\\n     */\\n    function unpause() external onlyRole(EMERGENCY_ROLE) {\\n        _unpause();\\n    }\\n    \\n    /**\\n     * @dev Emergency withdraw tokens\\n     * @param token Token address\\n     * @param amount Amount to withdraw\\n     */\\n    function emergencyWithdrawTokens(address token, uint256 amount) external onlyRole(EMERGENCY_ROLE) {\\n        IERC20(token).transfer(msg.sender, amount);\\n    }\\n    \\n    /**\\n     * @dev Emergency withdraw ETH\\n     */\\n    function emergencyWithdrawETH() external onlyRole(EMERGENCY_ROLE) {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n    \\n    // =============================================================================\\n    // RECEIVE FUNCTION\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Receive function to accept ETH\\n     */\\n    receive() external payable {}\\n} \"\n    },\n    \"contracts/GameDinSettlement.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n/**\\n * @title GameDin Settlement Contract\\n * @dev L2 settlement layer for GameDin L3 gaming blockchain\\n * Handles cross-chain asset transfers, dispute resolution, and final settlement\\n */\\ncontract GameDinSettlement is ERC20, ERC20Pausable, AccessControl, ReentrancyGuard {\\n    // =============================================================================\\n    // CONSTANTS & ROLES\\n    // =============================================================================\\n    \\n    bytes32 public constant SETTLEMENT_ROLE = keccak256(\\\"SETTLEMENT_ROLE\\\");\\n    bytes32 public constant BRIDGE_ROLE = keccak256(\\\"BRIDGE_ROLE\\\");\\n    bytes32 public constant DISPUTE_RESOLVER_ROLE = keccak256(\\\"DISPUTE_RESOLVER_ROLE\\\");\\n    bytes32 public constant EMERGENCY_ROLE = keccak256(\\\"EMERGENCY_ROLE\\\");\\n    \\n    uint256 public constant SETTLEMENT_TIMEOUT = 7 days;\\n    uint256 public constant DISPUTE_WINDOW = 3 days;\\n    uint256 public constant MAX_SETTLEMENT_AMOUNT = 1000000 * 10**18; // 1M tokens\\n    \\n    // =============================================================================\\n    // STRUCTS & ENUMS\\n    // =============================================================================\\n    \\n    enum SettlementStatus {\\n        PENDING,\\n        CONFIRMED,\\n        DISPUTED,\\n        RESOLVED,\\n        CANCELLED\\n    }\\n    \\n    enum DisputeReason {\\n        INSUFFICIENT_FUNDS,\\n        INVALID_TRANSACTION,\\n        FRAUD_DETECTED,\\n        TECHNICAL_ERROR,\\n        OTHER\\n    }\\n    \\n    struct Settlement {\\n        uint256 settlementId;\\n        address from;\\n        address to;\\n        uint256 amount;\\n        uint256 timestamp;\\n        SettlementStatus status;\\n        string l3TransactionHash;\\n        bytes32 merkleRoot;\\n        uint256 disputeDeadline;\\n        address disputeInitiator;\\n        DisputeReason disputeReason;\\n        string disputeDetails;\\n    }\\n    \\n    struct Dispute {\\n        uint256 settlementId;\\n        address initiator;\\n        DisputeReason reason;\\n        string details;\\n        uint256 timestamp;\\n        bool resolved;\\n        address resolver;\\n        string resolution;\\n    }\\n    \\n    struct BridgeConfig {\\n        address bridgeAddress;\\n        bool isActive;\\n        uint256 minConfirmations;\\n        uint256 maxAmount;\\n        uint256 fee;\\n    }\\n    \\n    // =============================================================================\\n    // STATE VARIABLES\\n    // =============================================================================\\n    \\n    uint256 public settlementCounter;\\n    uint256 public totalSettlements;\\n    uint256 public totalDisputes;\\n    uint256 public settlementFee = 0.001 * 10**18; // 0.001 tokens\\n    uint256 public disputeFee = 0.01 * 10**18; // 0.01 tokens\\n    \\n    mapping(uint256 => Settlement) public settlements;\\n    mapping(uint256 => Dispute) public disputes;\\n    mapping(address => uint256[]) public userSettlements;\\n    mapping(bytes32 => bool) public processedL3Transactions;\\n    mapping(address => BridgeConfig) public bridgeConfigs;\\n    \\n    // =============================================================================\\n    // EVENTS\\n    // =============================================================================\\n    \\n    event SettlementCreated(\\n        uint256 indexed settlementId,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        string l3TransactionHash,\\n        uint256 timestamp\\n    );\\n    \\n    event SettlementConfirmed(\\n        uint256 indexed settlementId,\\n        address indexed confirmer,\\n        uint256 timestamp\\n    );\\n    \\n    event SettlementDisputed(\\n        uint256 indexed settlementId,\\n        address indexed initiator,\\n        DisputeReason reason,\\n        string details,\\n        uint256 timestamp\\n    );\\n    \\n    event DisputeResolved(\\n        uint256 indexed settlementId,\\n        address indexed resolver,\\n        string resolution,\\n        uint256 timestamp\\n    );\\n    \\n    event BridgeConfigUpdated(\\n        address indexed bridgeAddress,\\n        bool isActive,\\n        uint256 minConfirmations,\\n        uint256 maxAmount,\\n        uint256 fee\\n    );\\n    \\n    event SettlementFeeUpdated(uint256 oldFee, uint256 newFee);\\n    event DisputeFeeUpdated(uint256 oldFee, uint256 newFee);\\n    \\n    // =============================================================================\\n    // CONSTRUCTOR\\n    // =============================================================================\\n    \\n    constructor(\\n        address initialOwner,\\n        uint256 initialSupply\\n    ) ERC20(\\\"GameDin Settlement Token\\\", \\\"GDIS\\\") {\\n        _grantRole(DEFAULT_ADMIN_ROLE, initialOwner);\\n        _grantRole(SETTLEMENT_ROLE, initialOwner);\\n        _grantRole(BRIDGE_ROLE, initialOwner);\\n        _grantRole(DISPUTE_RESOLVER_ROLE, initialOwner);\\n        _grantRole(EMERGENCY_ROLE, initialOwner);\\n        \\n        _mint(initialOwner, initialSupply);\\n    }\\n    \\n    // =============================================================================\\n    // SETTLEMENT FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Create a new settlement\\n     * @param to Recipient address\\n     * @param amount Settlement amount\\n     * @param l3TransactionHash L3 transaction hash\\n     * @param merkleRoot Merkle root for verification\\n     */\\n    function createSettlement(\\n        address to,\\n        uint256 amount,\\n        string memory l3TransactionHash,\\n        bytes32 merkleRoot\\n    ) external onlyRole(SETTLEMENT_ROLE) whenNotPaused nonReentrant {\\n        require(to != address(0), \\\"Invalid recipient\\\");\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(amount <= MAX_SETTLEMENT_AMOUNT, \\\"Amount exceeds maximum\\\");\\n        require(bytes(l3TransactionHash).length > 0, \\\"Invalid L3 transaction hash\\\");\\n        require(!processedL3Transactions[keccak256(abi.encodePacked(l3TransactionHash))], \\\"L3 transaction already processed\\\");\\n        \\n        settlementCounter++;\\n        uint256 settlementId = settlementCounter;\\n        \\n        Settlement storage settlement = settlements[settlementId];\\n        settlement.settlementId = settlementId;\\n        settlement.from = msg.sender;\\n        settlement.to = to;\\n        settlement.amount = amount;\\n        settlement.timestamp = block.timestamp;\\n        settlement.status = SettlementStatus.PENDING;\\n        settlement.l3TransactionHash = l3TransactionHash;\\n        settlement.merkleRoot = merkleRoot;\\n        settlement.disputeDeadline = block.timestamp + DISPUTE_WINDOW;\\n        \\n        userSettlements[to].push(settlementId);\\n        processedL3Transactions[keccak256(abi.encodePacked(l3TransactionHash))] = true;\\n        totalSettlements++;\\n        \\n        emit SettlementCreated(settlementId, msg.sender, to, amount, l3TransactionHash, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Confirm a settlement\\n     * @param settlementId Settlement ID\\n     */\\n    function confirmSettlement(uint256 settlementId) external onlyRole(SETTLEMENT_ROLE) whenNotPaused {\\n        Settlement storage settlement = settlements[settlementId];\\n        require(settlement.settlementId != 0, \\\"Settlement does not exist\\\");\\n        require(settlement.status == SettlementStatus.PENDING, \\\"Settlement not pending\\\");\\n        require(block.timestamp <= settlement.disputeDeadline, \\\"Dispute window expired\\\");\\n        \\n        settlement.status = SettlementStatus.CONFIRMED;\\n        \\n        // Transfer tokens to recipient\\n        _transfer(settlement.from, settlement.to, settlement.amount);\\n        \\n        emit SettlementConfirmed(settlementId, msg.sender, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Initiate a dispute for a settlement\\n     * @param settlementId Settlement ID\\n     * @param reason Dispute reason\\n     * @param details Dispute details\\n     */\\n    function initiateDispute(\\n        uint256 settlementId,\\n        DisputeReason reason,\\n        string memory details\\n    ) external payable whenNotPaused {\\n        require(msg.value >= disputeFee, \\\"Insufficient dispute fee\\\");\\n        \\n        Settlement storage settlement = settlements[settlementId];\\n        require(settlement.settlementId != 0, \\\"Settlement does not exist\\\");\\n        require(settlement.status == SettlementStatus.PENDING, \\\"Settlement not pending\\\");\\n        require(block.timestamp <= settlement.disputeDeadline, \\\"Dispute window expired\\\");\\n        require(msg.sender == settlement.to || hasRole(DISPUTE_RESOLVER_ROLE, msg.sender), \\\"Not authorized to dispute\\\");\\n        \\n        settlement.status = SettlementStatus.DISPUTED;\\n        settlement.disputeInitiator = msg.sender;\\n        settlement.disputeReason = reason;\\n        settlement.disputeDetails = details;\\n        \\n        totalDisputes++;\\n        \\n        Dispute storage dispute = disputes[settlementId];\\n        dispute.settlementId = settlementId;\\n        dispute.initiator = msg.sender;\\n        dispute.reason = reason;\\n        dispute.details = details;\\n        dispute.timestamp = block.timestamp;\\n        \\n        emit SettlementDisputed(settlementId, msg.sender, reason, details, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Resolve a dispute\\n     * @param settlementId Settlement ID\\n     * @param resolution Resolution details\\n     * @param approveSettlement Whether to approve the settlement\\n     */\\n    function resolveDispute(\\n        uint256 settlementId,\\n        string memory resolution,\\n        bool approveSettlement\\n    ) external onlyRole(DISPUTE_RESOLVER_ROLE) whenNotPaused {\\n        Settlement storage settlement = settlements[settlementId];\\n        Dispute storage dispute = disputes[settlementId];\\n        \\n        require(settlement.settlementId != 0, \\\"Settlement does not exist\\\");\\n        require(settlement.status == SettlementStatus.DISPUTED, \\\"Settlement not disputed\\\");\\n        require(!dispute.resolved, \\\"Dispute already resolved\\\");\\n        \\n        dispute.resolved = true;\\n        dispute.resolver = msg.sender;\\n        dispute.resolution = resolution;\\n        \\n        if (approveSettlement) {\\n            settlement.status = SettlementStatus.RESOLVED;\\n            _transfer(settlement.from, settlement.to, settlement.amount);\\n        } else {\\n            settlement.status = SettlementStatus.CANCELLED;\\n        }\\n        \\n        emit DisputeResolved(settlementId, msg.sender, resolution, block.timestamp);\\n    }\\n    \\n    // =============================================================================\\n    // BRIDGE FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Configure a bridge\\n     * @param bridgeAddress Bridge contract address\\n     * @param isActive Whether bridge is active\\n     * @param minConfirmations Minimum confirmations required\\n     * @param maxAmount Maximum amount per transaction\\n     * @param fee Bridge fee\\n     */\\n    function configureBridge(\\n        address bridgeAddress,\\n        bool isActive,\\n        uint256 minConfirmations,\\n        uint256 maxAmount,\\n        uint256 fee\\n    ) external onlyRole(BRIDGE_ROLE) {\\n        require(bridgeAddress != address(0), \\\"Invalid bridge address\\\");\\n        \\n        BridgeConfig storage config = bridgeConfigs[bridgeAddress];\\n        config.bridgeAddress = bridgeAddress;\\n        config.isActive = isActive;\\n        config.minConfirmations = minConfirmations;\\n        config.maxAmount = maxAmount;\\n        config.fee = fee;\\n        \\n        emit BridgeConfigUpdated(bridgeAddress, isActive, minConfirmations, maxAmount, fee);\\n    }\\n    \\n    /**\\n     * @dev Process bridge transaction\\n     * @param from Source address\\n     * @param to Destination address\\n     * @param amount Amount to transfer\\n     * @param bridgeAddress Bridge address\\n     */\\n    function processBridgeTransaction(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        address bridgeAddress\\n    ) external onlyRole(BRIDGE_ROLE) whenNotPaused {\\n        BridgeConfig storage config = bridgeConfigs[bridgeAddress];\\n        require(config.isActive, \\\"Bridge not active\\\");\\n        require(amount <= config.maxAmount, \\\"Amount exceeds bridge limit\\\");\\n        \\n        _transfer(from, to, amount);\\n    }\\n    \\n    // =============================================================================\\n    // VIEW FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Get settlement details\\n     * @param settlementId Settlement ID\\n     * @return id Settlement ID\\n     * @return from Sender address\\n     * @return to Recipient address\\n     * @return amount Amount\\n     * @return timestamp Timestamp\\n     * @return status Settlement status\\n     * @return l3TransactionHash L3 transaction hash\\n     * @return merkleRoot Merkle root\\n     * @return disputeDeadline Dispute deadline\\n     * @return disputeInitiator Dispute initiator\\n     * @return disputeReason Dispute reason\\n     * @return disputeDetails Dispute details\\n     */\\n    function getSettlement(uint256 settlementId) external view returns (\\n        uint256 id,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 timestamp,\\n        SettlementStatus status,\\n        string memory l3TransactionHash,\\n        bytes32 merkleRoot,\\n        uint256 disputeDeadline,\\n        address disputeInitiator,\\n        DisputeReason disputeReason,\\n        string memory disputeDetails\\n    ) {\\n        Settlement storage settlement = settlements[settlementId];\\n        return (\\n            settlement.settlementId,\\n            settlement.from,\\n            settlement.to,\\n            settlement.amount,\\n            settlement.timestamp,\\n            settlement.status,\\n            settlement.l3TransactionHash,\\n            settlement.merkleRoot,\\n            settlement.disputeDeadline,\\n            settlement.disputeInitiator,\\n            settlement.disputeReason,\\n            settlement.disputeDetails\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get dispute details\\n     * @param settlementId Settlement ID\\n     * @return id Settlement ID\\n     * @return initiator Dispute initiator\\n     * @return reason Dispute reason\\n     * @return details Dispute details\\n     * @return timestamp Timestamp\\n     * @return resolved Whether resolved\\n     * @return resolver Resolver address\\n     * @return resolution Resolution details\\n     */\\n    function getDispute(uint256 settlementId) external view returns (\\n        uint256 id,\\n        address initiator,\\n        DisputeReason reason,\\n        string memory details,\\n        uint256 timestamp,\\n        bool resolved,\\n        address resolver,\\n        string memory resolution\\n    ) {\\n        Dispute storage dispute = disputes[settlementId];\\n        return (\\n            dispute.settlementId,\\n            dispute.initiator,\\n            dispute.reason,\\n            dispute.details,\\n            dispute.timestamp,\\n            dispute.resolved,\\n            dispute.resolver,\\n            dispute.resolution\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get user settlements\\n     * @param user User address\\n     * @return settlementIds Array of settlement IDs\\n     */\\n    function getUserSettlements(address user) external view returns (uint256[] memory) {\\n        return userSettlements[user];\\n    }\\n    \\n    /**\\n     * @dev Get bridge configuration\\n     * @param bridgeAddress Bridge address\\n     * @return bridge Bridge address\\n     * @return isActive Whether active\\n     * @return minConfirmations Minimum confirmations\\n     * @return maxAmount Maximum amount\\n     * @return fee Bridge fee\\n     */\\n    function getBridgeConfig(address bridgeAddress) external view returns (\\n        address bridge,\\n        bool isActive,\\n        uint256 minConfirmations,\\n        uint256 maxAmount,\\n        uint256 fee\\n    ) {\\n        BridgeConfig storage config = bridgeConfigs[bridgeAddress];\\n        return (\\n            config.bridgeAddress,\\n            config.isActive,\\n            config.minConfirmations,\\n            config.maxAmount,\\n            config.fee\\n        );\\n    }\\n    \\n    // =============================================================================\\n    // ADMIN FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Update settlement fee\\n     * @param newFee New fee amount\\n     */\\n    function updateSettlementFee(uint256 newFee) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 oldFee = settlementFee;\\n        settlementFee = newFee;\\n        emit SettlementFeeUpdated(oldFee, newFee);\\n    }\\n    \\n    /**\\n     * @dev Update dispute fee\\n     * @param newFee New fee amount\\n     */\\n    function updateDisputeFee(uint256 newFee) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 oldFee = disputeFee;\\n        disputeFee = newFee;\\n        emit DisputeFeeUpdated(oldFee, newFee);\\n    }\\n    \\n    /**\\n     * @dev Pause contract\\n     */\\n    function pause() external onlyRole(EMERGENCY_ROLE) {\\n        _pause();\\n    }\\n    \\n    /**\\n     * @dev Unpause contract\\n     */\\n    function unpause() external onlyRole(EMERGENCY_ROLE) {\\n        _unpause();\\n    }\\n    \\n    /**\\n     * @dev Emergency withdraw ETH\\n     */\\n    function emergencyWithdrawETH() external onlyRole(EMERGENCY_ROLE) {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n    \\n    /**\\n     * @dev Emergency withdraw tokens\\n     * @param token Token address\\n     * @param amount Amount to withdraw\\n     */\\n    function emergencyWithdrawTokens(address token, uint256 amount) external onlyRole(EMERGENCY_ROLE) {\\n        IERC20(token).transfer(msg.sender, amount);\\n    }\\n    \\n    // =============================================================================\\n    // OVERRIDE FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Override transfer function to check pause\\n     */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20, ERC20Pausable) whenNotPaused {\\n        super._update(from, to, amount);\\n    }\\n    \\n    /**\\n     * @dev Receive function to accept ETH\\n     */\\n    receive() external payable {}\\n} \"\n    },\n    \"contracts/GameDinToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n\\n/**\\n * @title GameDin Token (GDIN)\\n * @dev Enhanced gaming token with L3 features, AI integration, and gaming mechanics\\n * @author GameDin Team\\n * @notice This token includes XP/leveling, achievements, gas sponsoring, and AI-powered features\\n */\\ncontract GameDinToken is ERC20, Ownable, ReentrancyGuard, Pausable {\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address initialOwner\\n    ) ERC20(name, symbol) Ownable(initialOwner) {\\n        _mint(initialOwner, 1000000000 * 10**decimals()); // 1B tokens\\n        gasSponsorPool = 1000000 * 10**decimals(); // 1M tokens for gas sponsoring\\n        \\n        // Initialize first achievement\\n        _createAchievement(\\n            \\\"FIRST_STEPS\\\",\\n            \\\"Take your first steps in the GameDin universe\\\",\\n            100, // 100 XP\\n            10 * 10**decimals() // 10 tokens\\n        );\\n    }\\n    \\n\\n    // =============================================================================\\n    // STRUCTS AND ENUMS\\n    // =============================================================================\\n    \\n    struct PlayerProfile {\\n        uint256 xp;                    // Experience points\\n        uint256 level;                 // Player level\\n        uint256 prestige;              // Prestige level\\n        uint256 lastActivity;          // Last activity timestamp\\n        uint256 totalGamesPlayed;      // Total games played\\n        uint256 totalRewardsEarned;    // Total rewards earned\\n        bool isActive;                 // Activity status\\n        mapping(string => uint256) achievements; // Achievement tracking\\n        mapping(string => uint256) gameStats;    // Game-specific statistics\\n    }\\n\\n    struct Achievement {\\n        string name;                   // Achievement name\\n        string description;            // Achievement description\\n        uint256 xpReward;              // XP reward for unlocking\\n        uint256 tokenReward;           // Token reward for unlocking\\n        bool isActive;                 // Whether achievement is active\\n        uint256 unlockCount;           // How many times unlocked\\n        uint256 maxUnlocks;            // Maximum unlocks (0 = unlimited)\\n    }\\n\\n    struct GameAction {\\n        string gameId;                 // Game identifier\\n        string actionType;             // Type of action\\n        uint256 timestamp;             // Action timestamp\\n        uint256 xpGained;              // XP gained from action\\n        uint256 tokensEarned;          // Tokens earned from action\\n        bytes gameData;                // Additional game data\\n    }\\n\\n    // =============================================================================\\n    // STATE VARIABLES\\n    // =============================================================================\\n\\n    // Gaming-specific mappings\\n    mapping(address => PlayerProfile) public playerProfiles;\\n    mapping(bytes32 => Achievement) public achievements;\\n    mapping(address => GameAction[]) public playerActions;\\n    mapping(address => bool) public gameContracts;\\n    mapping(address => bool) public gasSponsors;\\n    mapping(address => uint256) public sponsoredGasAmounts;\\n    \\n    // L3 specific features\\n    address public l3Bridge;\\n    address public novaSanctumOracle;\\n    address public gamingEngine;\\n    \\n    // Gaming configuration\\n    uint256 public constant XP_PER_LEVEL = 1000;\\n    uint256 public constant MAX_LEVEL = 100;\\n    uint256 public constant PRESTIGE_THRESHOLD = 100000; // 100k XP for prestige\\n    uint256 public gasSponsorPool;\\n    uint256 public totalXPDistributed;\\n    uint256 public totalAchievementsUnlocked;\\n    \\n    // Counters\\n    uint256 private _achievementCounter;\\n    uint256 private _playerCounter;\\n    \\n    // =============================================================================\\n    // EVENTS\\n    // =============================================================================\\n    \\n    event PlayerGameAction(\\n        address indexed player,\\n        string indexed gameId,\\n        string actionType,\\n        uint256 xpGained,\\n        uint256 tokensEarned,\\n        uint256 timestamp\\n    );\\n    \\n    event PlayerLevelUp(\\n        address indexed player,\\n        uint256 oldLevel,\\n        uint256 newLevel,\\n        uint256 totalXP\\n    );\\n    \\n    event PlayerPrestige(\\n        address indexed player,\\n        uint256 oldPrestige,\\n        uint256 newPrestige,\\n        uint256 totalXP\\n    );\\n    \\n    event AchievementUnlocked(\\n        address indexed player,\\n        bytes32 indexed achievementId,\\n        string achievementName,\\n        uint256 xpReward,\\n        uint256 tokenReward\\n    );\\n    \\n    event GasSponsored(\\n        address indexed sponsor,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n    \\n    event GameContractAdded(address indexed gameContract, address indexed addedBy);\\n    event GameContractRemoved(address indexed gameContract, address indexed removedBy);\\n    event GasSponsorAdded(address indexed sponsor, address indexed addedBy);\\n    event GasSponsorRemoved(address indexed sponsor, address indexed removedBy);\\n    \\n    // =============================================================================\\n    // CONSTRUCTOR\\n    // =============================================================================\\n    \\n\\n    \\n    // =============================================================================\\n    // GAMING MECHANICS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Reward a player for gaming actions with AI validation\\n     * @param player Player address to reward\\n     * @param xpAmount XP amount to award\\n     * @param tokenAmount Token amount to award\\n     * @param gameId Game identifier\\n     * @param actionType Type of action performed\\n     * @param gameData Additional game data\\n     */\\n    function rewardPlayer(\\n        address player,\\n        uint256 xpAmount,\\n        uint256 tokenAmount,\\n        string memory gameId,\\n        string memory actionType,\\n        bytes memory gameData\\n    ) external onlyGameContract nonReentrant whenNotPaused {\\n        require(player != address(0), \\\"Invalid player address\\\");\\n        require(xpAmount > 0 || tokenAmount > 0, \\\"Must award XP or tokens\\\");\\n        \\n        // AI validation through NovaSanctum Oracle\\n        if (novaSanctumOracle != address(0)) {\\n            require(\\n                INovaSanctumOracle(novaSanctumOracle).validatePlayerAction(\\n                    player,\\n                    gameId,\\n                    actionType,\\n                    xpAmount,\\n                    tokenAmount,\\n                    gameData\\n                ),\\n                \\\"AI validation failed\\\"\\n            );\\n        }\\n        \\n        // Update player profile\\n        PlayerProfile storage profile = playerProfiles[player];\\n        \\n        // Award XP\\n        if (xpAmount > 0) {\\n            profile.xp += xpAmount;\\n            totalXPDistributed += xpAmount;\\n            \\n            // Check for level up\\n            uint256 newLevel = profile.xp / XP_PER_LEVEL;\\n            if (newLevel > profile.level && newLevel <= MAX_LEVEL) {\\n                uint256 oldLevel = profile.level;\\n                profile.level = newLevel;\\n                emit PlayerLevelUp(player, oldLevel, newLevel, profile.xp);\\n            }\\n            \\n            // Check for prestige\\n            if (profile.xp >= PRESTIGE_THRESHOLD && profile.xp % PRESTIGE_THRESHOLD == 0) {\\n                uint256 oldPrestige = profile.prestige;\\n                profile.prestige++;\\n                emit PlayerPrestige(player, oldPrestige, profile.prestige, profile.xp);\\n            }\\n        }\\n        \\n        // Award tokens\\n        if (tokenAmount > 0) {\\n            _mint(player, tokenAmount);\\n            profile.totalRewardsEarned += tokenAmount;\\n        }\\n        \\n        // Update activity\\n        profile.lastActivity = block.timestamp;\\n        profile.totalGamesPlayed++;\\n        profile.isActive = true;\\n        \\n        // Record game action\\n        GameAction memory action = GameAction({\\n            gameId: gameId,\\n            actionType: actionType,\\n            timestamp: block.timestamp,\\n            xpGained: xpAmount,\\n            tokensEarned: tokenAmount,\\n            gameData: gameData\\n        });\\n        \\n        playerActions[player].push(action);\\n        \\n        emit PlayerGameAction(player, gameId, actionType, xpAmount, tokenAmount, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Unlock an achievement for a player\\n     * @param player Player address\\n     * @param achievementId Achievement identifier\\n     */\\n    function unlockAchievement(\\n        address player,\\n        bytes32 achievementId\\n    ) external onlyGameContract nonReentrant whenNotPaused {\\n        require(player != address(0), \\\"Invalid player address\\\");\\n        require(achievements[achievementId].isActive, \\\"Achievement not found or inactive\\\");\\n        \\n        Achievement storage achievement = achievements[achievementId];\\n        PlayerProfile storage profile = playerProfiles[player];\\n        \\n        // Check if player can unlock this achievement\\n        require(\\n            achievement.maxUnlocks == 0 || \\n            profile.achievements[achievement.name] < achievement.maxUnlocks,\\n            \\\"Achievement unlock limit reached\\\"\\n        );\\n        \\n        // Award XP and tokens\\n        if (achievement.xpReward > 0) {\\n            profile.xp += achievement.xpReward;\\n            totalXPDistributed += achievement.xpReward;\\n        }\\n        \\n        if (achievement.tokenReward > 0) {\\n            _mint(player, achievement.tokenReward);\\n            profile.totalRewardsEarned += achievement.tokenReward;\\n        }\\n        \\n        // Update achievement tracking\\n        profile.achievements[achievement.name]++;\\n        achievement.unlockCount++;\\n        totalAchievementsUnlocked++;\\n        \\n        emit AchievementUnlocked(\\n            player,\\n            achievementId,\\n            achievement.name,\\n            achievement.xpReward,\\n            achievement.tokenReward\\n        );\\n    }\\n    \\n    // =============================================================================\\n    // GAS SPONSORING\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Sponsor gas for a user transaction\\n     * @param user User to sponsor gas for\\n     * @param amount Amount of tokens to sponsor\\n     */\\n    function sponsorGas(\\n        address user,\\n        uint256 amount\\n    ) external nonReentrant whenNotPaused {\\n        require(gasSponsors[msg.sender], \\\"Not authorized sponsor\\\");\\n        require(user != address(0), \\\"Invalid user address\\\");\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(balanceOf(msg.sender) >= amount, \\\"Insufficient balance\\\");\\n        \\n        _transfer(msg.sender, user, amount);\\n        sponsoredGasAmounts[user] += amount;\\n        \\n        emit GasSponsored(msg.sender, user, amount, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Get sponsored gas amount for a user\\n     * @param user User address\\n     * @return amount Amount of sponsored gas\\n     */\\n    function getSponsoredGasAmount(address user) external view returns (uint256) {\\n        return sponsoredGasAmounts[user];\\n    }\\n    \\n    // =============================================================================\\n    // PLAYER PROFILE MANAGEMENT\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Get complete player profile\\n     * @param player Player address\\n     * @return xp Experience points\\n     * @return level Current level\\n     * @return prestige Prestige level\\n     * @return lastActivity Last activity timestamp\\n     * @return totalGamesPlayed Total games played\\n     * @return totalRewardsEarned Total rewards earned\\n     * @return isActive Activity status\\n     */\\n    function getPlayerProfile(address player) external view returns (\\n        uint256 xp,\\n        uint256 level,\\n        uint256 prestige,\\n        uint256 lastActivity,\\n        uint256 totalGamesPlayed,\\n        uint256 totalRewardsEarned,\\n        bool isActive\\n    ) {\\n        PlayerProfile storage profile = playerProfiles[player];\\n        return (\\n            profile.xp,\\n            profile.level,\\n            profile.prestige,\\n            profile.lastActivity,\\n            profile.totalGamesPlayed,\\n            profile.totalRewardsEarned,\\n            profile.isActive\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get player achievement count\\n     * @param player Player address\\n     * @param achievementName Achievement name\\n     * @return Count of times achievement unlocked\\n     */\\n    function getPlayerAchievementCount(\\n        address player,\\n        string memory achievementName\\n    ) external view returns (uint256) {\\n        return playerProfiles[player].achievements[achievementName];\\n    }\\n    \\n    /**\\n     * @dev Get player game statistics\\n     * @param player Player address\\n     * @param statName Statistic name\\n     * @return Statistic value\\n     */\\n    function getPlayerGameStat(\\n        address player,\\n        string memory statName\\n    ) external view returns (uint256) {\\n        return playerProfiles[player].gameStats[statName];\\n    }\\n    \\n    /**\\n     * @dev Get player actions history\\n     * @param player Player address\\n     * @param startIndex Start index\\n     * @param count Number of actions to return\\n     * @return actions Array of game actions\\n     */\\n    function getPlayerActions(\\n        address player,\\n        uint256 startIndex,\\n        uint256 count\\n    ) external view returns (GameAction[] memory actions) {\\n        GameAction[] storage allActions = playerActions[player];\\n        uint256 totalActions = allActions.length;\\n        \\n        if (startIndex >= totalActions) {\\n            return new GameAction[](0);\\n        }\\n        \\n        uint256 endIndex = startIndex + count;\\n        if (endIndex > totalActions) {\\n            endIndex = totalActions;\\n        }\\n        \\n        actions = new GameAction[](endIndex - startIndex);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            actions[i - startIndex] = allActions[i];\\n        }\\n    }\\n    \\n    // =============================================================================\\n    // ACHIEVEMENT MANAGEMENT\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Create a new achievement\\n     * @param name Achievement name\\n     * @param description Achievement description\\n     * @param xpReward XP reward\\n     * @param tokenReward Token reward\\n     */\\n    function createAchievement(\\n        string memory name,\\n        string memory description,\\n        uint256 xpReward,\\n        uint256 tokenReward\\n    ) external onlyOwner {\\n        _createAchievement(name, description, xpReward, tokenReward);\\n    }\\n    \\n    /**\\n     * @dev Internal function to create achievement\\n     */\\n    function _createAchievement(\\n        string memory name,\\n        string memory description,\\n        uint256 xpReward,\\n        uint256 tokenReward\\n    ) internal {\\n        bytes32 achievementId = keccak256(abi.encodePacked(name));\\n        require(!achievements[achievementId].isActive, \\\"Achievement already exists\\\");\\n        \\n        achievements[achievementId] = Achievement({\\n            name: name,\\n            description: description,\\n            xpReward: xpReward,\\n            tokenReward: tokenReward,\\n            isActive: true,\\n            unlockCount: 0,\\n            maxUnlocks: 0 // Unlimited by default\\n        });\\n        \\n        _achievementCounter++;\\n    }\\n    \\n    /**\\n     * @dev Get achievement details\\n     * @param achievementId Achievement identifier\\n     * @return name Achievement name\\n     * @return description Achievement description\\n     * @return xpReward XP reward\\n     * @return tokenReward Token reward\\n     * @return isActive Whether active\\n     * @return unlockCount Unlock count\\n     * @return maxUnlocks Maximum unlocks\\n     */\\n    function getAchievement(bytes32 achievementId) external view returns (\\n        string memory name,\\n        string memory description,\\n        uint256 xpReward,\\n        uint256 tokenReward,\\n        bool isActive,\\n        uint256 unlockCount,\\n        uint256 maxUnlocks\\n    ) {\\n        Achievement storage achievement = achievements[achievementId];\\n        return (\\n            achievement.name,\\n            achievement.description,\\n            achievement.xpReward,\\n            achievement.tokenReward,\\n            achievement.isActive,\\n            achievement.unlockCount,\\n            achievement.maxUnlocks\\n        );\\n    }\\n    \\n    // =============================================================================\\n    // ADMIN FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Add a game contract\\n     * @param gameContract Game contract address\\n     */\\n    function addGameContract(address gameContract) external onlyOwner {\\n        require(gameContract != address(0), \\\"Invalid game contract address\\\");\\n        gameContracts[gameContract] = true;\\n        emit GameContractAdded(gameContract, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Remove a game contract\\n     * @param gameContract Game contract address\\n     */\\n    function removeGameContract(address gameContract) external onlyOwner {\\n        gameContracts[gameContract] = false;\\n        emit GameContractRemoved(gameContract, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Add a gas sponsor\\n     * @param sponsor Sponsor address\\n     */\\n    function addGasSponsor(address sponsor) external onlyOwner {\\n        require(sponsor != address(0), \\\"Invalid sponsor address\\\");\\n        gasSponsors[sponsor] = true;\\n        emit GasSponsorAdded(sponsor, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Remove a gas sponsor\\n     * @param sponsor Sponsor address\\n     */\\n    function removeGasSponsor(address sponsor) external onlyOwner {\\n        gasSponsors[sponsor] = false;\\n        emit GasSponsorRemoved(sponsor, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Set L3 bridge address\\n     * @param bridge Bridge address\\n     */\\n    function setL3Bridge(address bridge) external onlyOwner {\\n        l3Bridge = bridge;\\n    }\\n    \\n    /**\\n     * @dev Set NovaSanctum Oracle address\\n     * @param oracle Oracle address\\n     */\\n    function setNovaSanctumOracle(address oracle) external onlyOwner {\\n        novaSanctumOracle = oracle;\\n    }\\n    \\n    /**\\n     * @dev Set gaming engine address\\n     * @param engine Engine address\\n     */\\n    function setGamingEngine(address engine) external onlyOwner {\\n        gamingEngine = engine;\\n    }\\n    \\n    /**\\n     * @dev Pause contract\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n    \\n    /**\\n     * @dev Unpause contract\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n    \\n    // =============================================================================\\n    // MODIFIERS\\n    // =============================================================================\\n    \\n    modifier onlyGameContract() {\\n        require(gameContracts[msg.sender], \\\"Not authorized game contract\\\");\\n        _;\\n    }\\n    \\n    // =============================================================================\\n    // OVERRIDES\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Override update to include gaming features\\n     */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override whenNotPaused {\\n        super._update(from, to, amount);\\n        \\n        // Update activity for both addresses\\n        if (from != address(0)) {\\n            playerProfiles[from].lastActivity = block.timestamp;\\n        }\\n        if (to != address(0)) {\\n            playerProfiles[to].lastActivity = block.timestamp;\\n        }\\n    }\\n}\\n\\n/**\\n * @title NovaSanctum Oracle Interface\\n * @dev Interface for AI-powered validation\\n */\\ninterface INovaSanctumOracle {\\n    function validatePlayerAction(\\n        address player,\\n        string memory gameId,\\n        string memory actionType,\\n        uint256 xpAmount,\\n        uint256 tokenAmount,\\n        bytes memory gameData\\n    ) external view returns (bool);\\n} \"\n    },\n    \"contracts/GamingCore.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title GamingCore\\n * @dev Core gaming smart contract for GameDin L3 ecosystem\\n * @dev Handles game state, player interactions, and AI integration\\n * @dev Supports real-time gaming with AI-powered analytics\\n */\\ncontract GamingCore is ReentrancyGuard, Ownable {\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\n    \\n\\n    // ============ STRUCTS ============\\n    \\n    struct Game {\\n        uint256 gameId;\\n        string gameType;\\n        uint256 minStake;\\n        uint256 maxStake;\\n        uint256 maxPlayers;\\n        uint256 currentPlayers;\\n        GameState state;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 totalPot;\\n        mapping(address => Player) players;\\n        address[] playerAddresses;\\n        uint256[] aiAnalytics;\\n    }\\n\\n    struct Player {\\n        address playerAddress;\\n        uint256 stake;\\n        uint256 score;\\n        uint256 rank;\\n        bool isActive;\\n        uint256 joinTime;\\n        uint256 lastActionTime;\\n        uint256[] aiPredictions;\\n        PlayerStats stats;\\n    }\\n\\n    struct PlayerStats {\\n        uint256 gamesPlayed;\\n        uint256 gamesWon;\\n        uint256 totalEarnings;\\n        uint256 totalStaked;\\n        uint256 winRate;\\n        uint256 averageScore;\\n        uint256 lastGameTime;\\n    }\\n\\n    struct AIAnalytics {\\n        uint256 fraudScore;\\n        uint256 skillLevel;\\n        uint256 riskAssessment;\\n        uint256 predictedOutcome;\\n        uint256[] behaviorPatterns;\\n    }\\n\\n    // ============ ENUMS ============\\n    \\n    enum GameState {\\n        WAITING,\\n        ACTIVE,\\n        FINISHED,\\n        CANCELLED\\n    }\\n\\n    enum GameType {\\n        BATTLE_ROYALE,\\n        TOURNAMENT,\\n        CHALLENGE,\\n        CUSTOM\\n    }\\n\\n    // ============ STATE VARIABLES ============\\n    \\n    uint256 private _gameIds;\\n    uint256 private _playerIds;\\n    \\n    mapping(uint256 => Game) public games;\\n    mapping(address => PlayerStats) public playerStats;\\n    mapping(address => AIAnalytics) public aiAnalytics;\\n    mapping(address => uint256) public playerBalances;\\n    \\n    uint256 public platformFee = 25; // 0.25%\\n    uint256 public aiServiceFee = 15; // 0.15%\\n    uint256 public minGameDuration = 300; // 5 minutes\\n    uint256 public maxGameDuration = 3600; // 1 hour\\n    \\n    address public gdiToken;\\n    address public aiOracle;\\n    address public treasury;\\n    \\n    // ============ EVENTS ============\\n    \\n    event GameCreated(uint256 indexed gameId, string gameType, uint256 minStake, uint256 maxPlayers);\\n    event PlayerJoined(uint256 indexed gameId, address indexed player, uint256 stake);\\n    event GameStarted(uint256 indexed gameId, uint256 startTime);\\n    event GameFinished(uint256 indexed gameId, address indexed winner, uint256 prize);\\n    event PlayerAction(uint256 indexed gameId, address indexed player, string action, uint256 score);\\n    event AIAnalysisUpdated(address indexed player, uint256 fraudScore, uint256 skillLevel);\\n    event BalanceUpdated(address indexed player, uint256 newBalance);\\n    event PlatformFeeUpdated(uint256 newFee);\\n    event AIOracleUpdated(address newOracle);\\n\\n    // ============ MODIFIERS ============\\n    \\n    modifier onlyGameExists(uint256 gameId) {\\n        require(games[gameId].gameId != 0, \\\"Game does not exist\\\");\\n        _;\\n    }\\n    \\n    modifier onlyGameState(uint256 gameId, GameState state) {\\n        require(games[gameId].state == state, \\\"Invalid game state\\\");\\n        _;\\n    }\\n    \\n    modifier onlyPlayerInGame(uint256 gameId, address player) {\\n        require(games[gameId].players[player].isActive, \\\"Player not in game\\\");\\n        _;\\n    }\\n    \\n    modifier onlyAIOracle() {\\n        require(msg.sender == aiOracle, \\\"Only AI Oracle can call\\\");\\n        _;\\n    }\\n\\n    // ============ CORE FUNCTIONS ============\\n    \\n    /**\\n     * @dev Create a new game\\n     * @param gameType Type of game to create\\n     * @param minStake Minimum stake required to join\\n     * @param maxStake Maximum stake allowed\\n     * @param maxPlayers Maximum number of players\\n     * @param duration Game duration in seconds\\n     */\\n    function createGame(\\n        string memory gameType,\\n        uint256 minStake,\\n        uint256 maxStake,\\n        uint256 maxPlayers,\\n        uint256 duration\\n    ) external onlyOwner returns (uint256) {\\n        require(minStake > 0, \\\"Min stake must be greater than 0\\\");\\n        require(maxStake >= minStake, \\\"Max stake must be >= min stake\\\");\\n        require(maxPlayers > 1, \\\"Max players must be > 1\\\");\\n        require(duration >= minGameDuration && duration <= maxGameDuration, \\\"Invalid duration\\\");\\n        \\n        _gameIds++;\\n        uint256 gameId = _gameIds;\\n        \\n        Game storage game = games[gameId];\\n        game.gameId = gameId;\\n        game.gameType = gameType;\\n        game.minStake = minStake;\\n        game.maxStake = maxStake;\\n        game.maxPlayers = maxPlayers;\\n        game.currentPlayers = 0;\\n        game.state = GameState.WAITING;\\n        game.startTime = 0;\\n        game.endTime = 0;\\n        game.totalPot = 0;\\n        \\n        emit GameCreated(gameId, gameType, minStake, maxPlayers);\\n        return gameId;\\n    }\\n    \\n    /**\\n     * @dev Join a game with specified stake\\n     * @param gameId ID of the game to join\\n     * @param stake Amount to stake\\n     */\\n    function joinGame(uint256 gameId, uint256 stake) \\n        external \\n        nonReentrant \\n        onlyGameExists(gameId)\\n        onlyGameState(gameId, GameState.WAITING)\\n    {\\n        Game storage game = games[gameId];\\n        require(stake >= game.minStake && stake <= game.maxStake, \\\"Invalid stake amount\\\");\\n        require(game.currentPlayers < game.maxPlayers, \\\"Game is full\\\");\\n        require(!game.players[msg.sender].isActive, \\\"Already in game\\\");\\n        require(IERC20(gdiToken).balanceOf(msg.sender) >= stake, \\\"Insufficient balance\\\");\\n        \\n        // Transfer tokens to contract\\n        IERC20(gdiToken).transferFrom(msg.sender, address(this), stake);\\n        \\n        // Add player to game\\n        game.players[msg.sender] = Player({\\n            playerAddress: msg.sender,\\n            stake: stake,\\n            score: 0,\\n            rank: 0,\\n            isActive: true,\\n            joinTime: block.timestamp,\\n            lastActionTime: block.timestamp,\\n            aiPredictions: new uint256[](0),\\n            stats: playerStats[msg.sender]\\n        });\\n        \\n        game.playerAddresses.push(msg.sender);\\n        game.currentPlayers++;\\n        game.totalPot += stake;\\n        \\n        // Update player stats\\n        playerStats[msg.sender].gamesPlayed++;\\n        playerStats[msg.sender].totalStaked += stake;\\n        playerStats[msg.sender].lastGameTime = block.timestamp;\\n        \\n        emit PlayerJoined(gameId, msg.sender, stake);\\n        \\n        // Auto-start game if full\\n        if (game.currentPlayers == game.maxPlayers) {\\n            _startGame(gameId);\\n        }\\n    }\\n    \\n    /**\\n     * @dev Start a game manually (for games that don't auto-start)\\n     * @param gameId ID of the game to start\\n     */\\n    function startGame(uint256 gameId) \\n        external \\n        onlyOwner \\n        onlyGameExists(gameId)\\n        onlyGameState(gameId, GameState.WAITING)\\n    {\\n        Game storage game = games[gameId];\\n        require(game.currentPlayers >= 2, \\\"Need at least 2 players\\\");\\n        _startGame(gameId);\\n    }\\n    \\n    /**\\n     * @dev Internal function to start a game\\n     * @param gameId ID of the game to start\\n     */\\n    function _startGame(uint256 gameId) internal {\\n        Game storage game = games[gameId];\\n        game.state = GameState.ACTIVE;\\n        game.startTime = block.timestamp;\\n        game.endTime = block.timestamp + 3600; // 1 hour default\\n        \\n        emit GameStarted(gameId, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Submit player action and score\\n     * @param gameId ID of the game\\n     * @param action Action performed by player\\n     * @param score Score for the action\\n     */\\n    function submitAction(\\n        uint256 gameId,\\n        string memory action,\\n        uint256 score\\n    ) \\n        external \\n        onlyGameExists(gameId)\\n        onlyGameState(gameId, GameState.ACTIVE)\\n        onlyPlayerInGame(gameId, msg.sender)\\n    {\\n        Game storage game = games[gameId];\\n        Player storage player = game.players[msg.sender];\\n        \\n        player.score += score;\\n        player.lastActionTime = block.timestamp;\\n        \\n        emit PlayerAction(gameId, msg.sender, action, score);\\n        \\n        // Check if game should end\\n        if (block.timestamp >= game.endTime) {\\n            _finishGame(gameId);\\n        }\\n    }\\n    \\n    /**\\n     * @dev Finish a game and distribute prizes\\n     * @param gameId ID of the game to finish\\n     */\\n    function finishGame(uint256 gameId) \\n        external \\n        onlyOwner \\n        onlyGameExists(gameId)\\n        onlyGameState(gameId, GameState.ACTIVE)\\n    {\\n        _finishGame(gameId);\\n    }\\n    \\n    /**\\n     * @dev Internal function to finish a game\\n     * @param gameId ID of the game to finish\\n     */\\n    function _finishGame(uint256 gameId) internal {\\n        Game storage game = games[gameId];\\n        game.state = GameState.FINISHED;\\n        game.endTime = block.timestamp;\\n        \\n        // Calculate fees\\n        uint256 platformFeeAmount = (game.totalPot * platformFee) / 10000;\\n        uint256 aiFeeAmount = (game.totalPot * aiServiceFee) / 10000;\\n        uint256 prizePool = game.totalPot - platformFeeAmount - aiFeeAmount;\\n        \\n        // Find winner (highest score)\\n        address winner = address(0);\\n        uint256 highestScore = 0;\\n        \\n        for (uint256 i = 0; i < game.playerAddresses.length; i++) {\\n            address playerAddr = game.playerAddresses[i];\\n            Player storage player = game.players[playerAddr];\\n            \\n            if (player.score > highestScore) {\\n                highestScore = player.score;\\n                winner = playerAddr;\\n            }\\n        }\\n        \\n        // Distribute prizes\\n        if (winner != address(0)) {\\n            playerBalances[winner] += prizePool;\\n            playerStats[winner].gamesWon++;\\n            playerStats[winner].totalEarnings += prizePool;\\n            \\n            // Update win rate\\n            playerStats[winner].winRate = (playerStats[winner].gamesWon * 100) / playerStats[winner].gamesPlayed;\\n        }\\n        \\n        // Transfer fees\\n        IERC20(gdiToken).transfer(treasury, platformFeeAmount);\\n        IERC20(gdiToken).transfer(aiOracle, aiFeeAmount);\\n        \\n        emit GameFinished(gameId, winner, prizePool);\\n    }\\n    \\n    /**\\n     * @dev Update AI analytics for a player\\n     * @param player Player address\\n     * @param fraudScore Fraud detection score\\n     * @param skillLevel Skill level assessment\\n     * @param riskAssessment Risk assessment\\n     * @param predictedOutcome Predicted game outcome\\n     */\\n    function updateAIAnalytics(\\n        address player,\\n        uint256 fraudScore,\\n        uint256 skillLevel,\\n        uint256 riskAssessment,\\n        uint256 predictedOutcome\\n    ) external onlyAIOracle {\\n        AIAnalytics storage analytics = aiAnalytics[player];\\n        analytics.fraudScore = fraudScore;\\n        analytics.skillLevel = skillLevel;\\n        analytics.riskAssessment = riskAssessment;\\n        analytics.predictedOutcome = predictedOutcome;\\n        \\n        emit AIAnalysisUpdated(player, fraudScore, skillLevel);\\n    }\\n    \\n    /**\\n     * @dev Withdraw player balance\\n     * @param amount Amount to withdraw\\n     */\\n    function withdrawBalance(uint256 amount) external nonReentrant {\\n        require(playerBalances[msg.sender] >= amount, \\\"Insufficient balance\\\");\\n        \\n        playerBalances[msg.sender] -= amount;\\n        IERC20(gdiToken).transfer(msg.sender, amount);\\n        \\n        emit BalanceUpdated(msg.sender, playerBalances[msg.sender]);\\n    }\\n    \\n    /**\\n     * @dev Get player balance\\n     * @param player Player address\\n     * @return balance Player's balance\\n     */\\n    function getPlayerBalance(address player) external view returns (uint256) {\\n        return playerBalances[player];\\n    }\\n    \\n    /**\\n     * @dev Get game information\\n     * @param gameId Game ID\\n     * @return id Game ID\\n     * @return gameType Game type\\n     * @return minStake Minimum stake\\n     * @return maxStake Maximum stake\\n     * @return maxPlayers Maximum players\\n     * @return currentPlayers Current players\\n     * @return state Game state\\n     * @return startTime Start time\\n     * @return endTime End time\\n     * @return totalPot Total pot\\n     */\\n    function getGame(uint256 gameId) \\n        external \\n        view \\n        onlyGameExists(gameId)\\n        returns (\\n            uint256 id,\\n            string memory gameType,\\n            uint256 minStake,\\n            uint256 maxStake,\\n            uint256 maxPlayers,\\n            uint256 currentPlayers,\\n            GameState state,\\n            uint256 startTime,\\n            uint256 endTime,\\n            uint256 totalPot\\n        )\\n    {\\n        Game storage game = games[gameId];\\n        return (\\n            game.gameId,\\n            game.gameType,\\n            game.minStake,\\n            game.maxStake,\\n            game.maxPlayers,\\n            game.currentPlayers,\\n            game.state,\\n            game.startTime,\\n            game.endTime,\\n            game.totalPot\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get player information in a game\\n     * @param gameId Game ID\\n     * @param player Player address\\n     * @return playerAddress Player address\\n     * @return stake Stake amount\\n     * @return score Player score\\n     * @return rank Player rank\\n     * @return isActive Whether active\\n     * @return joinTime Join time\\n     * @return lastActionTime Last action time\\n     */\\n    function getPlayerInGame(uint256 gameId, address player)\\n        external\\n        view\\n        onlyGameExists(gameId)\\n        returns (\\n            address playerAddress,\\n            uint256 stake,\\n            uint256 score,\\n            uint256 rank,\\n            bool isActive,\\n            uint256 joinTime,\\n            uint256 lastActionTime\\n        )\\n    {\\n        Player storage playerData = games[gameId].players[player];\\n        return (\\n            playerData.playerAddress,\\n            playerData.stake,\\n            playerData.score,\\n            playerData.rank,\\n            playerData.isActive,\\n            playerData.joinTime,\\n            playerData.lastActionTime\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get player statistics\\n     * @param player Player address\\n     * @return gamesPlayed Games played\\n     * @return gamesWon Games won\\n     * @return totalEarnings Total earnings\\n     * @return totalStaked Total staked\\n     * @return winRate Win rate\\n     * @return averageScore Average score\\n     * @return lastGameTime Last game time\\n     */\\n    function getPlayerStats(address player)\\n        external\\n        view\\n        returns (\\n            uint256 gamesPlayed,\\n            uint256 gamesWon,\\n            uint256 totalEarnings,\\n            uint256 totalStaked,\\n            uint256 winRate,\\n            uint256 averageScore,\\n            uint256 lastGameTime\\n        )\\n    {\\n        PlayerStats storage stats = playerStats[player];\\n        return (\\n            stats.gamesPlayed,\\n            stats.gamesWon,\\n            stats.totalEarnings,\\n            stats.totalStaked,\\n            stats.winRate,\\n            stats.averageScore,\\n            stats.lastGameTime\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get AI analytics for a player\\n     * @param player Player address\\n     * @return fraudScore Fraud score\\n     * @return skillLevel Skill level\\n     * @return riskAssessment Risk assessment\\n     * @return predictedOutcome Predicted outcome\\n     */\\n    function getAIAnalytics(address player)\\n        external\\n        view\\n        returns (\\n            uint256 fraudScore,\\n            uint256 skillLevel,\\n            uint256 riskAssessment,\\n            uint256 predictedOutcome\\n        )\\n    {\\n        AIAnalytics storage analytics = aiAnalytics[player];\\n        return (\\n            analytics.fraudScore,\\n            analytics.skillLevel,\\n            analytics.riskAssessment,\\n            analytics.predictedOutcome\\n        );\\n    }\\n\\n    // ============ ADMIN FUNCTIONS ============\\n    \\n    /**\\n     * @dev Update platform fee\\n     * @param newFee New fee percentage (basis points)\\n     */\\n    function updatePlatformFee(uint256 newFee) external onlyOwner {\\n        require(newFee <= 500, \\\"Fee too high\\\"); // Max 5%\\n        platformFee = newFee;\\n        emit PlatformFeeUpdated(newFee);\\n    }\\n    \\n    /**\\n     * @dev Update AI oracle address\\n     * @param newOracle New oracle address\\n     */\\n    function updateAIOracle(address newOracle) external onlyOwner {\\n        require(newOracle != address(0), \\\"Invalid oracle address\\\");\\n        aiOracle = newOracle;\\n        emit AIOracleUpdated(newOracle);\\n    }\\n    \\n    /**\\n     * @dev Emergency withdraw (only owner)\\n     * @param token Token address to withdraw\\n     * @param amount Amount to withdraw\\n     */\\n    function emergencyWithdraw(address token, uint256 amount) external onlyOwner {\\n        IERC20(token).transfer(owner(), amount);\\n    }\\n    \\n    /**\\n     * @dev Get total games created\\n     * @return total Total number of games\\n     */\\n    function getTotalGames() external view returns (uint256) {\\n        return _gameIds;\\n    }\\n} \"\n    },\n    \"contracts/GamingTournament.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title GameDin Tournament Contract\\n * @dev Advanced tournament system for GameDin L3 gaming platform\\n * Handles tournament creation, player registration, matchmaking, and prize distribution\\n */\\ncontract GamingTournament is AccessControl, ReentrancyGuard, Pausable {\\n    // =============================================================================\\n    // CONSTANTS & ROLES\\n    // =============================================================================\\n    \\n    bytes32 public constant TOURNAMENT_ORGANIZER_ROLE = keccak256(\\\"TOURNAMENT_ORGANIZER_ROLE\\\");\\n    bytes32 public constant MATCH_REFEREE_ROLE = keccak256(\\\"MATCH_REFEREE_ROLE\\\");\\n    bytes32 public constant EMERGENCY_ROLE = keccak256(\\\"EMERGENCY_ROLE\\\");\\n    \\n    uint256 public constant MAX_TOURNAMENT_PLAYERS = 1024;\\n    uint256 public constant MIN_TOURNAMENT_PLAYERS = 4;\\n    uint256 public constant MAX_TOURNAMENT_DURATION = 7 days;\\n    uint256 public constant MIN_TOURNAMENT_DURATION = 1 hours;\\n    \\n    // =============================================================================\\n    // STRUCTS & ENUMS\\n    // =============================================================================\\n    \\n    enum TournamentStatus {\\n        CREATED,\\n        REGISTRATION_OPEN,\\n        REGISTRATION_CLOSED,\\n        IN_PROGRESS,\\n        FINISHED,\\n        CANCELLED\\n    }\\n    \\n    enum TournamentType {\\n        SINGLE_ELIMINATION,\\n        DOUBLE_ELIMINATION,\\n        ROUND_ROBIN,\\n        SWISS_SYSTEM,\\n        BATTLE_ROYALE\\n    }\\n    \\n    enum MatchStatus {\\n        SCHEDULED,\\n        IN_PROGRESS,\\n        COMPLETED,\\n        CANCELLED\\n    }\\n    \\n    struct Tournament {\\n        uint256 tournamentId;\\n        string name;\\n        string description;\\n        TournamentType tournamentType;\\n        TournamentStatus status;\\n        uint256 entryFee;\\n        uint256 prizePool;\\n        uint256 maxPlayers;\\n        uint256 currentPlayers;\\n        uint256 startTime;\\n        uint256 endTime;\\n        address organizer;\\n        address[] players;\\n        uint256[] matchIds;\\n        mapping(address => PlayerStats) playerStats;\\n        mapping(uint256 => Match) matches;\\n    }\\n    \\n    struct PlayerStats {\\n        uint256 wins;\\n        uint256 losses;\\n        uint256 draws;\\n        uint256 totalScore;\\n        uint256 rank;\\n        bool isEliminated;\\n        uint256 lastMatchTime;\\n    }\\n    \\n    struct Match {\\n        uint256 matchId;\\n        uint256 tournamentId;\\n        address player1;\\n        address player2;\\n        address winner;\\n        MatchStatus status;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 player1Score;\\n        uint256 player2Score;\\n        string gameData;\\n        bool isBye;\\n    }\\n    \\n    struct PrizeDistribution {\\n        uint256 firstPlace;\\n        uint256 secondPlace;\\n        uint256 thirdPlace;\\n        uint256[] otherPrizes;\\n    }\\n    \\n    // =============================================================================\\n    // STATE VARIABLES\\n    // =============================================================================\\n    \\n    address public gdiToken;\\n    address public gamingCore;\\n    address public aiOracle;\\n    \\n    uint256 public tournamentCounter;\\n    uint256 public matchCounter;\\n    uint256 public totalTournaments;\\n    uint256 public totalMatches;\\n    uint256 public totalPrizePool;\\n    \\n    mapping(uint256 => Tournament) public tournaments;\\n    mapping(uint256 => Match) public matches;\\n    mapping(address => uint256[]) public playerTournaments;\\n    mapping(address => uint256[]) public playerMatches;\\n    \\n    uint256 public platformFee = 5; // 0.5%\\n    uint256 public organizerFee = 10; // 1%\\n    \\n    // =============================================================================\\n    // EVENTS\\n    // =============================================================================\\n    \\n    event TournamentCreated(\\n        uint256 indexed tournamentId,\\n        string name,\\n        TournamentType tournamentType,\\n        uint256 entryFee,\\n        uint256 maxPlayers,\\n        address indexed organizer\\n    );\\n    \\n    event PlayerRegistered(\\n        uint256 indexed tournamentId,\\n        address indexed player,\\n        uint256 entryFee,\\n        uint256 timestamp\\n    );\\n    \\n    event TournamentStarted(\\n        uint256 indexed tournamentId,\\n        uint256 startTime,\\n        uint256 totalPlayers\\n    );\\n    \\n    event MatchCreated(\\n        uint256 indexed matchId,\\n        uint256 indexed tournamentId,\\n        address player1,\\n        address player2,\\n        uint256 scheduledTime\\n    );\\n    \\n    event MatchCompleted(\\n        uint256 indexed matchId,\\n        address indexed winner,\\n        uint256 player1Score,\\n        uint256 player2Score,\\n        uint256 timestamp\\n    );\\n    \\n    event TournamentFinished(\\n        uint256 indexed tournamentId,\\n        address indexed winner,\\n        uint256 prizeAmount,\\n        uint256 timestamp\\n    );\\n    \\n    event PrizeDistributed(\\n        uint256 indexed tournamentId,\\n        address indexed player,\\n        uint256 rank,\\n        uint256 prizeAmount\\n    );\\n    \\n    // =============================================================================\\n    // CONSTRUCTOR\\n    // =============================================================================\\n    \\n    constructor(\\n        address _gdiToken,\\n        address _gamingCore,\\n        address _aiOracle\\n    ) {\\n        gdiToken = _gdiToken;\\n        gamingCore = _gamingCore;\\n        aiOracle = _aiOracle;\\n        \\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(TOURNAMENT_ORGANIZER_ROLE, msg.sender);\\n        _grantRole(MATCH_REFEREE_ROLE, msg.sender);\\n        _grantRole(EMERGENCY_ROLE, msg.sender);\\n    }\\n    \\n    // =============================================================================\\n    // TOURNAMENT MANAGEMENT\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Create a new tournament\\n     * @param name Tournament name\\n     * @param description Tournament description\\n     * @param tournamentType Type of tournament\\n     * @param entryFee Entry fee in GDI tokens\\n     * @param maxPlayers Maximum number of players\\n     * @param startTime Tournament start time\\n     * @param duration Tournament duration\\n     */\\n    function createTournament(\\n        string memory name,\\n        string memory description,\\n        TournamentType tournamentType,\\n        uint256 entryFee,\\n        uint256 maxPlayers,\\n        uint256 startTime,\\n        uint256 duration\\n    ) external onlyRole(TOURNAMENT_ORGANIZER_ROLE) whenNotPaused {\\n        require(bytes(name).length > 0, \\\"Tournament name required\\\");\\n        require(maxPlayers >= MIN_TOURNAMENT_PLAYERS, \\\"Too few players\\\");\\n        require(maxPlayers <= MAX_TOURNAMENT_PLAYERS, \\\"Too many players\\\");\\n        require(startTime > block.timestamp, \\\"Start time must be in future\\\");\\n        require(duration >= MIN_TOURNAMENT_DURATION, \\\"Duration too short\\\");\\n        require(duration <= MAX_TOURNAMENT_DURATION, \\\"Duration too long\\\");\\n        \\n        tournamentCounter++;\\n        uint256 tournamentId = tournamentCounter;\\n        \\n        Tournament storage tournament = tournaments[tournamentId];\\n        tournament.tournamentId = tournamentId;\\n        tournament.name = name;\\n        tournament.description = description;\\n        tournament.tournamentType = tournamentType;\\n        tournament.status = TournamentStatus.CREATED;\\n        tournament.entryFee = entryFee;\\n        tournament.prizePool = 0;\\n        tournament.maxPlayers = maxPlayers;\\n        tournament.currentPlayers = 0;\\n        tournament.startTime = startTime;\\n        tournament.endTime = startTime + duration;\\n        tournament.organizer = msg.sender;\\n        \\n        totalTournaments++;\\n        \\n        emit TournamentCreated(\\n            tournamentId,\\n            name,\\n            tournamentType,\\n            entryFee,\\n            maxPlayers,\\n            msg.sender\\n        );\\n    }\\n    \\n    /**\\n     * @dev Register for a tournament\\n     * @param tournamentId Tournament ID\\n     */\\n    function registerForTournament(uint256 tournamentId) external whenNotPaused nonReentrant {\\n        Tournament storage tournament = tournaments[tournamentId];\\n        require(tournament.tournamentId != 0, \\\"Tournament does not exist\\\");\\n        require(tournament.status == TournamentStatus.CREATED, \\\"Registration not open\\\");\\n        require(tournament.currentPlayers < tournament.maxPlayers, \\\"Tournament full\\\");\\n        require(tournament.players.length == 0 || !isPlayerRegistered(tournamentId, msg.sender), \\\"Already registered\\\");\\n        \\n        // Transfer entry fee\\n        IERC20(gdiToken).transferFrom(msg.sender, address(this), tournament.entryFee);\\n        tournament.prizePool += tournament.entryFee;\\n        totalPrizePool += tournament.entryFee;\\n        \\n        // Add player to tournament\\n        tournament.players.push(msg.sender);\\n        tournament.currentPlayers++;\\n        playerTournaments[msg.sender].push(tournamentId);\\n        \\n        // Initialize player stats\\n        tournament.playerStats[msg.sender] = PlayerStats({\\n            wins: 0,\\n            losses: 0,\\n            draws: 0,\\n            totalScore: 0,\\n            rank: 0,\\n            isEliminated: false,\\n            lastMatchTime: 0\\n        });\\n        \\n        emit PlayerRegistered(tournamentId, msg.sender, tournament.entryFee, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Start a tournament\\n     * @param tournamentId Tournament ID\\n     */\\n    function startTournament(uint256 tournamentId) external onlyRole(TOURNAMENT_ORGANIZER_ROLE) whenNotPaused {\\n        Tournament storage tournament = tournaments[tournamentId];\\n        require(tournament.tournamentId != 0, \\\"Tournament does not exist\\\");\\n        require(tournament.status == TournamentStatus.CREATED, \\\"Tournament already started\\\");\\n        require(tournament.currentPlayers >= MIN_TOURNAMENT_PLAYERS, \\\"Not enough players\\\");\\n        require(block.timestamp >= tournament.startTime, \\\"Tournament not ready to start\\\");\\n        \\n        tournament.status = TournamentStatus.IN_PROGRESS;\\n        \\n        // Generate initial matches based on tournament type\\n        generateInitialMatches(tournamentId);\\n        \\n        emit TournamentStarted(tournamentId, block.timestamp, tournament.currentPlayers);\\n    }\\n    \\n    // =============================================================================\\n    // MATCH MANAGEMENT\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Create a match between two players\\n     * @param tournamentId Tournament ID\\n     * @param player1 First player address\\n     * @param player2 Second player address\\n     * @param scheduledTime Scheduled match time\\n     */\\n    function createMatch(\\n        uint256 tournamentId,\\n        address player1,\\n        address player2,\\n        uint256 scheduledTime\\n    ) internal {\\n        Tournament storage tournament = tournaments[tournamentId];\\n        require(tournament.tournamentId != 0, \\\"Tournament does not exist\\\");\\n        require(tournament.status == TournamentStatus.IN_PROGRESS, \\\"Tournament not in progress\\\");\\n        require(isPlayerRegistered(tournamentId, player1), \\\"Player 1 not registered\\\");\\n        require(isPlayerRegistered(tournamentId, player2), \\\"Player 2 not registered\\\");\\n        require(player1 != player2, \\\"Players must be different\\\");\\n        \\n        matchCounter++;\\n        uint256 matchId = matchCounter;\\n        \\n        Match storage matchData = matches[matchId];\\n        matchData.matchId = matchId;\\n        matchData.tournamentId = tournamentId;\\n        matchData.player1 = player1;\\n        matchData.player2 = player2;\\n        matchData.status = MatchStatus.SCHEDULED;\\n        matchData.startTime = scheduledTime;\\n        matchData.isBye = false;\\n        \\n        tournament.matchIds.push(matchId);\\n        playerMatches[player1].push(matchId);\\n        playerMatches[player2].push(matchId);\\n        totalMatches++;\\n        \\n        emit MatchCreated(matchId, tournamentId, player1, player2, scheduledTime);\\n    }\\n    \\n    /**\\n     * @dev Create a match between two players (public interface)\\n     * @param tournamentId Tournament ID\\n     * @param player1 First player address\\n     * @param player2 Second player address\\n     * @param scheduledTime Scheduled match time\\n     */\\n    function createMatchPublic(\\n        uint256 tournamentId,\\n        address player1,\\n        address player2,\\n        uint256 scheduledTime\\n    ) external onlyRole(MATCH_REFEREE_ROLE) whenNotPaused {\\n        createMatch(tournamentId, player1, player2, scheduledTime);\\n    }\\n    \\n    /**\\n     * @dev Complete a match with results\\n     * @param matchId Match ID\\n     * @param winner Winner address\\n     * @param player1Score Player 1 score\\n     * @param player2Score Player 2 score\\n     * @param gameData Additional game data\\n     */\\n    function completeMatch(\\n        uint256 matchId,\\n        address winner,\\n        uint256 player1Score,\\n        uint256 player2Score,\\n        string memory gameData\\n    ) external onlyRole(MATCH_REFEREE_ROLE) whenNotPaused {\\n        Match storage matchData = matches[matchId];\\n        require(matchData.matchId != 0, \\\"Match does not exist\\\");\\n        require(matchData.status == MatchStatus.SCHEDULED || matchData.status == MatchStatus.IN_PROGRESS, \\\"Match not active\\\");\\n        require(winner == matchData.player1 || winner == matchData.player2 || winner == address(0), \\\"Invalid winner\\\");\\n        \\n        matchData.status = MatchStatus.COMPLETED;\\n        matchData.winner = winner;\\n        matchData.player1Score = player1Score;\\n        matchData.player2Score = player2Score;\\n        matchData.gameData = gameData;\\n        matchData.endTime = block.timestamp;\\n        \\n        // Update player stats\\n        Tournament storage tournament = tournaments[matchData.tournamentId];\\n        if (winner == matchData.player1) {\\n            tournament.playerStats[matchData.player1].wins++;\\n            tournament.playerStats[matchData.player2].losses++;\\n        } else if (winner == matchData.player2) {\\n            tournament.playerStats[matchData.player2].wins++;\\n            tournament.playerStats[matchData.player1].losses++;\\n        } else {\\n            // Draw\\n            tournament.playerStats[matchData.player1].draws++;\\n            tournament.playerStats[matchData.player2].draws++;\\n        }\\n        \\n        tournament.playerStats[matchData.player1].totalScore += player1Score;\\n        tournament.playerStats[matchData.player2].totalScore += player2Score;\\n        tournament.playerStats[matchData.player1].lastMatchTime = block.timestamp;\\n        tournament.playerStats[matchData.player2].lastMatchTime = block.timestamp;\\n        \\n        emit MatchCompleted(matchId, winner, player1Score, player2Score, block.timestamp);\\n    }\\n    \\n    // =============================================================================\\n    // TOURNAMENT COMPLETION\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Finish a tournament and distribute prizes\\n     * @param tournamentId Tournament ID\\n     * @param winners Array of winner addresses in order\\n     */\\n    function finishTournament(\\n        uint256 tournamentId,\\n        address[] memory winners\\n    ) external onlyRole(TOURNAMENT_ORGANIZER_ROLE) whenNotPaused {\\n        Tournament storage tournament = tournaments[tournamentId];\\n        require(tournament.tournamentId != 0, \\\"Tournament does not exist\\\");\\n        require(tournament.status == TournamentStatus.IN_PROGRESS, \\\"Tournament not in progress\\\");\\n        require(winners.length > 0, \\\"No winners specified\\\");\\n        \\n        tournament.status = TournamentStatus.FINISHED;\\n        \\n        // Calculate prize distribution\\n        uint256 totalPrize = tournament.prizePool;\\n        uint256 platformFeeAmount = (totalPrize * platformFee) / 1000;\\n        uint256 organizerFeeAmount = (totalPrize * organizerFee) / 1000;\\n        uint256 remainingPrize = totalPrize - platformFeeAmount - organizerFeeAmount;\\n        \\n        // Distribute prizes\\n        for (uint256 i = 0; i < winners.length; i++) {\\n            require(isPlayerRegistered(tournamentId, winners[i]), \\\"Winner not registered\\\");\\n            \\n            uint256 prizeAmount;\\n            if (i == 0) {\\n                prizeAmount = (remainingPrize * 50) / 100; // 50% for 1st place\\n            } else if (i == 1) {\\n                prizeAmount = (remainingPrize * 30) / 100; // 30% for 2nd place\\n            } else if (i == 2) {\\n                prizeAmount = (remainingPrize * 20) / 100; // 20% for 3rd place\\n            } else {\\n                prizeAmount = 0; // No prize for other positions\\n            }\\n            \\n            if (prizeAmount > 0) {\\n                IERC20(gdiToken).transfer(winners[i], prizeAmount);\\n                emit PrizeDistributed(tournamentId, winners[i], i + 1, prizeAmount);\\n            }\\n        }\\n        \\n        // Transfer fees\\n        if (platformFeeAmount > 0) {\\n            IERC20(gdiToken).transfer(address(this), platformFeeAmount);\\n        }\\n        if (organizerFeeAmount > 0) {\\n            IERC20(gdiToken).transfer(tournament.organizer, organizerFeeAmount);\\n        }\\n        \\n        emit TournamentFinished(tournamentId, winners[0], remainingPrize, block.timestamp);\\n    }\\n    \\n    // =============================================================================\\n    // HELPER FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Check if a player is registered for a tournament\\n     * @param tournamentId Tournament ID\\n     * @param player Player address\\n     * @return True if registered\\n     */\\n    function isPlayerRegistered(uint256 tournamentId, address player) public view returns (bool) {\\n        Tournament storage tournament = tournaments[tournamentId];\\n        for (uint256 i = 0; i < tournament.players.length; i++) {\\n            if (tournament.players[i] == player) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    \\n    /**\\n     * @dev Generate initial matches for a tournament\\n     * @param tournamentId Tournament ID\\n     */\\n    function generateInitialMatches(uint256 tournamentId) internal {\\n        Tournament storage tournament = tournaments[tournamentId];\\n        \\n        if (tournament.tournamentType == TournamentType.SINGLE_ELIMINATION) {\\n            generateSingleEliminationMatches(tournamentId);\\n        } else if (tournament.tournamentType == TournamentType.BATTLE_ROYALE) {\\n            generateBattleRoyaleMatch(tournamentId);\\n        }\\n        // Add other tournament type implementations\\n    }\\n    \\n    /**\\n     * @dev Generate single elimination matches\\n     * @param tournamentId Tournament ID\\n     */\\n    function generateSingleEliminationMatches(uint256 tournamentId) internal {\\n        Tournament storage tournament = tournaments[tournamentId];\\n        uint256 playerCount = tournament.players.length;\\n        \\n        // Create first round matches\\n        for (uint256 i = 0; i < playerCount; i += 2) {\\n            if (i + 1 < playerCount) {\\n                createMatch(\\n                    tournamentId,\\n                    tournament.players[i],\\n                    tournament.players[i + 1],\\n                    tournament.startTime\\n                );\\n            } else {\\n                // Bye for odd player\\n                matchCounter++;\\n                uint256 matchId = matchCounter;\\n                \\n                Match storage matchData = matches[matchId];\\n                matchData.matchId = matchId;\\n                matchData.tournamentId = tournamentId;\\n                matchData.player1 = tournament.players[i];\\n                matchData.player2 = address(0);\\n                matchData.status = MatchStatus.COMPLETED;\\n                matchData.winner = tournament.players[i];\\n                matchData.isBye = true;\\n                \\n                tournament.matchIds.push(matchId);\\n                playerMatches[tournament.players[i]].push(matchId);\\n                totalMatches++;\\n            }\\n        }\\n    }\\n    \\n    /**\\n     * @dev Generate battle royale match\\n     * @param tournamentId Tournament ID\\n     */\\n    function generateBattleRoyaleMatch(uint256 tournamentId) internal {\\n        Tournament storage tournament = tournaments[tournamentId];\\n        \\n        // Create one big match with all players\\n        matchCounter++;\\n        uint256 matchId = matchCounter;\\n        \\n        Match storage matchData = matches[matchId];\\n        matchData.matchId = matchId;\\n        matchData.tournamentId = tournamentId;\\n        matchData.player1 = tournament.players[0];\\n        matchData.player2 = tournament.players[1];\\n        matchData.status = MatchStatus.SCHEDULED;\\n        matchData.startTime = tournament.startTime;\\n        matchData.isBye = false;\\n        \\n        tournament.matchIds.push(matchId);\\n        for (uint256 i = 0; i < tournament.players.length; i++) {\\n            playerMatches[tournament.players[i]].push(matchId);\\n        }\\n        totalMatches++;\\n    }\\n    \\n    // =============================================================================\\n    // VIEW FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Get tournament information\\n     * @param tournamentId Tournament ID\\n     */\\n    function getTournament(uint256 tournamentId) external view returns (\\n        uint256 id,\\n        string memory name,\\n        string memory description,\\n        TournamentType tournamentType,\\n        TournamentStatus status,\\n        uint256 entryFee,\\n        uint256 prizePool,\\n        uint256 maxPlayers,\\n        uint256 currentPlayers,\\n        uint256 startTime,\\n        uint256 endTime,\\n        address organizer\\n    ) {\\n        Tournament storage tournament = tournaments[tournamentId];\\n        return (\\n            tournament.tournamentId,\\n            tournament.name,\\n            tournament.description,\\n            tournament.tournamentType,\\n            tournament.status,\\n            tournament.entryFee,\\n            tournament.prizePool,\\n            tournament.maxPlayers,\\n            tournament.currentPlayers,\\n            tournament.startTime,\\n            tournament.endTime,\\n            tournament.organizer\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get tournament players\\n     * @param tournamentId Tournament ID\\n     * @return players Array of player addresses\\n     */\\n    function getTournamentPlayers(uint256 tournamentId) external view returns (address[] memory) {\\n        return tournaments[tournamentId].players;\\n    }\\n    \\n    /**\\n     * @dev Get player stats for a tournament\\n     * @param tournamentId Tournament ID\\n     * @param player Player address\\n     */\\n    function getPlayerStats(uint256 tournamentId, address player) external view returns (\\n        uint256 wins,\\n        uint256 losses,\\n        uint256 draws,\\n        uint256 totalScore,\\n        uint256 rank,\\n        bool isEliminated,\\n        uint256 lastMatchTime\\n    ) {\\n        PlayerStats storage stats = tournaments[tournamentId].playerStats[player];\\n        return (\\n            stats.wins,\\n            stats.losses,\\n            stats.draws,\\n            stats.totalScore,\\n            stats.rank,\\n            stats.isEliminated,\\n            stats.lastMatchTime\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get match information\\n     * @param matchId Match ID\\n     */\\n    function getMatch(uint256 matchId) external view returns (\\n        uint256 id,\\n        uint256 tournamentId,\\n        address player1,\\n        address player2,\\n        address winner,\\n        MatchStatus status,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 player1Score,\\n        uint256 player2Score,\\n        string memory gameData,\\n        bool isBye\\n    ) {\\n        Match storage matchData = matches[matchId];\\n        return (\\n            matchData.matchId,\\n            matchData.tournamentId,\\n            matchData.player1,\\n            matchData.player2,\\n            matchData.winner,\\n            matchData.status,\\n            matchData.startTime,\\n            matchData.endTime,\\n            matchData.player1Score,\\n            matchData.player2Score,\\n            matchData.gameData,\\n            matchData.isBye\\n        );\\n    }\\n    \\n    // =============================================================================\\n    // ADMIN FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Update platform fee\\n     * @param newFee New fee percentage (basis points)\\n     */\\n    function updatePlatformFee(uint256 newFee) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(newFee <= 50, \\\"Fee too high\\\"); // Max 5%\\n        platformFee = newFee;\\n    }\\n    \\n    /**\\n     * @dev Update organizer fee\\n     * @param newFee New fee percentage (basis points)\\n     */\\n    function updateOrganizerFee(uint256 newFee) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(newFee <= 100, \\\"Fee too high\\\"); // Max 10%\\n        organizerFee = newFee;\\n    }\\n    \\n    /**\\n     * @dev Pause tournament system\\n     */\\n    function pause() external onlyRole(EMERGENCY_ROLE) {\\n        _pause();\\n    }\\n    \\n    /**\\n     * @dev Unpause tournament system\\n     */\\n    function unpause() external onlyRole(EMERGENCY_ROLE) {\\n        _unpause();\\n    }\\n    \\n    /**\\n     * @dev Emergency withdraw tokens\\n     * @param amount Amount to withdraw\\n     */\\n    function emergencyWithdraw(uint256 amount) external onlyRole(EMERGENCY_ROLE) {\\n        IERC20(gdiToken).transfer(msg.sender, amount);\\n    }\\n} \"\n    },\n    \"contracts/GDIToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n\\n/**\\n * @title GDIToken\\n * @dev GameDin L3 native token with gaming rewards, staking, and governance\\n * @dev Supports AI-powered reward distribution and gaming ecosystem integration\\n */\\ncontract GDIToken is ERC20, ERC20Burnable, ERC20Pausable, AccessControl, ReentrancyGuard {\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address initialOwner,\\n        address _gamingCore,\\n        address _aiOracle,\\n        address _treasury\\n    ) ERC20(name, symbol) {\\n        gamingCore = _gamingCore;\\n        aiOracle = _aiOracle;\\n        treasury = _treasury;\\n        \\n        _grantRole(DEFAULT_ADMIN_ROLE, initialOwner);\\n        _grantRole(MINTER_ROLE, initialOwner);\\n        _grantRole(GAMING_CORE_ROLE, _gamingCore);\\n        _grantRole(AI_ORACLE_ROLE, _aiOracle);\\n        _grantRole(TREASURY_ROLE, _treasury);\\n        \\n        // Mint initial supply to treasury\\n        _mint(_treasury, INITIAL_SUPPLY);\\n    }\\n    \\n\\n    // ============ ROLES ============\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant GAMING_CORE_ROLE = keccak256(\\\"GAMING_CORE_ROLE\\\");\\n    bytes32 public constant AI_ORACLE_ROLE = keccak256(\\\"AI_ORACLE_ROLE\\\");\\n    bytes32 public constant TREASURY_ROLE = keccak256(\\\"TREASURY_ROLE\\\");\\n\\n    // ============ STRUCTS ============\\n    struct StakingInfo {\\n        uint256 amount;\\n        uint256 startTime;\\n        uint256 lastRewardTime;\\n        uint256 totalRewards;\\n        uint256 lockPeriod;\\n        bool isLocked;\\n    }\\n\\n    struct RewardPool {\\n        uint256 totalRewards;\\n        uint256 distributedRewards;\\n        uint256 lastUpdateTime;\\n        uint256 rewardRate;\\n        bool isActive;\\n    }\\n\\n    struct GovernanceProposal {\\n        uint256 proposalId;\\n        address proposer;\\n        string description;\\n        uint256 forVotes;\\n        uint256 againstVotes;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool executed;\\n        bool canceled;\\n        mapping(address => bool) hasVoted;\\n        mapping(address => bool) votedFor;\\n    }\\n\\n    // ============ STATE VARIABLES ============\\n    uint256 public constant INITIAL_SUPPLY = 1_000_000_000 * 10**18; // 1 billion tokens\\n    uint256 public constant MAX_SUPPLY = 2_000_000_000 * 10**18; // 2 billion max supply\\n    \\n    uint256 public stakingRewardRate = 10; // 10% APY\\n    uint256 public gamingRewardRate = 5; // 5% of gaming fees\\n    uint256 public governanceQuorum = 100_000 * 10**18; // 100k tokens for quorum\\n    \\n    mapping(address => StakingInfo) public stakingInfo;\\n    mapping(uint256 => RewardPool) public rewardPools;\\n    mapping(uint256 => GovernanceProposal) public governanceProposals;\\n    \\n    uint256 private _proposalIds;\\n    uint256 private _rewardPoolIds;\\n    \\n    uint256 public totalStaked;\\n    uint256 public totalRewardsDistributed;\\n    uint256 public gamingRewardsPool;\\n    \\n    address public gamingCore;\\n    address public aiOracle;\\n    address public treasury;\\n    \\n    // ============ EVENTS ============\\n    event TokensStaked(address indexed user, uint256 amount, uint256 lockPeriod);\\n    event TokensUnstaked(address indexed user, uint256 amount, uint256 rewards);\\n    event RewardsClaimed(address indexed user, uint256 amount);\\n    event GamingRewardsDistributed(address indexed user, uint256 amount, uint256 gameId);\\n    event GovernanceProposalCreated(uint256 indexed proposalId, address indexed proposer, string description);\\n    event VoteCast(address indexed voter, uint256 indexed proposalId, bool support);\\n    event ProposalExecuted(uint256 indexed proposalId);\\n    event RewardPoolCreated(uint256 indexed poolId, uint256 totalRewards, uint256 rewardRate);\\n    event AIOracleUpdated(address indexed newOracle);\\n    event GamingCoreUpdated(address indexed newGamingCore);\\n\\n    // ============ MODIFIERS ============\\n    modifier onlyGamingCore() {\\n        require(msg.sender == gamingCore, \\\"Only GamingCore can call\\\");\\n        _;\\n    }\\n    \\n    modifier onlyAIOracle() {\\n        require(msg.sender == aiOracle, \\\"Only AI Oracle can call\\\");\\n        _;\\n    }\\n    \\n    modifier onlyTreasury() {\\n        require(msg.sender == treasury, \\\"Only Treasury can call\\\");\\n        _;\\n    }\\n\\n\\n\\n    // ============ STAKING FUNCTIONS ============\\n    \\n    /**\\n     * @dev Stake tokens for rewards\\n     * @param amount Amount to stake\\n     * @param lockPeriod Lock period in seconds (0 for no lock)\\n     */\\n    function stake(uint256 amount, uint256 lockPeriod) external nonReentrant {\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(balanceOf(msg.sender) >= amount, \\\"Insufficient balance\\\");\\n        \\n        StakingInfo storage staker = stakingInfo[msg.sender];\\n        \\n        // Claim existing rewards first\\n        if (staker.amount > 0) {\\n            _claimStakingRewards(msg.sender);\\n        }\\n        \\n        // Transfer tokens to contract\\n        _transfer(msg.sender, address(this), amount);\\n        \\n        // Update staking info\\n        staker.amount += amount;\\n        staker.startTime = block.timestamp;\\n        staker.lastRewardTime = block.timestamp;\\n        staker.lockPeriod = lockPeriod;\\n        staker.isLocked = lockPeriod > 0;\\n        \\n        totalStaked += amount;\\n        \\n        emit TokensStaked(msg.sender, amount, lockPeriod);\\n    }\\n    \\n    /**\\n     * @dev Unstake tokens\\n     * @param amount Amount to unstake\\n     */\\n    function unstake(uint256 amount) external nonReentrant {\\n        StakingInfo storage staker = stakingInfo[msg.sender];\\n        require(staker.amount >= amount, \\\"Insufficient staked amount\\\");\\n        \\n        // Check lock period\\n        if (staker.isLocked) {\\n            require(block.timestamp >= staker.startTime + staker.lockPeriod, \\\"Tokens are locked\\\");\\n        }\\n        \\n        // Claim rewards first\\n        _claimStakingRewards(msg.sender);\\n        \\n        // Update staking info\\n        staker.amount -= amount;\\n        totalStaked -= amount;\\n        \\n        // Transfer tokens back to user\\n        _transfer(address(this), msg.sender, amount);\\n        \\n        emit TokensUnstaked(msg.sender, amount, staker.totalRewards);\\n    }\\n    \\n    /**\\n     * @dev Claim staking rewards\\n     */\\n    function claimStakingRewards() external nonReentrant {\\n        _claimStakingRewards(msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Internal function to claim staking rewards\\n     * @param user User address\\n     */\\n    function _claimStakingRewards(address user) internal {\\n        StakingInfo storage staker = stakingInfo[user];\\n        require(staker.amount > 0, \\\"No tokens staked\\\");\\n        \\n        uint256 rewards = calculateStakingRewards(user);\\n        if (rewards > 0) {\\n            staker.totalRewards += rewards;\\n            staker.lastRewardTime = block.timestamp;\\n            totalRewardsDistributed += rewards;\\n            \\n            // Mint rewards to user\\n            _mint(user, rewards);\\n            \\n            emit RewardsClaimed(user, rewards);\\n        }\\n    }\\n    \\n    /**\\n     * @dev Calculate staking rewards for a user\\n     * @param user User address\\n     * @return amount Rewards amount\\n     */\\n    function calculateStakingRewards(address user) public view returns (uint256) {\\n        StakingInfo storage staker = stakingInfo[user];\\n        if (staker.amount == 0) return 0;\\n        \\n        uint256 timeStaked = block.timestamp - staker.lastRewardTime;\\n        uint256 rewards = (staker.amount * stakingRewardRate * timeStaked) / (365 days * 100);\\n        \\n        return rewards;\\n    }\\n\\n    // ============ GAMING REWARDS FUNCTIONS ============\\n    \\n    /**\\n     * @dev Distribute gaming rewards (called by GamingCore)\\n     * @param user User address\\n     * @param amount Reward amount\\n     * @param gameId Game ID\\n     */\\n    function distributeGamingRewards(\\n        address user,\\n        uint256 amount,\\n        uint256 gameId\\n    ) external onlyGamingCore {\\n        require(amount > 0, \\\"Reward amount must be greater than 0\\\");\\n        require(gamingRewardsPool >= amount, \\\"Insufficient gaming rewards pool\\\");\\n        \\n        gamingRewardsPool -= amount;\\n        _mint(user, amount);\\n        \\n        emit GamingRewardsDistributed(user, amount, gameId);\\n    }\\n    \\n    /**\\n     * @dev Add to gaming rewards pool (called by GamingCore)\\n     * @param amount Amount to add\\n     */\\n    function addToGamingRewardsPool(uint256 amount) external onlyGamingCore {\\n        gamingRewardsPool += amount;\\n    }\\n    \\n    /**\\n     * @dev Get gaming rewards pool balance\\n     * @return balance Pool balance\\n     */\\n    function getGamingRewardsPool() external view returns (uint256) {\\n        return gamingRewardsPool;\\n    }\\n\\n    // ============ GOVERNANCE FUNCTIONS ============\\n    \\n    /**\\n     * @dev Create a governance proposal\\n     * @param description Proposal description\\n     * @param duration Voting duration in seconds\\n     * @return proposalId Proposal ID\\n     */\\n    function createProposal(\\n        string memory description,\\n        uint256 duration\\n    ) external returns (uint256) {\\n        require(balanceOf(msg.sender) >= governanceQuorum / 10, \\\"Insufficient tokens to propose\\\");\\n        require(bytes(description).length > 0, \\\"Description cannot be empty\\\");\\n        require(duration > 0 && duration <= 7 days, \\\"Invalid duration\\\");\\n        \\n        _proposalIds++;\\n        uint256 proposalId = _proposalIds;\\n        \\n        GovernanceProposal storage proposal = governanceProposals[proposalId];\\n        proposal.proposalId = proposalId;\\n        proposal.proposer = msg.sender;\\n        proposal.description = description;\\n        proposal.startTime = block.timestamp;\\n        proposal.endTime = block.timestamp + duration;\\n        proposal.executed = false;\\n        proposal.canceled = false;\\n        \\n        emit GovernanceProposalCreated(proposalId, msg.sender, description);\\n        \\n        return proposalId;\\n    }\\n    \\n    /**\\n     * @dev Vote on a proposal\\n     * @param proposalId Proposal ID\\n     * @param support True for support, false for against\\n     */\\n    function vote(uint256 proposalId, bool support) external {\\n        GovernanceProposal storage proposal = governanceProposals[proposalId];\\n        require(proposal.proposalId != 0, \\\"Proposal does not exist\\\");\\n        require(block.timestamp >= proposal.startTime, \\\"Voting not started\\\");\\n        require(block.timestamp <= proposal.endTime, \\\"Voting ended\\\");\\n        require(!proposal.hasVoted[msg.sender], \\\"Already voted\\\");\\n        require(!proposal.executed && !proposal.canceled, \\\"Proposal not active\\\");\\n        \\n        uint256 votingPower = balanceOf(msg.sender);\\n        require(votingPower > 0, \\\"No voting power\\\");\\n        \\n        proposal.hasVoted[msg.sender] = true;\\n        proposal.votedFor[msg.sender] = support;\\n        \\n        if (support) {\\n            proposal.forVotes += votingPower;\\n        } else {\\n            proposal.againstVotes += votingPower;\\n        }\\n        \\n        emit VoteCast(msg.sender, proposalId, support);\\n    }\\n    \\n    /**\\n     * @dev Execute a proposal\\n     * @param proposalId Proposal ID\\n     */\\n    function executeProposal(uint256 proposalId) external {\\n        GovernanceProposal storage proposal = governanceProposals[proposalId];\\n        require(proposal.proposalId != 0, \\\"Proposal does not exist\\\");\\n        require(block.timestamp > proposal.endTime, \\\"Voting not ended\\\");\\n        require(!proposal.executed, \\\"Proposal already executed\\\");\\n        require(!proposal.canceled, \\\"Proposal canceled\\\");\\n        require(proposal.forVotes > proposal.againstVotes, \\\"Proposal not passed\\\");\\n        require(proposal.forVotes + proposal.againstVotes >= governanceQuorum, \\\"Quorum not reached\\\");\\n        \\n        proposal.executed = true;\\n        \\n        emit ProposalExecuted(proposalId);\\n    }\\n    \\n    /**\\n     * @dev Get proposal information\\n     * @param proposalId Proposal ID\\n     * @return proposer Proposer address\\n     * @return description Proposal description\\n     * @return forVotes For votes count\\n     * @return againstVotes Against votes count\\n     * @return startTime Start time\\n     * @return endTime End time\\n     * @return executed Whether executed\\n     * @return canceled Whether canceled\\n     */\\n    function getProposal(uint256 proposalId)\\n        external\\n        view\\n        returns (\\n            address proposer,\\n            string memory description,\\n            uint256 forVotes,\\n            uint256 againstVotes,\\n            uint256 startTime,\\n            uint256 endTime,\\n            bool executed,\\n            bool canceled\\n        )\\n    {\\n        GovernanceProposal storage proposal = governanceProposals[proposalId];\\n        return (\\n            proposal.proposer,\\n            proposal.description,\\n            proposal.forVotes,\\n            proposal.againstVotes,\\n            proposal.startTime,\\n            proposal.endTime,\\n            proposal.executed,\\n            proposal.canceled\\n        );\\n    }\\n\\n    // ============ REWARD POOL FUNCTIONS ============\\n    \\n    /**\\n     * @dev Create a reward pool\\n     * @param totalRewards Total rewards in the pool\\n     * @param rewardRate Reward rate per second\\n     * @return poolId Pool ID\\n     */\\n    function createRewardPool(uint256 totalRewards, uint256 rewardRate) \\n        external \\n        onlyRole(TREASURY_ROLE) \\n        returns (uint256) \\n    {\\n        require(totalRewards > 0, \\\"Total rewards must be greater than 0\\\");\\n        require(rewardRate > 0, \\\"Reward rate must be greater than 0\\\");\\n        \\n        _rewardPoolIds++;\\n        uint256 poolId = _rewardPoolIds;\\n        \\n        RewardPool storage pool = rewardPools[poolId];\\n        pool.totalRewards = totalRewards;\\n        pool.rewardRate = rewardRate;\\n        pool.lastUpdateTime = block.timestamp;\\n        pool.isActive = true;\\n        \\n        emit RewardPoolCreated(poolId, totalRewards, rewardRate);\\n        \\n        return poolId;\\n    }\\n    \\n    /**\\n     * @dev Get reward pool information\\n     * @param poolId Pool ID\\n     * @return totalRewards Total rewards\\n     * @return distributedRewards Distributed rewards\\n     * @return lastUpdateTime Last update time\\n     * @return rewardRate Reward rate\\n     * @return isActive Whether active\\n     */\\n    function getRewardPool(uint256 poolId)\\n        external\\n        view\\n        returns (\\n            uint256 totalRewards,\\n            uint256 distributedRewards,\\n            uint256 lastUpdateTime,\\n            uint256 rewardRate,\\n            bool isActive\\n        )\\n    {\\n        RewardPool storage pool = rewardPools[poolId];\\n        return (\\n            pool.totalRewards,\\n            pool.distributedRewards,\\n            pool.lastUpdateTime,\\n            pool.rewardRate,\\n            pool.isActive\\n        );\\n    }\\n\\n    // ============ ADMIN FUNCTIONS ============\\n    \\n    /**\\n     * @dev Update AI Oracle address\\n     * @param newOracle New oracle address\\n     */\\n    function updateAIOracle(address newOracle) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(newOracle != address(0), \\\"Invalid oracle address\\\");\\n        aiOracle = newOracle;\\n        _grantRole(AI_ORACLE_ROLE, newOracle);\\n        emit AIOracleUpdated(newOracle);\\n    }\\n    \\n    /**\\n     * @dev Update Gaming Core address\\n     * @param newGamingCore New gaming core address\\n     */\\n    function updateGamingCore(address newGamingCore) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(newGamingCore != address(0), \\\"Invalid gaming core address\\\");\\n        gamingCore = newGamingCore;\\n        _grantRole(GAMING_CORE_ROLE, newGamingCore);\\n        emit GamingCoreUpdated(newGamingCore);\\n    }\\n    \\n    /**\\n     * @dev Update staking reward rate\\n     * @param newRate New reward rate\\n     */\\n    function updateStakingRewardRate(uint256 newRate) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(newRate <= 50, \\\"Reward rate too high\\\"); // Max 50% APY\\n        stakingRewardRate = newRate;\\n    }\\n    \\n    /**\\n     * @dev Update governance quorum\\n     * @param newQuorum New quorum amount\\n     */\\n    function updateGovernanceQuorum(uint256 newQuorum) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        governanceQuorum = newQuorum;\\n    }\\n    \\n    /**\\n     * @dev Pause token transfers\\n     */\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n    \\n    /**\\n     * @dev Unpause token transfers\\n     */\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Mint tokens to an address (MINTER_ROLE only)\\n     * @param to Recipient address\\n     * @param amount Amount to mint\\n     */\\n    function mint(address to, uint256 amount) external onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n    }\\n\\n    // ============ OVERRIDE FUNCTIONS ============\\n    \\n    /**\\n     * @dev Override transfer function to check pause\\n     */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20, ERC20Pausable) whenNotPaused {\\n        super._update(from, to, amount);\\n    }\\n\\n    // ============ VIEW FUNCTIONS ============\\n    \\n    /**\\n     * @dev Get staking information for a user\\n     * @param user User address\\n     * @return amount Staked amount\\n     * @return startTime Start time\\n     * @return lastRewardTime Last reward time\\n     * @return totalRewards Total rewards\\n     * @return lockPeriod Lock period\\n     * @return isLocked Whether locked\\n     * @return pendingRewards Pending rewards\\n     */\\n    function getStakingInfo(address user)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 startTime,\\n            uint256 lastRewardTime,\\n            uint256 totalRewards,\\n            uint256 lockPeriod,\\n            bool isLocked,\\n            uint256 pendingRewards\\n        )\\n    {\\n        StakingInfo storage staker = stakingInfo[user];\\n        return (\\n            staker.amount,\\n            staker.startTime,\\n            staker.lastRewardTime,\\n            staker.totalRewards,\\n            staker.lockPeriod,\\n            staker.isLocked,\\n            calculateStakingRewards(user)\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get total proposals count\\n     * @return total Total proposals\\n     */\\n    function getTotalProposals() external view returns (uint256) {\\n        return _proposalIds;\\n    }\\n    \\n    /**\\n     * @dev Get total reward pools count\\n     * @return total Total reward pools\\n     */\\n    function getTotalRewardPools() external view returns (uint256) {\\n        return _rewardPoolIds;\\n    }\\n    \\n    /**\\n     * @dev Check if user has voted on a proposal\\n     * @param proposalId Proposal ID\\n     * @param user User address\\n     * @return hasVoted True if voted\\n     */\\n    function hasVoted(uint256 proposalId, address user) external view returns (bool) {\\n        return governanceProposals[proposalId].hasVoted[user];\\n    }\\n    \\n    /**\\n     * @dev Get user's vote on a proposal\\n     * @param proposalId Proposal ID\\n     * @param user User address\\n     * @return votedFor True if voted for, false if against\\n     */\\n    function getUserVote(uint256 proposalId, address user) external view returns (bool) {\\n        return governanceProposals[proposalId].votedFor[user];\\n    }\\n} \"\n    },\n    \"contracts/NFTMarketplace.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n/**\\n * @title NFTMarketplace\\n * @dev Advanced NFT marketplace for GameDin L3 gaming ecosystem\\n * @dev Supports AI-powered pricing, auctions, and gaming NFT integration\\n */\\ncontract NFTMarketplace is ReentrancyGuard, Ownable, Pausable {\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\n    \\n\\n    // ============ STRUCTS ============\\n    \\n    struct Listing {\\n        uint256 listingId;\\n        address nftContract;\\n        uint256 tokenId;\\n        address seller;\\n        uint256 price;\\n        uint256 aiSuggestedPrice;\\n        bool isActive;\\n        uint256 createdAt;\\n        uint256 expiresAt;\\n        ListingType listingType;\\n        uint256 minBid;\\n        uint256 currentBid;\\n        address currentBidder;\\n        uint256 auctionEndTime;\\n        uint256[] bidHistory;\\n        address[] bidders;\\n    }\\n\\n    struct NFTMetadata {\\n        string name;\\n        string description;\\n        string imageUri;\\n        string attributes;\\n        uint256 rarity;\\n        uint256 power;\\n        uint256 level;\\n        string gameType;\\n        bool isGamingNFT;\\n        uint256[] stats;\\n    }\\n\\n    struct Bid {\\n        address bidder;\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n\\n    struct Collection {\\n        address nftContract;\\n        string name;\\n        string description;\\n        uint256 totalListings;\\n        uint256 totalVolume;\\n        uint256 floorPrice;\\n        bool isVerified;\\n        address creator;\\n        uint256 royaltyPercentage;\\n    }\\n\\n    // ============ ENUMS ============\\n    \\n    enum ListingType {\\n        FIXED_PRICE,\\n        AUCTION,\\n        DUTCH_AUCTION\\n    }\\n\\n    enum NFTType {\\n        CHARACTER,\\n        WEAPON,\\n        ARMOR,\\n        ITEM,\\n        LAND,\\n        ARTWORK,\\n        OTHER\\n    }\\n\\n    // ============ STATE VARIABLES ============\\n    \\n    uint256 private _listingIds;\\n    uint256 private _collectionIds;\\n    \\n    mapping(uint256 => Listing) public listings;\\n    mapping(address => mapping(uint256 => uint256)) public tokenToListingId;\\n    mapping(address => Collection) public collections;\\n    mapping(uint256 => NFTMetadata) public nftMetadata;\\n    mapping(address => uint256[]) public userListings;\\n    mapping(address => uint256[]) public userBids;\\n    \\n    uint256 public platformFee = 250; // 2.5%\\n    uint256 public aiOracleFee = 50; // 0.5%\\n    uint256 public minListingPrice = 0.001 * 10**18; // 0.001 tokens\\n    uint256 public maxListingPrice = 1000000 * 10**18; // 1M tokens\\n    uint256 public auctionDuration = 7 days;\\n    uint256 public dutchAuctionDuration = 3 days;\\n    \\n    address public gdiToken;\\n    address public aiOracle;\\n    address public gamingCore;\\n    address public treasury;\\n    \\n    uint256 public totalVolume;\\n    uint256 public totalListings;\\n    uint256 public totalSales;\\n    \\n    // ============ EVENTS ============\\n    \\n    event ListingCreated(\\n        uint256 indexed listingId,\\n        address indexed nftContract,\\n        uint256 indexed tokenId,\\n        address seller,\\n        uint256 price,\\n        ListingType listingType,\\n        uint256 expiresAt\\n    );\\n    \\n    event ListingSold(\\n        uint256 indexed listingId,\\n        address indexed buyer,\\n        address indexed seller,\\n        uint256 price,\\n        uint256 platformFee\\n    );\\n    \\n    event ListingCancelled(uint256 indexed listingId, address indexed seller);\\n    event ListingUpdated(uint256 indexed listingId, uint256 newPrice);\\n    event BidPlaced(uint256 indexed listingId, address indexed bidder, uint256 amount);\\n    event AuctionEnded(uint256 indexed listingId, address indexed winner, uint256 finalPrice);\\n    event CollectionRegistered(address indexed nftContract, string name, address creator);\\n    event MetadataUpdated(address indexed nftContract, uint256 indexed tokenId, string name);\\n\\n    // ============ MODIFIERS ============\\n    \\n    modifier onlyListingOwner(uint256 listingId) {\\n        require(listings[listingId].seller == msg.sender, \\\"Not listing owner\\\");\\n        _;\\n    }\\n    \\n    modifier onlyValidListing(uint256 listingId) {\\n        require(listings[listingId].listingId != 0, \\\"Listing does not exist\\\");\\n        require(listings[listingId].isActive, \\\"Listing not active\\\");\\n        _;\\n    }\\n    \\n    modifier onlyAIOracle() {\\n        require(msg.sender == aiOracle, \\\"Only AI Oracle can call\\\");\\n        _;\\n    }\\n\\n    // ============ LISTING FUNCTIONS ============\\n    \\n    /**\\n     * @dev Create a fixed price listing\\n     * @param nftContract NFT contract address\\n     * @param tokenId Token ID\\n     * @param price Listing price\\n     * @param duration Listing duration in seconds\\n     */\\n    function createFixedPriceListing(\\n        address nftContract,\\n        uint256 tokenId,\\n        uint256 price,\\n        uint256 duration\\n    ) external nonReentrant whenNotPaused {\\n        require(price >= minListingPrice && price <= maxListingPrice, \\\"Invalid price\\\");\\n        require(duration > 0 && duration <= 30 days, \\\"Invalid duration\\\");\\n        require(IERC721(nftContract).ownerOf(tokenId) == msg.sender, \\\"Not token owner\\\");\\n        require(tokenToListingId[nftContract][tokenId] == 0, \\\"Token already listed\\\");\\n        \\n        // Transfer NFT to marketplace\\n        IERC721(nftContract).transferFrom(msg.sender, address(this), tokenId);\\n        \\n        // Create listing\\n        _createListing(\\n            nftContract,\\n            tokenId,\\n            price,\\n            ListingType.FIXED_PRICE,\\n            0,\\n            duration\\n        );\\n    }\\n    \\n    /**\\n     * @dev Create an auction listing\\n     * @param nftContract NFT contract address\\n     * @param tokenId Token ID\\n     * @param minBid Minimum bid amount\\n     * @param duration Auction duration in seconds\\n     */\\n    function createAuctionListing(\\n        address nftContract,\\n        uint256 tokenId,\\n        uint256 minBid,\\n        uint256 duration\\n    ) external nonReentrant whenNotPaused {\\n        require(minBid >= minListingPrice, \\\"Min bid too low\\\");\\n        require(duration > 0 && duration <= 30 days, \\\"Invalid duration\\\");\\n        require(IERC721(nftContract).ownerOf(tokenId) == msg.sender, \\\"Not token owner\\\");\\n        require(tokenToListingId[nftContract][tokenId] == 0, \\\"Token already listed\\\");\\n        \\n        // Transfer NFT to marketplace\\n        IERC721(nftContract).transferFrom(msg.sender, address(this), tokenId);\\n        \\n        // Create listing\\n        _createListing(\\n            nftContract,\\n            tokenId,\\n            0,\\n            ListingType.AUCTION,\\n            minBid,\\n            duration\\n        );\\n    }\\n    \\n    /**\\n     * @dev Create a Dutch auction listing\\n     * @param nftContract NFT contract address\\n     * @param tokenId Token ID\\n     * @param startPrice Starting price\\n     * @param endPrice Ending price\\n     * @param duration Auction duration in seconds\\n     */\\n    function createDutchAuctionListing(\\n        address nftContract,\\n        uint256 tokenId,\\n        uint256 startPrice,\\n        uint256 endPrice,\\n        uint256 duration\\n    ) external nonReentrant whenNotPaused {\\n        require(startPrice > endPrice, \\\"Start price must be higher than end price\\\");\\n        require(startPrice <= maxListingPrice, \\\"Start price too high\\\");\\n        require(duration > 0 && duration <= 7 days, \\\"Invalid duration\\\");\\n        require(IERC721(nftContract).ownerOf(tokenId) == msg.sender, \\\"Not token owner\\\");\\n        require(tokenToListingId[nftContract][tokenId] == 0, \\\"Token already listed\\\");\\n        \\n        // Transfer NFT to marketplace\\n        IERC721(nftContract).transferFrom(msg.sender, address(this), tokenId);\\n        \\n        // Create listing\\n        _createListing(\\n            nftContract,\\n            tokenId,\\n            startPrice,\\n            ListingType.DUTCH_AUCTION,\\n            endPrice,\\n            duration\\n        );\\n    }\\n    \\n    /**\\n     * @dev Internal function to create listing\\n     */\\n    function _createListing(\\n        address nftContract,\\n        uint256 tokenId,\\n        uint256 price,\\n        ListingType listingType,\\n        uint256 minBid,\\n        uint256 duration\\n    ) internal {\\n        _listingIds++;\\n        uint256 listingId = _listingIds;\\n        \\n        Listing storage listing = listings[listingId];\\n        listing.listingId = listingId;\\n        listing.nftContract = nftContract;\\n        listing.tokenId = tokenId;\\n        listing.seller = msg.sender;\\n        listing.price = price;\\n        listing.listingType = listingType;\\n        listing.minBid = minBid;\\n        listing.isActive = true;\\n        listing.createdAt = block.timestamp;\\n        listing.expiresAt = block.timestamp + duration;\\n        \\n        if (listingType == ListingType.AUCTION) {\\n            listing.auctionEndTime = block.timestamp + duration;\\n        }\\n        \\n        tokenToListingId[nftContract][tokenId] = listingId;\\n        userListings[msg.sender].push(listingId);\\n        \\n        totalListings++;\\n        \\n        // Update collection stats\\n        if (collections[nftContract].nftContract != address(0)) {\\n            collections[nftContract].totalListings++;\\n        }\\n        \\n        emit ListingCreated(\\n            listingId,\\n            nftContract,\\n            tokenId,\\n            msg.sender,\\n            price,\\n            listingType,\\n            listing.expiresAt\\n        );\\n    }\\n    \\n    /**\\n     * @dev Buy a fixed price listing\\n     * @param listingId Listing ID\\n     */\\n    function buyListing(uint256 listingId) external nonReentrant whenNotPaused onlyValidListing(listingId) {\\n        Listing storage listing = listings[listingId];\\n        require(listing.listingType == ListingType.FIXED_PRICE, \\\"Not a fixed price listing\\\");\\n        require(block.timestamp <= listing.expiresAt, \\\"Listing expired\\\");\\n        require(msg.sender != listing.seller, \\\"Cannot buy your own listing\\\");\\n        \\n        uint256 platformFeeAmount = (listing.price * platformFee) / 10000;\\n        uint256 sellerAmount = listing.price - platformFeeAmount;\\n        \\n        // Transfer tokens from buyer to seller and platform\\n        IERC20(gdiToken).transferFrom(msg.sender, listing.seller, sellerAmount);\\n        IERC20(gdiToken).transferFrom(msg.sender, treasury, platformFeeAmount);\\n        \\n        // Transfer NFT to buyer\\n        IERC721(listing.nftContract).transferFrom(address(this), msg.sender, listing.tokenId);\\n        \\n        // Update listing\\n        listing.isActive = false;\\n        tokenToListingId[listing.nftContract][listing.tokenId] = 0;\\n        \\n        totalVolume += listing.price;\\n        totalSales++;\\n        \\n        emit ListingSold(listingId, msg.sender, listing.seller, listing.price, platformFeeAmount);\\n    }\\n    \\n    /**\\n     * @dev Place bid on auction\\n     * @param listingId Listing ID\\n     * @param bidAmount Bid amount\\n     */\\n    function placeBid(uint256 listingId, uint256 bidAmount) external nonReentrant whenNotPaused onlyValidListing(listingId) {\\n        Listing storage listing = listings[listingId];\\n        require(listing.listingType == ListingType.AUCTION, \\\"Not an auction\\\");\\n        require(block.timestamp <= listing.auctionEndTime, \\\"Auction ended\\\");\\n        require(msg.sender != listing.seller, \\\"Cannot bid on your own listing\\\");\\n        require(bidAmount > listing.currentBid, \\\"Bid too low\\\");\\n        require(bidAmount >= listing.minBid, \\\"Bid below minimum\\\");\\n        \\n        // Return previous bid if exists\\n        if (listing.currentBid > 0) {\\n            IERC20(gdiToken).transfer(listing.currentBidder, listing.currentBid);\\n        }\\n        \\n        // Transfer new bid\\n        IERC20(gdiToken).transferFrom(msg.sender, address(this), bidAmount);\\n        \\n        // Update listing\\n        listing.currentBid = bidAmount;\\n        listing.currentBidder = msg.sender;\\n        listing.bidHistory.push(bidAmount);\\n        listing.bidders.push(msg.sender);\\n        \\n        userBids[msg.sender].push(listingId);\\n        \\n        emit BidPlaced(listingId, msg.sender, bidAmount);\\n    }\\n    \\n    /**\\n     * @dev End auction and transfer NFT to winner\\n     * @param listingId Listing ID\\n     */\\n    function endAuction(uint256 listingId) external nonReentrant onlyValidListing(listingId) {\\n        Listing storage listing = listings[listingId];\\n        require(listing.listingType == ListingType.AUCTION, \\\"Not an auction\\\");\\n        require(block.timestamp > listing.auctionEndTime, \\\"Auction not ended\\\");\\n        require(listing.currentBid > 0, \\\"No bids placed\\\");\\n        \\n        uint256 platformFeeAmount = (listing.currentBid * platformFee) / 10000;\\n        uint256 sellerAmount = listing.currentBid - platformFeeAmount;\\n        \\n        // Transfer tokens to seller and platform\\n        IERC20(gdiToken).transfer(listing.seller, sellerAmount);\\n        IERC20(gdiToken).transfer(treasury, platformFeeAmount);\\n        \\n        // Transfer NFT to winner\\n        IERC721(listing.nftContract).transferFrom(address(this), listing.currentBidder, listing.tokenId);\\n        \\n        // Update listing\\n        listing.isActive = false;\\n        tokenToListingId[listing.nftContract][listing.tokenId] = 0;\\n        \\n        totalVolume += listing.currentBid;\\n        totalSales++;\\n        \\n        emit AuctionEnded(listingId, listing.currentBidder, listing.currentBid);\\n    }\\n    \\n    /**\\n     * @dev Buy Dutch auction at current price\\n     * @param listingId Listing ID\\n     */\\n    function buyDutchAuction(uint256 listingId) external nonReentrant whenNotPaused onlyValidListing(listingId) {\\n        Listing storage listing = listings[listingId];\\n        require(listing.listingType == ListingType.DUTCH_AUCTION, \\\"Not a Dutch auction\\\");\\n        require(block.timestamp <= listing.expiresAt, \\\"Auction expired\\\");\\n        require(msg.sender != listing.seller, \\\"Cannot buy your own listing\\\");\\n        \\n        uint256 currentPrice = getDutchAuctionPrice(listingId);\\n        require(currentPrice > 0, \\\"Auction ended\\\");\\n        \\n        uint256 platformFeeAmount = (currentPrice * platformFee) / 10000;\\n        uint256 sellerAmount = currentPrice - platformFeeAmount;\\n        \\n        // Transfer tokens from buyer to seller and platform\\n        IERC20(gdiToken).transferFrom(msg.sender, listing.seller, sellerAmount);\\n        IERC20(gdiToken).transferFrom(msg.sender, treasury, platformFeeAmount);\\n        \\n        // Transfer NFT to buyer\\n        IERC721(listing.nftContract).transferFrom(address(this), msg.sender, listing.tokenId);\\n        \\n        // Update listing\\n        listing.isActive = false;\\n        tokenToListingId[listing.nftContract][listing.tokenId] = 0;\\n        \\n        totalVolume += currentPrice;\\n        totalSales++;\\n        \\n        emit ListingSold(listingId, msg.sender, listing.seller, currentPrice, platformFeeAmount);\\n    }\\n    \\n    /**\\n     * @dev Cancel listing\\n     * @param listingId Listing ID\\n     */\\n    function cancelListing(uint256 listingId) external onlyListingOwner(listingId) onlyValidListing(listingId) {\\n        Listing storage listing = listings[listingId];\\n        require(listing.listingType == ListingType.FIXED_PRICE, \\\"Can only cancel fixed price listings\\\");\\n        \\n        // Return NFT to seller\\n        IERC721(listing.nftContract).transferFrom(address(this), listing.seller, listing.tokenId);\\n        \\n        // Update listing\\n        listing.isActive = false;\\n        tokenToListingId[listing.nftContract][listing.tokenId] = 0;\\n        \\n        emit ListingCancelled(listingId, listing.seller);\\n    }\\n    \\n    /**\\n     * @dev Update listing price\\n     * @param listingId Listing ID\\n     * @param newPrice New price\\n     */\\n    function updateListingPrice(uint256 listingId, uint256 newPrice) external onlyListingOwner(listingId) onlyValidListing(listingId) {\\n        Listing storage listing = listings[listingId];\\n        require(listing.listingType == ListingType.FIXED_PRICE, \\\"Can only update fixed price listings\\\");\\n        require(newPrice >= minListingPrice && newPrice <= maxListingPrice, \\\"Invalid price\\\");\\n        \\n        listing.price = newPrice;\\n        \\n        emit ListingUpdated(listingId, newPrice);\\n    }\\n\\n    // ============ AI INTEGRATION FUNCTIONS ============\\n    \\n    /**\\n     * @dev Update AI suggested price (called by AI Oracle)\\n     * @param listingId Listing ID\\n     * @param suggestedPrice AI suggested price\\n     */\\n    function updateAISuggestedPrice(uint256 listingId, uint256 suggestedPrice) external onlyAIOracle {\\n        require(listings[listingId].listingId != 0, \\\"Listing does not exist\\\");\\n        listings[listingId].aiSuggestedPrice = suggestedPrice;\\n    }\\n    \\n    /**\\n     * @dev Get AI suggested price for listing\\n     * @param listingId Listing ID\\n     * @return price AI suggested price\\n     */\\n    function getAISuggestedPrice(uint256 listingId) external view returns (uint256) {\\n        return listings[listingId].aiSuggestedPrice;\\n    }\\n\\n    // ============ COLLECTION FUNCTIONS ============\\n    \\n    /**\\n     * @dev Register NFT collection\\n     * @param nftContract NFT contract address\\n     * @param name Collection name\\n     * @param description Collection description\\n     * @param royaltyPercentage Royalty percentage (basis points)\\n     */\\n    function registerCollection(\\n        address nftContract,\\n        string memory name,\\n        string memory description,\\n        uint256 royaltyPercentage\\n    ) external {\\n        require(collections[nftContract].nftContract == address(0), \\\"Collection already registered\\\");\\n        require(royaltyPercentage <= 1000, \\\"Royalty too high\\\"); // Max 10%\\n        \\n        collections[nftContract] = Collection({\\n            nftContract: nftContract,\\n            name: name,\\n            description: description,\\n            totalListings: 0,\\n            totalVolume: 0,\\n            floorPrice: 0,\\n            isVerified: false,\\n            creator: msg.sender,\\n            royaltyPercentage: royaltyPercentage\\n        });\\n        \\n        emit CollectionRegistered(nftContract, name, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Update collection metadata\\n     * @param nftContract NFT contract address\\n     * @param tokenId Token ID\\n     * @param metadata NFT metadata\\n     */\\n    function updateNFTMetadata(\\n        address nftContract,\\n        uint256 tokenId,\\n        NFTMetadata memory metadata\\n    ) external {\\n        require(IERC721(nftContract).ownerOf(tokenId) == msg.sender, \\\"Not token owner\\\");\\n        \\n        nftMetadata[tokenId] = metadata;\\n        \\n        emit MetadataUpdated(nftContract, tokenId, metadata.name);\\n    }\\n\\n    // ============ UTILITY FUNCTIONS ============\\n    \\n    /**\\n     * @dev Get Dutch auction current price\\n     * @param listingId Listing ID\\n     * @return price Current price\\n     */\\n    function getDutchAuctionPrice(uint256 listingId) public view returns (uint256) {\\n        Listing storage listing = listings[listingId];\\n        require(listing.listingType == ListingType.DUTCH_AUCTION, \\\"Not a Dutch auction\\\");\\n        \\n        if (block.timestamp >= listing.expiresAt) {\\n            return listing.minBid; // End price\\n        }\\n        \\n        uint256 timeElapsed = block.timestamp - listing.createdAt;\\n        uint256 totalDuration = listing.expiresAt - listing.createdAt;\\n        \\n        uint256 priceDecrease = ((listing.price - listing.minBid) * timeElapsed) / totalDuration;\\n        return listing.price - priceDecrease;\\n    }\\n    \\n    /**\\n     * @dev Get listing details\\n     * @param listingId Listing ID\\n     * @return nftContract NFT contract address\\n     * @return tokenId Token ID\\n     * @return seller Seller address\\n     * @return price Price\\n     * @return aiSuggestedPrice AI suggested price\\n     * @return isActive Whether active\\n     * @return listingType Listing type\\n     * @return minBid Minimum bid\\n     * @return currentBid Current bid\\n     * @return currentBidder Current bidder\\n     * @return auctionEndTime Auction end time\\n     * @return createdAt Created timestamp\\n     * @return expiresAt Expires timestamp\\n     */\\n    function getListing(uint256 listingId)\\n        external\\n        view\\n        returns (\\n            address nftContract,\\n            uint256 tokenId,\\n            address seller,\\n            uint256 price,\\n            uint256 aiSuggestedPrice,\\n            bool isActive,\\n            ListingType listingType,\\n            uint256 minBid,\\n            uint256 currentBid,\\n            address currentBidder,\\n            uint256 auctionEndTime,\\n            uint256 createdAt,\\n            uint256 expiresAt\\n        )\\n    {\\n        Listing storage listing = listings[listingId];\\n        return (\\n            listing.nftContract,\\n            listing.tokenId,\\n            listing.seller,\\n            listing.price,\\n            listing.aiSuggestedPrice,\\n            listing.isActive,\\n            listing.listingType,\\n            listing.minBid,\\n            listing.currentBid,\\n            listing.currentBidder,\\n            listing.auctionEndTime,\\n            listing.createdAt,\\n            listing.expiresAt\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get user listings\\n     * @param user User address\\n     * @return listings Array of listing IDs\\n     */\\n    function getUserListings(address user) external view returns (uint256[] memory) {\\n        return userListings[user];\\n    }\\n    \\n    /**\\n     * @dev Get user bids\\n     * @param user User address\\n     * @return bids Array of listing IDs where user has bid\\n     */\\n    function getUserBids(address user) external view returns (uint256[] memory) {\\n        return userBids[user];\\n    }\\n    \\n    /**\\n     * @dev Get collection information\\n     * @param nftContract NFT contract address\\n     * @return name Collection name\\n     * @return description Collection description\\n     * @return totalListings Total listings\\n     * @return totalVolume Total volume\\n     * @return floorPrice Floor price\\n     * @return isVerified Whether verified\\n     * @return creator Creator address\\n     * @return royaltyPercentage Royalty percentage\\n     */\\n    function getCollection(address nftContract)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory description,\\n            uint256 totalListings,\\n            uint256 totalVolume,\\n            uint256 floorPrice,\\n            bool isVerified,\\n            address creator,\\n            uint256 royaltyPercentage\\n        )\\n    {\\n        Collection storage collection = collections[nftContract];\\n        return (\\n            collection.name,\\n            collection.description,\\n            collection.totalListings,\\n            collection.totalVolume,\\n            collection.floorPrice,\\n            collection.isVerified,\\n            collection.creator,\\n            collection.royaltyPercentage\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get NFT metadata\\n     * @param tokenId Token ID\\n     * @return name NFT name\\n     * @return description NFT description\\n     * @return imageUri Image URI\\n     * @return attributes Attributes\\n     * @return rarity Rarity\\n     * @return power Power level\\n     * @return level Level\\n     * @return gameType Game type\\n     * @return isGamingNFT Whether gaming NFT\\n     */\\n    function getNFTMetadata(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory description,\\n            string memory imageUri,\\n            string memory attributes,\\n            uint256 rarity,\\n            uint256 power,\\n            uint256 level,\\n            string memory gameType,\\n            bool isGamingNFT\\n        )\\n    {\\n        NFTMetadata storage metadata = nftMetadata[tokenId];\\n        return (\\n            metadata.name,\\n            metadata.description,\\n            metadata.imageUri,\\n            metadata.attributes,\\n            metadata.rarity,\\n            metadata.power,\\n            metadata.level,\\n            metadata.gameType,\\n            metadata.isGamingNFT\\n        );\\n    }\\n\\n    // ============ ADMIN FUNCTIONS ============\\n    \\n    /**\\n     * @dev Update platform fee\\n     * @param newFee New fee percentage (basis points)\\n     */\\n    function updatePlatformFee(uint256 newFee) external onlyOwner {\\n        require(newFee <= 1000, \\\"Fee too high\\\"); // Max 10%\\n        platformFee = newFee;\\n    }\\n    \\n    /**\\n     * @dev Update AI Oracle fee\\n     * @param newFee New fee percentage (basis points)\\n     */\\n    function updateAIOracleFee(uint256 newFee) external onlyOwner {\\n        require(newFee <= 500, \\\"Fee too high\\\"); // Max 5%\\n        aiOracleFee = newFee;\\n    }\\n    \\n    /**\\n     * @dev Update price limits\\n     * @param newMinPrice New minimum price\\n     * @param newMaxPrice New maximum price\\n     */\\n    function updatePriceLimits(uint256 newMinPrice, uint256 newMaxPrice) external onlyOwner {\\n        require(newMinPrice < newMaxPrice, \\\"Invalid price range\\\");\\n        minListingPrice = newMinPrice;\\n        maxListingPrice = newMaxPrice;\\n    }\\n    \\n    /**\\n     * @dev Update auction duration\\n     * @param newDuration New duration in seconds\\n     */\\n    function updateAuctionDuration(uint256 newDuration) external onlyOwner {\\n        require(newDuration > 0 && newDuration <= 30 days, \\\"Invalid duration\\\");\\n        auctionDuration = newDuration;\\n    }\\n    \\n    /**\\n     * @dev Verify collection\\n     * @param nftContract NFT contract address\\n     * @param isVerified Whether collection is verified\\n     */\\n    function verifyCollection(address nftContract, bool isVerified) external onlyOwner {\\n        require(collections[nftContract].nftContract != address(0), \\\"Collection not registered\\\");\\n        collections[nftContract].isVerified = isVerified;\\n    }\\n    \\n    /**\\n     * @dev Pause marketplace\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n    \\n    /**\\n     * @dev Unpause marketplace\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n    \\n    /**\\n     * @dev Emergency withdraw stuck tokens\\n     * @param token Token address\\n     * @param amount Amount to withdraw\\n     */\\n    function emergencyWithdraw(address token, uint256 amount) external onlyOwner {\\n        IERC20(token).transfer(owner(), amount);\\n    }\\n    \\n    /**\\n     * @dev Emergency withdraw stuck NFTs\\n     * @param nftContract NFT contract address\\n     * @param tokenId Token ID\\n     */\\n    function emergencyWithdrawNFT(address nftContract, uint256 tokenId) external onlyOwner {\\n        IERC721(nftContract).transferFrom(address(this), owner(), tokenId);\\n    }\\n} \"\n    },\n    \"contracts/NovaSanctumOracle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n\\n/**\\n * @title NovaSanctum AI Oracle\\n * @dev AI-powered oracle for GameDin L3 gaming blockchain\\n * @author GameDin Team\\n * @notice Provides real-time AI validation, fraud detection, and consensus optimization\\n */\\ncontract NovaSanctumOracle is Ownable, ReentrancyGuard, Pausable {\\n    constructor(address initialOwner) Ownable(initialOwner) {\\n        aiResponseTimeout = 1000; // 1 second timeout\\n        lastOptimizationUpdate = block.timestamp;\\n        \\n        // Initialize default consensus optimization\\n        currentOptimization = ConsensusOptimization({\\n            optimalThreshold: 67,      // 67% for gaming\\n            recommendedValidators: 21,  // 21 validators\\n            expectedFinality: 200,     // 200ms finality\\n            fraudRisk: 10,             // Low fraud risk\\n            shouldAdjust: false\\n        });\\n    }\\n    \\n\\n    // =============================================================================\\n    // STRUCTS AND ENUMS\\n    // =============================================================================\\n    \\n    struct AIAnalysis {\\n        uint256 fraudScore;            // 0-100 fraud score\\n        uint256 trustScore;            // 0-100 trust score\\n        bool isValid;                  // Overall validation result\\n        uint256 confidence;            // AI confidence level (0-100)\\n        string reason;                 // Reason for decision\\n        uint256 timestamp;             // Analysis timestamp\\n    }\\n    \\n    struct PlayerBehavior {\\n        uint256 totalActions;          // Total actions performed\\n        uint256 suspiciousActions;     // Number of suspicious actions\\n        uint256 lastActionTime;        // Last action timestamp\\n        uint256 averageActionValue;    // Average value per action\\n        uint256 maxActionValue;        // Maximum single action value\\n        bool isFlagged;                // Whether player is flagged\\n        uint256 flagReason;            // Reason for flagging\\n    }\\n    \\n    struct ConsensusOptimization {\\n        uint256 optimalThreshold;      // Optimal consensus threshold\\n        uint256 recommendedValidators; // Recommended validator count\\n        uint256 expectedFinality;      // Expected finality time in ms\\n        uint256 fraudRisk;             // Current fraud risk level\\n        bool shouldAdjust;             // Whether to adjust consensus\\n    }\\n    \\n    struct ValidatorMetrics {\\n        address validator;             // Validator address\\n        uint256 uptime;                // Uptime percentage\\n        uint256 responseTime;          // Average response time in ms\\n        uint256 consensusParticipation; // Consensus participation rate\\n        uint256 trustScore;            // AI trust score\\n        bool isOptimal;                // Whether validator is optimal\\n    }\\n\\n    // =============================================================================\\n    // STATE VARIABLES\\n    // =============================================================================\\n    \\n    // AI Configuration\\n    uint256 public constant MAX_FRAUD_SCORE = 100;\\n    uint256 public constant MIN_TRUST_SCORE = 50;\\n    uint256 public constant AI_CONFIDENCE_THRESHOLD = 80;\\n    uint256 public constant SUSPICIOUS_ACTION_THRESHOLD = 5;\\n    \\n    // Player behavior tracking\\n    mapping(address => PlayerBehavior) public playerBehaviors;\\n    mapping(address => AIAnalysis[]) public playerAnalyses;\\n    mapping(bytes32 => AIAnalysis) public transactionAnalyses;\\n    \\n    // Consensus optimization\\n    mapping(address => ValidatorMetrics) public validatorMetrics;\\n    ConsensusOptimization public currentOptimization;\\n    \\n    // AI Service configuration\\n    address public aiServiceProvider;\\n    mapping(address => bool) public authorizedCallers;\\n    uint256 public aiResponseTimeout;\\n    uint256 public lastOptimizationUpdate;\\n    \\n    // Statistics\\n    uint256 public totalAnalyses;\\n    uint256 public totalFraudDetected;\\n    uint256 public totalOptimizations;\\n    uint256 public averageResponseTime;\\n    \\n    // Counters\\n    uint256 private _analysisCounter;\\n    uint256 private _optimizationCounter;\\n    \\n    // =============================================================================\\n    // EVENTS\\n    // =============================================================================\\n    \\n    event AIAnalysisCompleted(\\n        address indexed player,\\n        bytes32 indexed transactionHash,\\n        uint256 fraudScore,\\n        uint256 trustScore,\\n        bool isValid,\\n        uint256 confidence,\\n        string reason\\n    );\\n    \\n    event FraudDetected(\\n        address indexed player,\\n        bytes32 indexed transactionHash,\\n        uint256 fraudScore,\\n        string reason,\\n        uint256 timestamp\\n    );\\n    \\n    event PlayerFlagged(\\n        address indexed player,\\n        uint256 flagReason,\\n        string details,\\n        uint256 timestamp\\n    );\\n    \\n    event ConsensusOptimized(\\n        uint256 oldThreshold,\\n        uint256 newThreshold,\\n        uint256 expectedFinality,\\n        uint256 fraudRisk,\\n        uint256 timestamp\\n    );\\n    \\n    event ValidatorMetricsUpdated(\\n        address indexed validator,\\n        uint256 uptime,\\n        uint256 responseTime,\\n        uint256 trustScore,\\n        bool isOptimal\\n    );\\n    \\n    event AIServiceProviderUpdated(address indexed oldProvider, address indexed newProvider);\\n    event AuthorizedCallerAdded(address indexed caller, address indexed addedBy);\\n    event AuthorizedCallerRemoved(address indexed caller, address indexed removedBy);\\n    \\n\\n    \\n    // =============================================================================\\n    // AI VALIDATION FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Validate a player action using AI analysis\\n     * @param player Player address\\n     * @param gameId Game identifier\\n     * @param actionType Type of action\\n     * @param xpAmount XP amount\\n     * @param tokenAmount Token amount\\n     * @param gameData Additional game data\\n     * @return isValid Whether the action is valid\\n     */\\n    function validatePlayerAction(\\n        address player,\\n        string memory gameId,\\n        string memory actionType,\\n        uint256 xpAmount,\\n        uint256 tokenAmount,\\n        bytes memory gameData\\n    ) external onlyAuthorizedCaller whenNotPaused returns (bool) {\\n        require(player != address(0), \\\"Invalid player address\\\");\\n        \\n        // Generate transaction hash for tracking\\n        bytes32 transactionHash = keccak256(abi.encodePacked(\\n            player,\\n            gameId,\\n            actionType,\\n            xpAmount,\\n            tokenAmount,\\n            gameData,\\n            block.timestamp\\n        ));\\n        \\n        // Perform AI analysis\\n        AIAnalysis memory analysis = _performAIAnalysis(\\n            player,\\n            gameId,\\n            actionType,\\n            xpAmount,\\n            tokenAmount,\\n            gameData,\\n            transactionHash\\n        );\\n        \\n        // Store analysis\\n        transactionAnalyses[transactionHash] = analysis;\\n        playerAnalyses[player].push(analysis);\\n        \\n        // Update player behavior\\n        _updatePlayerBehavior(player, analysis);\\n        \\n        // Emit events\\n        emit AIAnalysisCompleted(\\n            player,\\n            transactionHash,\\n            analysis.fraudScore,\\n            analysis.trustScore,\\n            analysis.isValid,\\n            analysis.confidence,\\n            analysis.reason\\n        );\\n        \\n        if (analysis.fraudScore > MAX_FRAUD_SCORE / 2) {\\n            emit FraudDetected(\\n                player,\\n                transactionHash,\\n                analysis.fraudScore,\\n                analysis.reason,\\n                block.timestamp\\n            );\\n            totalFraudDetected++;\\n        }\\n        \\n        totalAnalyses++;\\n        _analysisCounter++;\\n        \\n        return analysis.isValid;\\n    }\\n    \\n    /**\\n     * @dev Internal function to perform AI analysis\\n     */\\n    function _performAIAnalysis(\\n        address player,\\n        string memory gameId,\\n        string memory actionType,\\n        uint256 xpAmount,\\n        uint256 tokenAmount,\\n        bytes memory gameData,\\n        bytes32 transactionHash\\n    ) internal view returns (AIAnalysis memory) {\\n        PlayerBehavior storage behavior = playerBehaviors[player];\\n        \\n        // Calculate fraud score based on multiple factors\\n        uint256 fraudScore = _calculateFraudScore(\\n            player,\\n            behavior,\\n            xpAmount,\\n            tokenAmount,\\n            actionType\\n        );\\n        \\n        // Calculate trust score\\n        uint256 trustScore = _calculateTrustScore(player, behavior);\\n        \\n        // Determine if action is valid\\n        bool isValid = fraudScore < MAX_FRAUD_SCORE / 2 && \\n                      trustScore > MIN_TRUST_SCORE;\\n        \\n        // Generate reason for decision\\n        string memory reason = _generateReason(fraudScore, trustScore, behavior);\\n        \\n        return AIAnalysis({\\n            fraudScore: fraudScore,\\n            trustScore: trustScore,\\n            isValid: isValid,\\n            confidence: _calculateConfidence(fraudScore, trustScore),\\n            reason: reason,\\n            timestamp: block.timestamp\\n        });\\n    }\\n    \\n    /**\\n     * @dev Calculate fraud score based on various factors\\n     */\\n    function _calculateFraudScore(\\n        address player,\\n        PlayerBehavior storage behavior,\\n        uint256 xpAmount,\\n        uint256 tokenAmount,\\n        string memory actionType\\n    ) internal view returns (uint256) {\\n        uint256 fraudScore = 0;\\n        \\n        // Check for suspicious action patterns\\n        if (behavior.suspiciousActions > SUSPICIOUS_ACTION_THRESHOLD) {\\n            fraudScore += 30;\\n        }\\n        \\n        // Check for unusual reward amounts\\n        if (xpAmount > behavior.averageActionValue * 10) {\\n            fraudScore += 25;\\n        }\\n        \\n        if (tokenAmount > behavior.maxActionValue * 5) {\\n            fraudScore += 25;\\n        }\\n        \\n        // Check for rapid successive actions\\n        if (block.timestamp - behavior.lastActionTime < 1) {\\n            fraudScore += 20;\\n        }\\n        \\n        // Check if player is flagged\\n        if (behavior.isFlagged) {\\n            fraudScore += 50;\\n        }\\n        \\n        return fraudScore > MAX_FRAUD_SCORE ? MAX_FRAUD_SCORE : fraudScore;\\n    }\\n    \\n    /**\\n     * @dev Calculate trust score for a player\\n     */\\n    function _calculateTrustScore(\\n        address player,\\n        PlayerBehavior storage behavior\\n    ) internal view returns (uint256) {\\n        uint256 trustScore = 50; // Base trust score\\n        \\n        // Increase trust based on positive behavior\\n        if (behavior.totalActions > 100) {\\n            trustScore += 20;\\n        }\\n        \\n        if (behavior.suspiciousActions == 0) {\\n            trustScore += 20;\\n        }\\n        \\n        if (behavior.averageActionValue > 0 && \\n            behavior.averageActionValue < 1000) {\\n            trustScore += 10;\\n        }\\n        \\n        return trustScore > 100 ? 100 : trustScore;\\n    }\\n    \\n    /**\\n     * @dev Calculate AI confidence level\\n     */\\n    function _calculateConfidence(\\n        uint256 fraudScore,\\n        uint256 trustScore\\n    ) internal pure returns (uint256) {\\n        // Higher confidence when scores are clear\\n        if (fraudScore < 20 && trustScore > 80) {\\n            return 95;\\n        } else if (fraudScore > 80 || trustScore < 20) {\\n            return 90;\\n        } else {\\n            return 75; // Medium confidence for unclear cases\\n        }\\n    }\\n    \\n    /**\\n     * @dev Generate reason for AI decision\\n     */\\n    function _generateReason(\\n        uint256 fraudScore,\\n        uint256 trustScore,\\n        PlayerBehavior storage behavior\\n    ) internal view returns (string memory) {\\n        if (fraudScore > 80) {\\n            return \\\"High fraud score detected\\\";\\n        } else if (trustScore < 30) {\\n            return \\\"Low trust score\\\";\\n        } else if (behavior.isFlagged) {\\n            return \\\"Player flagged for suspicious activity\\\";\\n        } else if (fraudScore > 50) {\\n            return \\\"Moderate fraud risk\\\";\\n        } else {\\n            return \\\"Action validated successfully\\\";\\n        }\\n    }\\n    \\n    // =============================================================================\\n    // CONSENSUS OPTIMIZATION\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Optimize consensus parameters based on AI analysis\\n     * @return result Optimization result\\n     */\\n    function optimizeConsensus() external onlyAuthorizedCaller whenNotPaused returns (ConsensusOptimization memory) {\\n        require(block.timestamp - lastOptimizationUpdate > 300, \\\"Too frequent optimization\\\");\\n        \\n        // Analyze current network state\\n        uint256 currentFraudRisk = _calculateNetworkFraudRisk();\\n        uint256 currentLoad = _calculateNetworkLoad();\\n        \\n        // Determine optimal parameters\\n        uint256 newThreshold = _calculateOptimalThreshold(currentFraudRisk, currentLoad);\\n        uint256 newFinality = _calculateOptimalFinality(currentFraudRisk, currentLoad);\\n        \\n        // Update optimization\\n        ConsensusOptimization memory oldOptimization = currentOptimization;\\n        currentOptimization = ConsensusOptimization({\\n            optimalThreshold: newThreshold,\\n            recommendedValidators: 21, // Keep constant for now\\n            expectedFinality: newFinality,\\n            fraudRisk: currentFraudRisk,\\n            shouldAdjust: newThreshold != oldOptimization.optimalThreshold\\n        });\\n        \\n        lastOptimizationUpdate = block.timestamp;\\n        totalOptimizations++;\\n        _optimizationCounter++;\\n        \\n        emit ConsensusOptimized(\\n            oldOptimization.optimalThreshold,\\n            newThreshold,\\n            newFinality,\\n            currentFraudRisk,\\n            block.timestamp\\n        );\\n        \\n        return currentOptimization;\\n    }\\n    \\n    /**\\n     * @dev Calculate optimal consensus threshold\\n     */\\n    function _calculateOptimalThreshold(\\n        uint256 fraudRisk,\\n        uint256 networkLoad\\n    ) internal pure returns (uint256) {\\n        // Higher fraud risk = higher threshold\\n        if (fraudRisk > 50) {\\n            return 80; // 80% threshold for high fraud\\n        } else if (fraudRisk > 20) {\\n            return 75; // 75% threshold for moderate fraud\\n        } else {\\n            return 67; // 67% threshold for low fraud (gaming optimized)\\n        }\\n    }\\n    \\n    /**\\n     * @dev Calculate optimal finality time\\n     */\\n    function _calculateOptimalFinality(\\n        uint256 fraudRisk,\\n        uint256 networkLoad\\n    ) internal pure returns (uint256) {\\n        // Higher fraud risk = longer finality\\n        if (fraudRisk > 50) {\\n            return 1000; // 1 second for high fraud\\n        } else if (fraudRisk > 20) {\\n            return 500; // 500ms for moderate fraud\\n        } else {\\n            return 200; // 200ms for low fraud (gaming optimized)\\n        }\\n    }\\n    \\n    /**\\n     * @dev Calculate current network fraud risk\\n     */\\n    function _calculateNetworkFraudRisk() internal view returns (uint256) {\\n        // Simplified calculation - in practice would use more sophisticated metrics\\n        if (totalAnalyses == 0) return 10;\\n        \\n        return (totalFraudDetected * 100) / totalAnalyses;\\n    }\\n    \\n    /**\\n     * @dev Calculate current network load\\n     */\\n    function _calculateNetworkLoad() internal view returns (uint256) {\\n        // Simplified calculation - in practice would use actual network metrics\\n        return 50; // Medium load\\n    }\\n    \\n    // =============================================================================\\n    // VALIDATOR METRICS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Update validator metrics\\n     * @param validator Validator address\\n     * @param uptime Uptime percentage\\n     * @param responseTime Average response time in ms\\n     * @param consensusParticipation Consensus participation rate\\n     */\\n    function updateValidatorMetrics(\\n        address validator,\\n        uint256 uptime,\\n        uint256 responseTime,\\n        uint256 consensusParticipation\\n    ) external onlyAuthorizedCaller whenNotPaused {\\n        require(validator != address(0), \\\"Invalid validator address\\\");\\n        \\n        // Calculate trust score\\n        uint256 trustScore = _calculateValidatorTrustScore(\\n            uptime,\\n            responseTime,\\n            consensusParticipation\\n        );\\n        \\n        // Determine if validator is optimal\\n        bool isOptimal = trustScore > 80 && uptime > 95 && responseTime < 100;\\n        \\n        validatorMetrics[validator] = ValidatorMetrics({\\n            validator: validator,\\n            uptime: uptime,\\n            responseTime: responseTime,\\n            consensusParticipation: consensusParticipation,\\n            trustScore: trustScore,\\n            isOptimal: isOptimal\\n        });\\n        \\n        emit ValidatorMetricsUpdated(\\n            validator,\\n            uptime,\\n            responseTime,\\n            trustScore,\\n            isOptimal\\n        );\\n    }\\n    \\n    /**\\n     * @dev Calculate validator trust score\\n     */\\n    function _calculateValidatorTrustScore(\\n        uint256 uptime,\\n        uint256 responseTime,\\n        uint256 consensusParticipation\\n    ) internal pure returns (uint256) {\\n        uint256 trustScore = 0;\\n        \\n        // Uptime contribution (40% weight)\\n        trustScore += (uptime * 40) / 100;\\n        \\n        // Response time contribution (30% weight)\\n        if (responseTime < 50) {\\n            trustScore += 30;\\n        } else if (responseTime < 100) {\\n            trustScore += 20;\\n        } else if (responseTime < 200) {\\n            trustScore += 10;\\n        }\\n        \\n        // Consensus participation contribution (30% weight)\\n        trustScore += (consensusParticipation * 30) / 100;\\n        \\n        return trustScore;\\n    }\\n    \\n    // =============================================================================\\n    // PLAYER BEHAVIOR MANAGEMENT\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Update player behavior based on AI analysis\\n     */\\n    function _updatePlayerBehavior(\\n        address player,\\n        AIAnalysis memory analysis\\n    ) internal {\\n        PlayerBehavior storage behavior = playerBehaviors[player];\\n        \\n        behavior.totalActions++;\\n        behavior.lastActionTime = block.timestamp;\\n        \\n        if (analysis.fraudScore > MAX_FRAUD_SCORE / 2) {\\n            behavior.suspiciousActions++;\\n            \\n            // Flag player if too many suspicious actions\\n            if (behavior.suspiciousActions > SUSPICIOUS_ACTION_THRESHOLD) {\\n                behavior.isFlagged = true;\\n                behavior.flagReason = 1; // Too many suspicious actions\\n                \\n                emit PlayerFlagged(\\n                    player,\\n                    behavior.flagReason,\\n                    \\\"Multiple suspicious actions detected\\\",\\n                    block.timestamp\\n                );\\n            }\\n        }\\n    }\\n    \\n    /**\\n     * @dev Flag a player for manual review\\n     * @param player Player address\\n     * @param reason Flag reason\\n     * @param details Additional details\\n     */\\n    function flagPlayer(\\n        address player,\\n        uint256 reason,\\n        string memory details\\n    ) external onlyOwner {\\n        require(player != address(0), \\\"Invalid player address\\\");\\n        \\n        PlayerBehavior storage behavior = playerBehaviors[player];\\n        behavior.isFlagged = true;\\n        behavior.flagReason = reason;\\n        \\n        emit PlayerFlagged(player, reason, details, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Unflag a player\\n     * @param player Player address\\n     */\\n    function unflagPlayer(address player) external onlyOwner {\\n        require(player != address(0), \\\"Invalid player address\\\");\\n        \\n        PlayerBehavior storage behavior = playerBehaviors[player];\\n        behavior.isFlagged = false;\\n        behavior.flagReason = 0;\\n    }\\n    \\n    // =============================================================================\\n    // QUERY FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Get current consensus optimization\\n     * @return params Current optimization parameters\\n     */\\n    function getCurrentOptimization() external view returns (ConsensusOptimization memory) {\\n        return currentOptimization;\\n    }\\n    \\n    /**\\n     * @dev Get player behavior data\\n     * @param player Player address\\n     * @return totalActions Total actions\\n     * @return suspiciousActions Suspicious actions\\n     * @return lastActionTime Last action time\\n     * @return averageActionValue Average action value\\n     * @return maxActionValue Maximum action value\\n     * @return isFlagged Whether flagged\\n     * @return flagReason Flag reason\\n     */\\n    function getPlayerBehavior(address player) external view returns (\\n        uint256 totalActions,\\n        uint256 suspiciousActions,\\n        uint256 lastActionTime,\\n        uint256 averageActionValue,\\n        uint256 maxActionValue,\\n        bool isFlagged,\\n        uint256 flagReason\\n    ) {\\n        PlayerBehavior storage behavior = playerBehaviors[player];\\n        return (\\n            behavior.totalActions,\\n            behavior.suspiciousActions,\\n            behavior.lastActionTime,\\n            behavior.averageActionValue,\\n            behavior.maxActionValue,\\n            behavior.isFlagged,\\n            behavior.flagReason\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get validator metrics\\n     * @param validator Validator address\\n     * @return uptime Uptime percentage\\n     * @return responseTime Response time\\n     * @return consensusParticipation Consensus participation\\n     * @return trustScore Trust score\\n     * @return isOptimal Whether optimal\\n     */\\n    function getValidatorMetrics(address validator) external view returns (\\n        uint256 uptime,\\n        uint256 responseTime,\\n        uint256 consensusParticipation,\\n        uint256 trustScore,\\n        bool isOptimal\\n    ) {\\n        ValidatorMetrics storage metrics = validatorMetrics[validator];\\n        return (\\n            metrics.uptime,\\n            metrics.responseTime,\\n            metrics.consensusParticipation,\\n            metrics.trustScore,\\n            metrics.isOptimal\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get AI analysis for a transaction\\n     * @param transactionHash Transaction hash\\n     * @return fraudScore Fraud score\\n     * @return trustScore Trust score\\n     * @return isValid Whether valid\\n     * @return confidence Confidence level\\n     * @return reason Analysis reason\\n     * @return timestamp Timestamp\\n     */\\n    function getTransactionAnalysis(bytes32 transactionHash) external view returns (\\n        uint256 fraudScore,\\n        uint256 trustScore,\\n        bool isValid,\\n        uint256 confidence,\\n        string memory reason,\\n        uint256 timestamp\\n    ) {\\n        AIAnalysis storage analysis = transactionAnalyses[transactionHash];\\n        return (\\n            analysis.fraudScore,\\n            analysis.trustScore,\\n            analysis.isValid,\\n            analysis.confidence,\\n            analysis.reason,\\n            analysis.timestamp\\n        );\\n    }\\n    \\n    // =============================================================================\\n    // ADMIN FUNCTIONS\\n    // =============================================================================\\n    \\n    /**\\n     * @dev Set AI service provider\\n     * @param provider New AI service provider address\\n     */\\n    function setAIServiceProvider(address provider) external onlyOwner {\\n        address oldProvider = aiServiceProvider;\\n        aiServiceProvider = provider;\\n        emit AIServiceProviderUpdated(oldProvider, provider);\\n    }\\n    \\n    /**\\n     * @dev Add authorized caller\\n     * @param caller Caller address\\n     */\\n    function addAuthorizedCaller(address caller) external onlyOwner {\\n        require(caller != address(0), \\\"Invalid caller address\\\");\\n        authorizedCallers[caller] = true;\\n        emit AuthorizedCallerAdded(caller, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Remove authorized caller\\n     * @param caller Caller address\\n     */\\n    function removeAuthorizedCaller(address caller) external onlyOwner {\\n        authorizedCallers[caller] = false;\\n        emit AuthorizedCallerRemoved(caller, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Set AI response timeout\\n     * @param timeout Timeout in milliseconds\\n     */\\n    function setAIResponseTimeout(uint256 timeout) external onlyOwner {\\n        aiResponseTimeout = timeout;\\n    }\\n    \\n    /**\\n     * @dev Pause oracle\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n    \\n    /**\\n     * @dev Unpause oracle\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n    \\n    // =============================================================================\\n    // MODIFIERS\\n    // =============================================================================\\n    \\n    modifier onlyAuthorizedCaller() {\\n        require(\\n            authorizedCallers[msg.sender] || msg.sender == owner(),\\n            \\\"Not authorized caller\\\"\\n        );\\n        _;\\n    }\\n} \"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 1000000\n    },\n    \"viaIR\": true,\n    \"evmVersion\": \"paris\",\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "748f7838d387892caf04e5a74f5611d0",
      "transactionHash": "0xf0920ad3d02a43257671a6b5ac677f586143db96f23af4f6c0c7247b3a993bab",
      "args": [
        "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "1000000000000000000000000000"
      ]
    },
    "decoded": {
      "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
      "gasPrice": "1000000000",
      "gasLimit": "5000000",
      "to": null,
      "value": "0",
      "nonce": 0,
      "data": "",
      "r": "0x7aae5f1d474ac9371103b429462d11ee8b0042293b81d2edb8bdff8410fc489f",
      "s": "0x10ea440223147d1d35c68b601adc3fcb63ab16392857d35e4031f4cf20d8d112",
      "v": 62709,
      "chainId": 31337
    }
  }
}