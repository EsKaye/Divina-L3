name: GameDin L3 CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  SOLIDITY_VERSION: '0.8.20'
  GO_VERSION: '1.21'
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-west-2'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      hardhat-node:
        image: ethereumoptimism/hardhat-node:latest
        ports:
          - 8545:8545
        options: >-
          --health-cmd "curl http://localhost:8545"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Dependencies
      run: |
        npm ci
        npm install -g hardhat@latest

    - name: Run Unit Tests
      run: |
        npx hardhat compile
        npx hardhat test --network hardhat

    - name: Run Integration Tests
      run: |
        npx hardhat test test/integration/ --network hardhat

  build:
    name: Build and Lint
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Dependencies
      run: npm ci

    - name: Lint Code
      run: |
        npm run lint
        npm run typecheck

    - name: Build Frontend
      run: |
        cd gdi-dapp
        npm ci
        npm run build

  deploy-staging:
    name: Deploy to Staging
    needs: [test, build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend-config="bucket=gamedin-l3-terraform-state" \
                      -backend-config="key=staging/terraform.tfstate"

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve -var="environment=staging"

  deploy-production:
    name: Deploy to Production
    needs: [test, build, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend-config="bucket=gamedin-l3-terraform-state" \
                      -backend-config="key=production/terraform.tfstate"

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve -var="environment=production"
